# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-pub` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-pub`.

# Dart pre-release versions use 1.0.1-rc1 syntax, which Gem::Version
# converts into 1.0.1.pre.rc1. We override the `to_s` method to stop that
# alteration.
#
# For details on versions syntax supported by pub, see:
# https://semver.org/spec/v2.0.0-rc.1.html
#
# For details on semantics of version ranges as understood by pub, see:
# https://github.com/dart-lang/pub_semver
#
# source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#9
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#10
module Dependabot::Pub; end

# source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#11
class Dependabot::Pub::FileFetcher < ::Dependabot::FileFetchers::Base
  private

  # source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#22
  def fetch_files; end

  # source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#40
  def pubspec_lock; end

  # source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#36
  def pubspec_yaml; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#12
    def required_files_in?(filenames); end

    # source://dependabot-pub//lib/dependabot/pub/file_fetcher.rb#16
    def required_files_message; end
  end
end

# source://dependabot-pub//lib/dependabot/pub/file_parser.rb#12
class Dependabot::Pub::FileParser < ::Dependabot::FileParsers::Base
  include ::Dependabot::Pub::Helpers

  # source://dependabot-pub//lib/dependabot/pub/file_parser.rb#16
  def parse; end

  private

  # source://dependabot-pub//lib/dependabot/pub/file_parser.rb#26
  def check_required_files; end

  # source://dependabot-pub//lib/dependabot/pub/file_parser.rb#30
  def list; end
end

# source://dependabot-pub//lib/dependabot/pub/file_updater.rb#10
class Dependabot::Pub::FileUpdater < ::Dependabot::FileUpdaters::Base
  include ::Dependabot::Pub::Helpers

  # source://dependabot-pub//lib/dependabot/pub/file_updater.rb#20
  def updated_dependency_files; end

  private

  # source://dependabot-pub//lib/dependabot/pub/file_updater.rb#26
  def check_required_files; end

  class << self
    # source://dependabot-pub//lib/dependabot/pub/file_updater.rb#13
    def updated_files_regex; end
  end
end

# source://dependabot-pub//lib/dependabot/pub/helpers.rb#15
module Dependabot::Pub::Helpers
  private

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#54
  def available_versions(dependency); end

  # Will ensure that /tmp/flutter contains the flutter repo checked out at `ref`.
  #
  # @raise [Dependabot::DependabotError]
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#135
  def check_out_flutter_ref(ref); end

  # expects "auto" to already have been resolved to one of the other
  # strategies.
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#336
  def constraint_field_from_update_strategy(requirements_update_strategy); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#347
  def dependencies_to_json(dependencies); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#107
  def dependency_services_apply(dependency_changes); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#34
  def dependency_services_list; end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#92
  def dependency_services_report; end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#60
  def dependency_services_smallest_update; end

  # Clones the flutter repo into /tmp/flutter if needed
  #
  # @raise [Dependabot::DependabotError]
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#118
  def ensure_flutter_repo; end

  # Detects the right flutter release to use for the pubspec.yaml.
  # Then checks it out if it is not already.
  # Returns the sdk versions
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#165
  def ensure_right_flutter_release(dir); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#43
  def fetch_package_listing(dependency); end

  # Parses a dependency as listed by `dependency_services list`.
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#271
  def parse_listed_dependency(json); end

  # Parses the updated dependencies returned by
  # `dependency_services report`.
  #
  # The `requirements_update_strategy`` is
  # used to chose the right updated constraint.
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#296
  def parse_updated_dependency(json, requirements_update_strategy: T.unsafe(nil)); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#38
  def repository_url(dependency); end

  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#235
  def run_dependency_services(command, stdin_data: T.unsafe(nil)); end

  # @raise [Dependabot::DependabotError]
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#190
  def run_flutter_doctor; end

  # Runs `flutter version` and returns the dart and flutter version numbers in a map.
  #
  # source://dependabot-pub//lib/dependabot/pub/helpers.rb#204
  def run_flutter_version; end

  class << self
    # source://dependabot-pub//lib/dependabot/pub/helpers.rb#16
    def pub_helpers_path; end

    # source://dependabot-pub//lib/dependabot/pub/helpers.rb#20
    def run_infer_sdk_versions(dir, url: T.unsafe(nil)); end
  end
end

# source://dependabot-pub//lib/dependabot/pub/metadata_finder.rb#11
class Dependabot::Pub::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-pub//lib/dependabot/pub/metadata_finder.rb#14
  def look_up_source; end

  # source://dependabot-pub//lib/dependabot/pub/metadata_finder.rb#34
  def repository_listing(repository_url); end
end

# source://dependabot-pub//lib/dependabot/pub/requirement.rb#14
class Dependabot::Pub::Requirement < ::Gem::Requirement
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#43
  def initialize(*requirements, raw_constraint: T.unsafe(nil)); end

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#54
  def to_s; end

  private

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#100
  def convert_caret_req(req_string); end

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#64
  def convert_dart_constraint_to_ruby_constraint(req_string); end

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#80
  def convert_range_req(req_string); end

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#74
  def convert_tilde_req(req_string); end

  # source://dependabot-pub//lib/dependabot/pub/requirement.rb#86
  def ruby_range(req_string); end

  class << self
    # Use Pub::Version rather than Gem::Version to ensure that
    # pre-release versions aren't transformed.
    #
    # source://dependabot-pub//lib/dependabot/pub/requirement.rb#23
    def parse(obj); end

    # For consistency with other languages, we define a requirements array.
    # Dart doesn't have an `OR` separator for requirements, so it always
    # contains a single element.
    #
    # source://dependabot-pub//lib/dependabot/pub/requirement.rb#39
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-pub//lib/dependabot/pub/requirement.rb#19
Dependabot::Pub::Requirement::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-pub//lib/dependabot/pub/requirement.rb#18
Dependabot::Pub::Requirement::PATTERN_RAW = T.let(T.unsafe(nil), String)

# source://dependabot-pub//lib/dependabot/pub/update_checker.rb#11
class Dependabot::Pub::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  include ::Dependabot::Pub::Helpers

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#30
  def latest_resolvable_version; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#21
  def latest_resolvable_version_with_no_unlock; end

  # @raise [AllVersionsIgnored]
  #
  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#14
  def latest_version; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#39
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#45
  def lowest_security_fix_version; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#60
  def updated_requirements; end

  private

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#143
  def current_report; end

  # @return [Boolean]
  #
  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#111
  def git_revision?(version_string); end

  # @return [Boolean]
  #
  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#115
  def latest_version_resolvable_with_full_unlock?; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#139
  def report; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#151
  def resolve_requirements_update_strategy; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#147
  def resolved_requirements_update_strategy; end

  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#124
  def updated_dependencies_after_full_unlock; end

  # Returns unparsed_version if it looks like a git-revision.
  #
  # Otherwise it will be parsed with Dependabot::Pub::Version.new and
  # checked against the ignored_requirements:
  #
  # * If not ignored the parsed Version object will be returned.
  # * If current_version is non-nil and the parsed version is the same it
  #   will be returned.
  # * Otherwise returns nil
  #
  # source://dependabot-pub//lib/dependabot/pub/update_checker.rb#96
  def version_unless_ignored(unparsed_version, current_version: T.unsafe(nil)); end
end

# source://dependabot-pub//lib/dependabot/pub/version.rb#19
class Dependabot::Pub::Version < ::Dependabot::Version
  # source://dependabot-pub//lib/dependabot/pub/version.rb#29
  sig { override.params(version: T.any(::Gem::Version, ::String)).void }
  def initialize(version); end

  # source://dependabot-pub//lib/dependabot/pub/version.rb#26
  sig { returns(::String) }
  def build_info; end

  # source://dependabot-pub//lib/dependabot/pub/version.rb#42
  sig { override.returns(::String) }
  def inspect; end

  # source://dependabot-pub//lib/dependabot/pub/version.rb#37
  sig { override.returns(::String) }
  def to_s; end

  class << self
    # source://dependabot-pub//lib/dependabot/pub/version.rb#47
    sig { override.params(version: T.any(::Gem::Version, ::String)).returns(T::Boolean) }
    def correct?(version); end
  end
end

# source://dependabot-pub//lib/dependabot/pub/version.rb#23
Dependabot::Pub::Version::ANCHORED_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-pub//lib/dependabot/pub/version.rb#22
Dependabot::Pub::Version::VERSION_PATTERN = T.let(T.unsafe(nil), String)
