# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-go_modules` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-go_modules`.

# source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#7
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#8
module Dependabot::GoModules; end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#9
class Dependabot::GoModules::FileFetcher < ::Dependabot::FileFetchers::Base
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#18
  def ecosystem_versions; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#30
  def fetch_files; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#52
  def go_mod; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#58
  def go_sum; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#64
  def recurse_submodules_when_cloning?; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#10
    def required_files_in?(filenames); end

    # source://dependabot-go_modules//lib/dependabot/go_modules/file_fetcher.rb#14
    def required_files_message; end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#16
class Dependabot::GoModules::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#17
  def parse; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#48
  def check_required_files; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#52
  def dependency_from_details(details); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#138
  def dependency_is_replaced(details); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#44
  def go_mod; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#117
  def go_mod_content; end

  # @raise [Dependabot::DependencyFileNotParseable]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#123
  def handle_parser_error(path, stderr); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#92
  def local_replacements; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#101
  def manifest; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#71
  def required_packages; end

  # set GOTOOLCHAIN=local if go version >= 1.21
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#32
  def set_gotoolchain_env; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_parser.rb#128
  def skip_dependency?(dep); end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#11
class Dependabot::GoModules::FileUpdater < ::Dependabot::FileUpdaters::Base
  # @return [FileUpdater] a new instance of FileUpdater
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#14
  def initialize(dependencies:, dependency_files:, credentials:, repo_contents_path: T.unsafe(nil), options: T.unsafe(nil)); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#29
  def updated_dependency_files; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#65
  def check_required_files; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#60
  def dependency_changed?(go_mod); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#102
  def directory; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#117
  def file_updater; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#94
  def go_mod; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#98
  def go_sum; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#129
  def tidy?; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#71
  def use_repo_contents_stub; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#133
  def vendor?; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#106
  def vendor_dir; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#110
  def vendor_updater; end

  class << self
    # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater.rb#22
    def updated_files_regex; end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#15
class Dependabot::GoModules::FileUpdater::GoModUpdater
  # @return [GoModUpdater] a new instance of GoModUpdater
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#67
  def initialize(dependencies:, dependency_files:, credentials:, repo_contents_path:, directory:, options:); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#79
  def updated_go_mod_content; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#83
  def updated_go_sum_content; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#220
  def build_module_stubs(stub_paths); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#89
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#89
  def dependencies; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#89
  def dependency_files; end

  # Returns the value of attribute directory.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#89
  def directory; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#317
  def environment; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#291
  def filter_error_message(message:, regex:); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#299
  def go_mod_path; end

  # @raise [Dependabot::DependabotError]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#253
  def handle_subprocess_error(stderr); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#214
  def in_repo_path(&block); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#206
  def parse_manifest; end

  # Given a go.mod file, find all `replace` directives pointing to a path
  # on the local filesystem, and return an array of pairs mapping the
  # original path to a hash of the path.
  #
  # This lets us substitute all parts of the go.mod that are dependent on
  # the layout of the filesystem with a structure we can reproduce (i.e.
  # no paths such as ../../../foo), run the Go tooling, then reverse the
  # process afterwards.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#239
  def replace_directive_substitutions(manifest); end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#89
  def repo_contents_path; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#181
  def run_go_get(dependencies = T.unsafe(nil)); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#160
  def run_go_mod_tidy; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#173
  def run_go_vendor; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#245
  def substitute_all(substitutions); end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#309
  def tidy?; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#96
  def update_files; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#92
  def updated_files; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#313
  def vendor?; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#305
  def write_go_mod(body); end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#65
Dependabot::GoModules::FileUpdater::GoModUpdater::GO_MOD_VERSION = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#54
Dependabot::GoModules::FileUpdater::GoModUpdater::MODULE_PATH_MISMATCH_REGEXES = T.let(T.unsafe(nil), Array)

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#60
Dependabot::GoModules::FileUpdater::GoModUpdater::OUT_OF_DISK_REGEXES = T.let(T.unsafe(nil), Array)

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#34
Dependabot::GoModules::FileUpdater::GoModUpdater::REPO_RESOLVABILITY_ERROR_REGEXES = T.let(T.unsafe(nil), Array)

# source://dependabot-go_modules//lib/dependabot/go_modules/file_updater/go_mod_updater.rb#16
Dependabot::GoModules::FileUpdater::GoModUpdater::RESOLVABILITY_ERROR_REGEXES = T.let(T.unsafe(nil), Array)

# source://dependabot-go_modules//lib/dependabot/go_modules/metadata_finder.rb#10
class Dependabot::GoModules::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/metadata_finder.rb#13
  def look_up_source; end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/native_helpers.rb#6
module Dependabot::GoModules::NativeHelpers
  class << self
    # source://dependabot-go_modules//lib/dependabot/go_modules/native_helpers.rb#16
    def clean_path(path); end

    # source://dependabot-go_modules//lib/dependabot/go_modules/native_helpers.rb#7
    def helper_path; end

    # source://dependabot-go_modules//lib/dependabot/go_modules/native_helpers.rb#11
    def native_helpers_root; end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/path_converter.rb#8
module Dependabot::GoModules::PathConverter
  class << self
    # source://dependabot-go_modules//lib/dependabot/go_modules/path_converter.rb#9
    def git_url_for_path(path); end
  end
end

# Given a go.mod file, find all `replace` directives pointing to a path
# on the local filesystem outside of the current checkout, and return a hash
# mapping the original path to a hash of the path.
#
# This lets us substitute all parts of the go.mod that are dependent on
# the layout of the filesystem with a structure we can reproduce (i.e.
# no paths such as ../../../foo), run the Go tooling, then reverse the
# process afterwards.
#
# source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#14
class Dependabot::GoModules::ReplaceStubber
  # @return [ReplaceStubber] a new instance of ReplaceStubber
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#15
  def initialize(repo_contents_path); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#19
  def stub_paths(manifest, directory); end

  private

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#40
  def absolute_path?(path); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#49
  def module_pathname(directory); end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#44
  def relative_replacement_path?(path); end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/replace_stubber.rb#28
  def stub_replace_path?(path, directory); end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#15
class Dependabot::GoModules::Requirement < ::Gem::Requirement
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#51
  def initialize(*requirements); end

  private

  # NOTE: Dep's caret notation implementation doesn't distinguish between
  # pre and post-1.0.0 requirements (unlike in JS)
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#139
  def convert_caret_req(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#63
  def convert_go_constraint_to_ruby_constraint(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#118
  def convert_hyphen_req(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#111
  def convert_tilde_req(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#77
  def convert_wildcard_characters(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#93
  def replace_wildcard_in_lower_bound(req_string); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#123
  def ruby_range(req_string); end

  class << self
    # Use GoModules::Version rather than Gem::Version to ensure that
    # pre-release versions aren't transformed.
    #
    # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#28
    def parse(obj); end

    # Returns an array of requirements. At least one requirement from the
    # returned array must be satisfied for a version to be valid.
    #
    # source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#43
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#17
Dependabot::GoModules::Requirement::OR_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#24
Dependabot::GoModules::Requirement::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#23
Dependabot::GoModules::Requirement::PATTERN_RAW = T.let(T.unsafe(nil), String)

# source://dependabot-go_modules//lib/dependabot/go_modules/requirement.rb#16
Dependabot::GoModules::Requirement::WILDCARD_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/resolvability_errors.rb#6
module Dependabot::GoModules::ResolvabilityErrors
  class << self
    # @raise [Dependabot::DependencyFileNotResolvable]
    #
    # source://dependabot-go_modules//lib/dependabot/go_modules/resolvability_errors.rb#9
    def handle(message, goprivate:); end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/resolvability_errors.rb#7
Dependabot::GoModules::ResolvabilityErrors::GITHUB_REPO_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#13
class Dependabot::GoModules::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#16
  def latest_resolvable_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#37
  def latest_resolvable_version_with_no_unlock; end

  # This is currently used to short-circuit latest_resolvable_version,
  # with the assumption that it'll be quicker than checking
  # resolvability. As this is quite quick in Go anyway, we just alias.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#23
  def latest_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#27
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#33
  def lowest_security_fix_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#42
  def updated_requirements; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#85
  def default_source; end

  # Go only supports semver and semver-compliant pseudo-versions, so it can't be a SHA.
  #
  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#73
  def existing_version_is_sha?; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#50
  def latest_version_finder; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#63
  def latest_version_resolvable_with_full_unlock?; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#68
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker.rb#77
  def version_from_tag(tag); end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#16
class Dependabot::GoModules::UpdateChecker::LatestVersionFinder
  # @return [LatestVersionFinder] a new instance of LatestVersionFinder
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#31
  def initialize(dependency:, dependency_files:, credentials:, ignored_versions:, security_advisories:, goprivate:, raise_on_ignored: T.unsafe(nil)); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#43
  def latest_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#47
  def lowest_security_fix_version; end

  private

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#76
  def available_versions; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#53
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#53
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#53
  def dependency_files; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#80
  def fetch_available_versions; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#55
  def fetch_latest_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#65
  def fetch_lowest_security_fix_version; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#159
  def filter_ignored_versions(versions_array); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#152
  def filter_lower_versions(versions_array); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#146
  def filter_prerelease_versions(versions_array); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#133
  def go_mod; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#117
  def handle_subprocess_error(error); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#177
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#53
  def ignored_versions; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#137
  def parse_manifest; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#181
  def requirement_class; end

  # Returns the value of attribute security_advisories.
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#53
  def security_advisories; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#127
  def transitory_failure?(error); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#185
  def version_class; end

  # @return [Boolean]
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#169
  def wants_prerelease?; end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#28
Dependabot::GoModules::UpdateChecker::LatestVersionFinder::INVALID_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#29
Dependabot::GoModules::UpdateChecker::LatestVersionFinder::PSEUDO_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/update_checker/latest_version_finder.rb#17
Dependabot::GoModules::UpdateChecker::LatestVersionFinder::RESOLVABILITY_ERROR_REGEXES = T.let(T.unsafe(nil), Array)

# source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#14
class Dependabot::GoModules::Version < ::Dependabot::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#27
  def initialize(version); end

  # source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#35
  def inspect; end

  # source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#39
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#20
    def correct?(version); end
  end
end

# source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#18
Dependabot::GoModules::Version::ANCHORED_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-go_modules//lib/dependabot/go_modules/version.rb#15
Dependabot::GoModules::Version::VERSION_PATTERN = T.let(T.unsafe(nil), String)
