# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-elm` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-elm`.

# Elm versions require major, minor and patch to be present
# They don't allow any letters
#
# source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#7
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#8
module Dependabot::Elm; end

# source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#9
class Dependabot::Elm::FileFetcher < ::Dependabot::FileFetchers::Base
  private

  # @raise [Dependabot::DependencyFileNotFound]
  #
  # source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#32
  def check_required_files_present; end

  # source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#40
  def elm_json; end

  # source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#20
  def fetch_files; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#10
    def required_files_in?(filenames); end

    # source://dependabot-elm//lib/dependabot/elm/file_fetcher.rb#14
    def required_files_message; end
  end
end

# source://dependabot-elm//lib/dependabot/elm/file_parser.rb#12
class Dependabot::Elm::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#17
  def parse; end

  private

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#60
  def build_elm_json_dependency(name:, group:, requirement:, direct:); end

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#80
  def check_required_files; end

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#100
  def elm_json; end

  # For docs on elm.json, see:
  # https://github.com/elm/compiler/blob/master/docs/elm.json/application.md
  # https://github.com/elm/compiler/blob/master/docs/elm.json/package.md
  #
  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#30
  def elm_json_dependencies; end

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#94
  def parsed_elm_json; end

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#76
  def repo_type; end

  # source://dependabot-elm//lib/dependabot/elm/file_parser.rb#86
  def version_for(version_requirement); end
end

# source://dependabot-elm//lib/dependabot/elm/file_parser.rb#15
Dependabot::Elm::FileParser::DEPENDENCY_TYPES = T.let(T.unsafe(nil), Array)

# source://dependabot-elm//lib/dependabot/elm/file_updater.rb#9
class Dependabot::Elm::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-elm//lib/dependabot/elm/file_updater.rb#18
  def updated_dependency_files; end

  private

  # source://dependabot-elm//lib/dependabot/elm/file_updater.rb#38
  def check_required_files; end

  # source://dependabot-elm//lib/dependabot/elm/file_updater.rb#51
  def elm_json_files; end

  # source://dependabot-elm//lib/dependabot/elm/file_updater.rb#44
  def updated_elm_json_content(file); end

  class << self
    # source://dependabot-elm//lib/dependabot/elm/file_updater.rb#12
    def updated_files_regex; end
  end
end

# source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#9
class Dependabot::Elm::FileUpdater::ElmJsonUpdater
  # @return [ElmJsonUpdater] a new instance of ElmJsonUpdater
  #
  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#10
  def initialize(elm_json_file:, dependencies:); end

  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#15
  def updated_content; end

  private

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#35
  def dependencies; end

  # Returns the value of attribute elm_json_file.
  #
  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#35
  def elm_json_file; end

  # @return [Boolean]
  #
  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#37
  def requirement_changed?(file, dependency); end

  # source://dependabot-elm//lib/dependabot/elm/file_updater/elm_json_updater.rb#44
  def update_requirement(content:, filename:, dependency:); end
end

# source://dependabot-elm//lib/dependabot/elm/metadata_finder.rb#10
class Dependabot::Elm::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-elm//lib/dependabot/elm/metadata_finder.rb#13
  def look_up_source; end
end

# source://dependabot-elm//lib/dependabot/elm/requirement.rb#9
class Dependabot::Elm::Requirement < ::Gem::Requirement
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-elm//lib/dependabot/elm/requirement.rb#22
  def initialize(*requirements); end

  # @return [Boolean]
  #
  # source://dependabot-elm//lib/dependabot/elm/requirement.rb#34
  def satisfied_by?(version); end

  private

  # Override the parser to create Elm::Versions and return an
  # array of parsed requirements
  #
  # source://dependabot-elm//lib/dependabot/elm/requirement.rb#43
  def convert_elm_constraint_to_ruby_constraint(obj); end

  class << self
    # Returns an array of requirements. At least one requirement from the
    # returned array must be satisfied for a version to be valid.
    #
    # source://dependabot-elm//lib/dependabot/elm/requirement.rb#18
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-elm//lib/dependabot/elm/requirement.rb#14
Dependabot::Elm::Requirement::ELM_EXACT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/requirement.rb#13
Dependabot::Elm::Requirement::ELM_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/requirement.rb#10
Dependabot::Elm::Requirement::ELM_PATTERN_RAW = T.let(T.unsafe(nil), String)

# source://dependabot-elm//lib/dependabot/elm/update_checker.rb#12
class Dependabot::Elm::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # Overwrite the base class to allow multi-dependency update PRs for
  # dependencies for which we don't have a version.
  #
  # @return [Boolean]
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#22
  def can_update?(requirements_to_unlock:); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#34
  def latest_resolvable_version; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#40
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#16
  def latest_version; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#47
  def updated_requirements; end

  private

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#97
  def all_versions; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#79
  def candidate_versions; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#101
  def fetch_all_versions; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#90
  def filter_lower_versions(versions_array); end

  # @return [Boolean]
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#74
  def latest_version_resolvable_with_full_unlock?; end

  # Overwrite the base class's requirements_up_to_date? method to instead
  # check whether the latest version is allowed
  #
  # @return [Boolean]
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#116
  def requirements_up_to_date?; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#70
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker.rb#56
  def version_resolver; end
end

# source://dependabot-elm//lib/dependabot/elm/update_checker/cli_parser.rb#10
class Dependabot::Elm::UpdateChecker::CliParser
  class << self
    # source://dependabot-elm//lib/dependabot/elm/update_checker/cli_parser.rb#14
    def decode_install_preview(text); end
  end
end

# source://dependabot-elm//lib/dependabot/elm/update_checker/cli_parser.rb#11
Dependabot::Elm::UpdateChecker::CliParser::INSTALL_DEPENDENCY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/update_checker/cli_parser.rb#12
Dependabot::Elm::UpdateChecker::CliParser::UPGRADE_DEPENDENCY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#17
class Dependabot::Elm::UpdateChecker::Elm19VersionResolver
  # @return [Elm19VersionResolver] a new instance of Elm19VersionResolver
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#20
  def initialize(dependency:, dependency_files:); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#25
  def latest_resolvable_version(unlock_requirement:); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#37
  def updated_dependencies_after_full_unlock; end

  private

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#87
  def check_install_result(changed_deps); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#179
  def current_version; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#69
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#69
  def dependency_files; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#71
  def fetch_latest_resolvable_version(unlock_requirement); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#136
  def handle_elm_errors(error); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#98
  def install_metadata; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#171
  def original_dependency_details; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#189
  def requirement_class; end

  # @raise [SharedHelpers::HelperSubprocessFailed]
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#117
  def run_shell_command(command); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#155
  def updated_elm_json_content(content); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#185
  def version_class; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#146
  def write_temporary_dependency_files; end
end

# source://dependabot-elm//lib/dependabot/elm/update_checker/elm_19_version_resolver.rb#18
class Dependabot::Elm::UpdateChecker::Elm19VersionResolver::UnrecoverableState < ::StandardError; end

# source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#11
class Dependabot::Elm::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#16
  def initialize(requirements:, latest_resolvable_version:); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#26
  def updated_requirements; end

  private

  # Returns the value of attribute latest_resolvable_version.
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#41
  def latest_resolvable_version; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#60
  def require_exactly(version); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#55
  def require_range(minimum, version); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#68
  def requirement_class; end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#41
  def requirements; end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#43
  def update_requirement(old_req, new_version); end

  # source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#64
  def version_class; end
end

# source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#12
Dependabot::Elm::UpdateChecker::RequirementsUpdater::RANGE_REQUIREMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/update_checker/requirements_updater.rb#14
Dependabot::Elm::UpdateChecker::RequirementsUpdater::SINGLE_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-elm//lib/dependabot/elm/version.rb#12
class Dependabot::Elm::Version < ::Dependabot::Version
  class << self
    # @return [Boolean]
    #
    # source://dependabot-elm//lib/dependabot/elm/version.rb#16
    def correct?(version); end
  end
end

# source://dependabot-elm//lib/dependabot/elm/version.rb#13
Dependabot::Elm::Version::VERSION_PATTERN = T.let(T.unsafe(nil), String)

# source://dependabot-elm//lib/dependabot/elm/version.rb#14
Dependabot::Elm::Version::VERSION_PATTERN_REGEX = T.let(T.unsafe(nil), Regexp)
