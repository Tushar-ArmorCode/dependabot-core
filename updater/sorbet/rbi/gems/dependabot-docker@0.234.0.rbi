# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-docker` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-docker`.

# source://dependabot-docker//lib/dependabot/docker/utils/helpers.rb#4
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-docker//lib/dependabot/docker/utils/helpers.rb#5
module Dependabot::Docker; end

# source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#10
class Dependabot::Docker::FileFetcher < ::Dependabot::FileFetchers::Base
  private

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#58
  def correctly_encoded_dockerfiles; end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#78
  def correctly_encoded_yamlfiles; end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#51
  def dockerfiles; end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#25
  def fetch_files; end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#62
  def incorrectly_encoded_dockerfiles; end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#94
  def incorrectly_encoded_yamlfiles; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#73
  def likely_kubernetes_resource?(resource); end

  # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#66
  def yamlfiles; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#14
    def required_files_in?(filenames); end

    # source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#19
    def required_files_message; end
  end
end

# source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#12
Dependabot::Docker::FileFetcher::DOCKER_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_fetcher.rb#11
Dependabot::Docker::FileFetcher::YAML_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#13
class Dependabot::Docker::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#38
  def parse; end

  private

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#127
  def build_image_dependency(file, details, version); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#95
  def check_required_files; end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#141
  def deep_fetch_images(json_obj); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#149
  def deep_fetch_images_from_hash(json_object); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#74
  def dockerfiles; end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#164
  def manifest_files; end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#169
  def parse_helm(img_hash); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#83
  def source_from(parsed_from_line); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#79
  def version_from(parsed_from_line); end

  # source://dependabot-docker//lib/dependabot/docker/file_parser.rb#102
  def workfile_file_dependencies(file); end
end

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#34
Dependabot::Docker::FileParser::AWS_ECR_URL = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#28
Dependabot::Docker::FileParser::DIGEST = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#19
Dependabot::Docker::FileParser::DOMAIN = T.let(T.unsafe(nil), Regexp)

# Details of Docker regular expressions is at
# https://github.com/docker/distribution/blob/master/reference/regexp.go
#
# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#18
Dependabot::Docker::FileParser::DOMAIN_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#25
Dependabot::Docker::FileParser::FROM = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#30
Dependabot::Docker::FileParser::FROM_LINE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#23
Dependabot::Docker::FileParser::IMAGE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#36
Dependabot::Docker::FileParser::IMAGE_SPEC = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#29
Dependabot::Docker::FileParser::NAME = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#22
Dependabot::Docker::FileParser::NAME_COMPONENT = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#26
Dependabot::Docker::FileParser::PLATFORM = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#20
Dependabot::Docker::FileParser::REGISTRY = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_parser.rb#27
Dependabot::Docker::FileParser::TAG = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/file_updater.rb#11
class Dependabot::Docker::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#21
  def updated_dependency_files; end

  private

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#52
  def check_required_files; end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#47
  def dependency; end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#119
  def new_tags(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#182
  def new_yaml_image(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#190
  def new_yaml_tag(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#204
  def old_helm_tags(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#124
  def old_tags(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#195
  def old_yaml_images(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#215
  def previous_requirements(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#137
  def previous_sources(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#129
  def private_registry_url(source); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#210
  def requirements(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#133
  def sources(file); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#115
  def specified_with_digest?(source); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#79
  def update_digest_and_tag(previous_content, old_source, new_source); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#151
  def update_helm(file, content); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#167
  def update_image(file, content); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#95
  def update_tag(previous_content, old_source, new_source); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#59
  def updated_dockerfile_content(file); end

  # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#141
  def updated_yaml_content(file); end

  class << self
    # source://dependabot-docker//lib/dependabot/docker/file_updater.rb#14
    def updated_files_regex; end
  end
end

# source://dependabot-docker//lib/dependabot/docker/file_updater.rb#12
Dependabot::Docker::FileUpdater::FROM_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/metadata_finder.rb#10
class Dependabot::Docker::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-docker//lib/dependabot/docker/metadata_finder.rb#13
  def look_up_source; end
end

# Lifted from the bundler package manager
#
# source://dependabot-docker//lib/dependabot/docker/requirement.rb#12
class Dependabot::Docker::Requirement < ::Gem::Requirement
  # Patches Gem::Requirement to make it accept requirement strings like
  # "~> 4.2.5, >= 4.2.5.1" without first needing to split them.
  #
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-docker//lib/dependabot/docker/requirement.rb#23
  def initialize(*requirements); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/requirement.rb#17
  def satisfied_by?(version); end

  class << self
    # For consistency with other languages, we define a requirements array.
    # Ruby doesn't have an `OR` separator for requirements, so it always
    # contains a single element.
    #
    # source://dependabot-docker//lib/dependabot/docker/requirement.rb#13
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-docker//lib/dependabot/docker/tag.rb#8
class Dependabot::Docker::Tag
  # @return [Tag] a new instance of Tag
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#23
  def initialize(name); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#68
  def canonical?; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#54
  def comparable?; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#39
  def comparable_to?(other); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#31
  def digest?; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#90
  def format; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#35
  def looks_like_prerelease?; end

  # Returns the value of attribute name.
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#21
  def name; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#110
  def numeric_version; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#116
  def precision; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#78
  def prefix; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#62
  def same_but_less_precise?(other); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/tag.rb#58
  def same_precision?(other); end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#120
  def segments; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#82
  def suffix; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#27
  def to_s; end

  # source://dependabot-docker//lib/dependabot/docker/tag.rb#86
  def version; end
end

# source://dependabot-docker//lib/dependabot/docker/tag.rb#14
Dependabot::Docker::Tag::NAME_WITH_VERSION = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/tag.rb#10
Dependabot::Docker::Tag::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/tag.rb#12
Dependabot::Docker::Tag::VERSION_WITH_PFX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/tag.rb#13
Dependabot::Docker::Tag::VERSION_WITH_PFX_AND_SFX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/tag.rb#11
Dependabot::Docker::Tag::VERSION_WITH_SFX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/tag.rb#9
Dependabot::Docker::Tag::WORDS_WITH_BUILD = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/update_checker.rb#17
class Dependabot::Docker::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#22
  def latest_resolvable_version; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#27
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#18
  def latest_version; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#32
  def updated_requirements; end

  private

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#151
  def comparable_tags_from_registry(original_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#270
  def comparable_version_from(tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#288
  def credentials_finder; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#222
  def digest_of(tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#349
  def digest_requirements; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#89
  def digest_up_to_date?; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#299
  def docker_registry_client; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#292
  def docker_repo_name; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#229
  def fetch_digest_of(tag); end

  # NOTE: It's important that this *always* returns a tag (even if
  # it's the existing one) as it is what we later check the digest of.
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#110
  def fetch_latest_tag(version_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#326
  def filter_ignored(candidate_tags); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#343
  def filter_lower_versions(tags); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#216
  def latest_digest; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#175
  def latest_tag; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#101
  def latest_tag_from(version); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#97
  def latest_version_from(version); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#53
  def latest_version_resolvable_with_full_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#254
  def prerelease?(tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#284
  def registry_credentials; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#274
  def registry_hostname; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#169
  def remove_precision_changes(candidate_tags, version_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#163
  def remove_prereleases(candidate_tags, version_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#155
  def remove_version_downgrades(candidate_tags, version_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#310
  def sort_tags(candidate_tags, version_tag); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#193
  def tags_from_registry; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#243
  def transient_docker_errors; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#58
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#185
  def updated_digest; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#280
  def using_dockerhub?; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#62
  def version_can_update?(*_arg0); end

  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#355
  def version_tag; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#78
  def version_tag_up_to_date?; end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/update_checker.rb#70
  def version_up_to_date?; end
end

# source://dependabot-docker//lib/dependabot/docker/utils/helpers.rb#6
module Dependabot::Docker::Utils
  class << self
    # @return [Boolean]
    #
    # source://dependabot-docker//lib/dependabot/docker/utils/helpers.rb#9
    def likely_helm_chart?(file); end
  end
end

# source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#12
class Dependabot::Docker::Utils::CredentialsFinder
  # @return [CredentialsFinder] a new instance of CredentialsFinder
  #
  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#16
  def initialize(credentials); end

  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#31
  def base_registry; end

  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#20
  def credentials_for_registry(registry_hostname); end

  # @return [Boolean]
  #
  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#39
  def using_dockerhub?(registry); end

  private

  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#47
  def build_aws_credentials(registry_details); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#45
  def credentials; end
end

# source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#13
Dependabot::Docker::Utils::CredentialsFinder::AWS_ECR_URL = T.let(T.unsafe(nil), Regexp)

# source://dependabot-docker//lib/dependabot/docker/utils/credentials_finder.rb#14
Dependabot::Docker::Utils::CredentialsFinder::DEFAULT_DOCKER_HUB_REGISTRY = T.let(T.unsafe(nil), String)

# source://dependabot-docker//lib/dependabot/docker/utils/helpers.rb#7
Dependabot::Docker::Utils::HELM_REGEXP = T.let(T.unsafe(nil), Regexp)

# In the special case of Java, the version string may also contain
# optional "update number" and "identifier" components.
# See https://www.oracle.com/java/technologies/javase/versioning-naming.html
# for a description of Java versions.
#
# source://dependabot-docker//lib/dependabot/docker/version.rb#14
class Dependabot::Docker::Version < ::Dependabot::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-docker//lib/dependabot/docker/version.rb#15
  def initialize(version); end

  # source://dependabot-docker//lib/dependabot/docker/version.rb#48
  def <=>(other); end

  # Returns the value of attribute release_part.
  #
  # source://dependabot-docker//lib/dependabot/docker/version.rb#46
  def release_part; end

  # source://dependabot-docker//lib/dependabot/docker/version.rb#42
  def segments; end

  # source://dependabot-docker//lib/dependabot/docker/version.rb#52
  def sort_criteria; end

  # source://dependabot-docker//lib/dependabot/docker/version.rb#38
  def to_semver; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-docker//lib/dependabot/docker/version.rb#25
    def correct?(version); end
  end
end
