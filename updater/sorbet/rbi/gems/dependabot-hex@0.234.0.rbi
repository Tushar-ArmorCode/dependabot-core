# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-hex` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-hex`.

# Elixir versions can include build information, which Ruby can't parse.
# This class augments Gem::Version with build information.
# See https://hexdocs.pm/elixir/Version.html for details.
#
# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#7
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#8
module Dependabot::Hex; end

# source://dependabot-hex//lib/dependabot/hex/credential_helpers.rb#6
module Dependabot::Hex::CredentialHelpers
  class << self
    # source://dependabot-hex//lib/dependabot/hex/credential_helpers.rb#7
    def hex_credentials(credentials); end

    # source://dependabot-hex//lib/dependabot/hex/credential_helpers.rb#11
    def organization_credentials(credentials); end

    # source://dependabot-hex//lib/dependabot/hex/credential_helpers.rb#20
    def repo_credentials(credentials); end
  end
end

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#9
class Dependabot::Hex::FileFetcher < ::Dependabot::FileFetchers::Base
  private

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#26
  def fetch_files; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#45
  def fetch_lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#39
  def lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#35
  def mixfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#61
  def sub_project_directories; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#65
  def subapp_mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#84
  def support_files; end

  # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#51
  def umbrella_app_directories; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#16
    def required_files_in?(filenames); end

    # source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#20
    def required_files_message; end
  end
end

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#10
Dependabot::Hex::FileFetcher::APPS_PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#14
Dependabot::Hex::FileFetcher::PATH_DEPS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#11
Dependabot::Hex::FileFetcher::STRING_ARG = T.let(T.unsafe(nil), String)

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#12
Dependabot::Hex::FileFetcher::SUPPORTED_METHODS = T.let(T.unsafe(nil), String)

# source://dependabot-hex//lib/dependabot/hex/file_fetcher.rb#13
Dependabot::Hex::FileFetcher::SUPPORT_FILE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_parser.rb#15
class Dependabot::Hex::FileParser < ::Dependabot::FileParsers::Base
  # @raise [::Dependabot::UnexpectedExternalCode]
  #
  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#18
  def parse; end

  private

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#111
  def check_required_files; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#46
  def dependency_details; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#107
  def elixir_helper_parse_deps_path; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#103
  def elixir_helper_path; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#123
  def lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#94
  def mix_env; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#119
  def mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#88
  def sanitize_mixfile(content); end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#115
  def symbolize_keys(hash); end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#72
  def write_sanitized_mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/file_parser.rb#80
  def write_sanitized_supporting_files; end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater.rb#10
class Dependabot::Hex::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#21
  def updated_dependency_files; end

  private

  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#41
  def check_required_files; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#65
  def lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#61
  def mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#52
  def updated_lockfile_content; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#45
  def updated_mixfile_content(file); end

  class << self
    # source://dependabot-hex//lib/dependabot/hex/file_updater.rb#14
    def updated_files_regex; end
  end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#16
class Dependabot::Hex::FileUpdater::LockfileUpdater
  # @return [LockfileUpdater] a new instance of LockfileUpdater
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#17
  def initialize(dependencies:, dependency_files:, credentials:); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#23
  def updated_lockfile_content; end

  private

  # Returns the value of attribute credentials.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#44
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#44
  def dependencies; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#46
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#44
  def dependency_files; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#125
  def elixir_helper_do_update_path; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#121
  def elixir_helper_path; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#88
  def lock_mixfile_dependency_versions(mixfile_content, filename); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#133
  def lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#112
  def mix_env; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#75
  def mixfile_content_for_lockfile_generation(file); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#129
  def mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#51
  def post_process_lockfile(content); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#108
  def sanitize_mixfile(content); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#81
  def updated_mixfile_content(file); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/lockfile_updater.rb#59
  def write_temporary_dependency_files; end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#10
class Dependabot::Hex::FileUpdater::MixfileGitPinUpdater
  # @return [MixfileGitPinUpdater] a new instance of MixfileGitPinUpdater
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#11
  def initialize(dependency_name:, mixfile_content:, previous_pin:, updated_pin:); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#19
  def updated_content; end

  private

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#44
  def content_should_change?; end

  # Returns the value of attribute dependency_name.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#29
  def dependency_name; end

  # Returns the value of attribute mixfile_content.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#29
  def mixfile_content; end

  # Returns the value of attribute previous_pin.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#29
  def previous_pin; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#32
  def update_pin(content); end

  # Returns the value of attribute updated_pin.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_git_pin_updater.rb#29
  def updated_pin; end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#10
class Dependabot::Hex::FileUpdater::MixfileRequirementUpdater
  # @return [MixfileRequirementUpdater] a new instance of MixfileRequirementUpdater
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#11
  def initialize(dependency_name:, mixfile_content:, previous_requirement:, updated_requirement:, insert_if_bare: T.unsafe(nil)); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#21
  def updated_content; end

  private

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#63
  def content_should_change?; end

  # Returns the value of attribute dependency_name.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#31
  def dependency_name; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#34
  def insert_if_bare?; end

  # Returns the value of attribute mixfile_content.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#31
  def mixfile_content; end

  # Returns the value of attribute previous_requirement.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#31
  def previous_requirement; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#38
  def update_requirement(content); end

  # Returns the value of attribute updated_requirement.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_requirement_updater.rb#31
  def updated_requirement; end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#10
class Dependabot::Hex::FileUpdater::MixfileSanitizer
  # @return [MixfileSanitizer] a new instance of MixfileSanitizer
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#11
  def initialize(mixfile_content:); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#26
  def sanitized_content; end

  private

  # Returns the value of attribute mixfile_content.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#35
  def mixfile_content; end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#45
  def prevent_config_path_loading(configuration); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#37
  def prevent_version_file_loading(configuration); end
end

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#15
Dependabot::Hex::FileUpdater::MixfileSanitizer::FILE_READ = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#16
Dependabot::Hex::FileUpdater::MixfileSanitizer::FILE_READ_BANG = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#20
Dependabot::Hex::FileUpdater::MixfileSanitizer::NESTED_VERSION_FILE_READ = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#21
Dependabot::Hex::FileUpdater::MixfileSanitizer::NESTED_VERSION_FILE_READ_BANG = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#17
Dependabot::Hex::FileUpdater::MixfileSanitizer::PIPE = T.let(T.unsafe(nil), String)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#22
Dependabot::Hex::FileUpdater::MixfileSanitizer::PIPED_VERSION_FILE_READ = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#23
Dependabot::Hex::FileUpdater::MixfileSanitizer::PIPED_VERSION_FILE_READ_BANG = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_sanitizer.rb#18
Dependabot::Hex::FileUpdater::MixfileSanitizer::VERSION_FILE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#11
class Dependabot::Hex::FileUpdater::MixfileUpdater
  # @return [MixfileUpdater] a new instance of MixfileUpdater
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#12
  def initialize(mixfile:, dependencies:); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#17
  def updated_mixfile_content; end

  private

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#43
  def dependencies; end

  # Returns the value of attribute mixfile.
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#43
  def mixfile; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#45
  def requirement_changed?(file, dependency); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#72
  def update_git_pin(content:, filename:, dependency:); end

  # source://dependabot-hex//lib/dependabot/hex/file_updater/mixfile_updater.rb#52
  def update_requirement(content:, filename:, dependency:); end
end

# source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#11
class Dependabot::Hex::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#42
  def find_source_from_git_url; end

  # source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#33
  def find_source_from_hex_listing; end

  # source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#49
  def hex_listing; end

  # source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#21
  def look_up_source; end

  # source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#29
  def new_source_type; end
end

# source://dependabot-hex//lib/dependabot/hex/metadata_finder.rb#12
Dependabot::Hex::MetadataFinder::SOURCE_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-hex//lib/dependabot/hex/native_helpers.rb#6
module Dependabot::Hex::NativeHelpers
  class << self
    # source://dependabot-hex//lib/dependabot/hex/native_helpers.rb#14
    def clean_path(path); end

    # source://dependabot-hex//lib/dependabot/hex/native_helpers.rb#7
    def hex_helpers_dir; end
  end
end

# source://dependabot-hex//lib/dependabot/hex/requirement.rb#9
class Dependabot::Hex::Requirement < ::Gem::Requirement
  # Patches Gem::Requirement to make it accept requirement strings like
  # "~> 4.2.5, >= 4.2.5.1" without first needing to split them.
  #
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-hex//lib/dependabot/hex/requirement.rb#32
  def initialize(*requirements); end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/requirement.rb#54
  def satisfied_by?(version); end

  class << self
    # Override the parser to create Hex::Versions
    #
    # source://dependabot-hex//lib/dependabot/hex/requirement.rb#41
    def parse(obj); end

    # Returns an array of requirements. At least one requirement from the
    # returned array must be satisfied for a version to be valid.
    #
    # source://dependabot-hex//lib/dependabot/hex/requirement.rb#23
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-hex//lib/dependabot/hex/requirement.rb#10
Dependabot::Hex::Requirement::AND_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# Add the double-equality matcher to the list of allowed operations
#
# source://dependabot-hex//lib/dependabot/hex/requirement.rb#14
Dependabot::Hex::Requirement::OPS = T.let(T.unsafe(nil), Hash)

# source://dependabot-hex//lib/dependabot/hex/requirement.rb#11
Dependabot::Hex::Requirement::OR_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/requirement.rb#19
Dependabot::Hex::Requirement::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/requirement.rb#18
Dependabot::Hex::Requirement::PATTERN_RAW = T.let(T.unsafe(nil), String)

# source://dependabot-hex//lib/dependabot/hex/update_checker.rb#14
class Dependabot::Hex::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#28
  def latest_resolvable_version; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#37
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#19
  def latest_version; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#46
  def updated_requirements; end

  private

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#165
  def dependency_source_details; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#258
  def dependency_url; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#169
  def fetch_latest_resolvable_version(unlock_requirement:); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#229
  def filter_lower_versions(versions_array); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#262
  def git_commit_checker; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#98
  def git_dependency?; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#237
  def hex_registry_response; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#120
  def latest_git_tag_is_resolvable?; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#102
  def latest_git_version_sha; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#205
  def latest_release_from_hex_registry; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#87
  def latest_resolvable_commit_with_unchanged_git_source; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#69
  def latest_resolvable_version_for_git_dependency; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#65
  def latest_version_for_git_dependency; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#56
  def latest_version_resolvable_with_full_unlock?; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#194
  def prepared_dependency_files(unlock_requirement:, latest_allowable_version: T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#61
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#150
  def updated_source; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#176
  def version_resolver(unlock_requirement:); end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker.rb#250
  def wants_prerelease?; end
end

# This class takes a set of dependency files and sanitizes them for use
# in UpdateCheckers::Elixir::Hex.
#
# source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#16
class Dependabot::Hex::UpdateChecker::FilePreparer
  # @return [FilePreparer] a new instance of FilePreparer
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#17
  def initialize(dependency_files:, dependency:, unlock_requirement: T.unsafe(nil), replacement_git_pin: T.unsafe(nil), latest_allowable_version: T.unsafe(nil)); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#28
  def prepared_dependency_files; end

  private

  # Returns the value of attribute dependency.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#44
  def dependency; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#183
  def dependency_appears_in_file?(file_name); end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#44
  def dependency_files; end

  # Returns the value of attribute latest_allowable_version.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#44
  def latest_allowable_version; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#154
  def lockfile; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#55
  def mixfile_content_for_update_check(file); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#145
  def mixfiles; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#66
  def relax_version(content, filename:); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#123
  def replace_git_pin(content, filename:); end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#51
  def replace_git_pin?; end

  # Returns the value of attribute replacement_git_pin.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#44
  def replacement_git_pin; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#139
  def sanitize_mixfile(content); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#158
  def support_files; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#47
  def unlock_requirement?; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#93
  def updated_version_req_lower_bound(filename); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#81
  def updated_version_requirement_string(filename); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#175
  def version_class; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#179
  def version_regex; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/file_preparer.rb#162
  def wants_prerelease?; end
end

# source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#11
class Dependabot::Hex::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#17
  def initialize(requirements:, latest_resolvable_version:, updated_source:); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#29
  def updated_requirements; end

  private

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#117
  def at_same_precision(new_version, old_version); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#148
  def binding_requirements(requirements); end

  # Returns the value of attribute latest_resolvable_version.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#35
  def latest_resolvable_version; end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#73
  def req_satisfied_by_latest_resolvable?(requirement_string); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#164
  def requirement_class; end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#35
  def requirements; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#78
  def ruby_requirements(requirement_string); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#82
  def update_exact_version(previous_req, new_version); end

  # Updates the version in a "<" or "<=" constraint to allow the given
  # version
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#124
  def update_greatest_version(requirement, version_to_be_permitted); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#97
  def update_mixfile_range(requirements); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#65
  def update_source(requirement_hash); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#90
  def update_twiddle_version(previous_req, new_version); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#38
  def updated_mixfile_requirement(req); end

  # Returns the value of attribute updated_source.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#35
  def updated_source; end
end

# source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#13
Dependabot::Hex::UpdateChecker::RequirementsUpdater::AND_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#12
Dependabot::Hex::UpdateChecker::RequirementsUpdater::OPERATORS = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#14
Dependabot::Hex::UpdateChecker::RequirementsUpdater::OR_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/update_checker/requirements_updater.rb#15
Dependabot::Hex::UpdateChecker::RequirementsUpdater::SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#15
class Dependabot::Hex::UpdateChecker::VersionResolver
  # @return [VersionResolver] a new instance of VersionResolver
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#16
  def initialize(dependency:, credentials:, original_dependency_files:, prepared_dependency_files:); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#24
  def latest_resolvable_version; end

  private

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#118
  def check_original_requirements_resolvable; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#30
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#30
  def dependency; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#178
  def elixir_helper_check_update_path; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#174
  def elixir_helper_path; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#99
  def error_result(error); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#33
  def fetch_latest_resolvable_version; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#62
  def handle_hex_errors(error); end

  # @return [Boolean]
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#109
  def includes_result?(error); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#165
  def mix_env; end

  # Returns the value of attribute original_dependency_files.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#30
  def original_dependency_files; end

  # Returns the value of attribute prepared_dependency_files.
  #
  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#30
  def prepared_dependency_files; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#52
  def run_elixir_update_checker; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#155
  def sanitize_mixfile(content); end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#161
  def version_class; end

  # source://dependabot-hex//lib/dependabot/hex/update_checker/version_resolver.rb#142
  def write_temporary_sanitized_dependency_files(prepared: T.unsafe(nil)); end
end

# source://dependabot-hex//lib/dependabot/hex/version.rb#13
class Dependabot::Hex::Version < ::Dependabot::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-hex//lib/dependabot/hex/version.rb#25
  def initialize(version); end

  # source://dependabot-hex//lib/dependabot/hex/version.rb#41
  def <=>(other); end

  # Returns the value of attribute build_info.
  #
  # source://dependabot-hex//lib/dependabot/hex/version.rb#14
  def build_info; end

  # source://dependabot-hex//lib/dependabot/hex/version.rb#37
  def inspect; end

  # source://dependabot-hex//lib/dependabot/hex/version.rb#33
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-hex//lib/dependabot/hex/version.rb#19
    def correct?(version); end
  end
end

# source://dependabot-hex//lib/dependabot/hex/version.rb#17
Dependabot::Hex::Version::ANCHORED_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-hex//lib/dependabot/hex/version.rb#16
Dependabot::Hex::Version::VERSION_PATTERN = T.let(T.unsafe(nil), String)
