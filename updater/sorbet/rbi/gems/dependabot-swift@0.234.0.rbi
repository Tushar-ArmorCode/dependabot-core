# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-swift` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-swift`.

# source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#7
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#8
module Dependabot::Swift; end

# source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#9
class Dependabot::Swift::FileFetcher < ::Dependabot::FileFetchers::Base
  private

  # @raise [Dependabot::DependencyFileNotFound]
  #
  # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#39
  def check_required_files_present; end

  # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#20
  def fetch_files; end

  # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#29
  def package_manifest; end

  # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#33
  def package_resolved; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#10
    def required_files_in?(filenames); end

    # source://dependabot-swift//lib/dependabot/swift/file_fetcher.rb#14
    def required_files_message; end
  end
end

# source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#12
class Dependabot::Swift::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-swift//lib/dependabot/swift/file_parser.rb#15
  def parse; end

  private

  # source://dependabot-swift//lib/dependabot/swift/file_parser.rb#49
  def check_required_files; end

  # source://dependabot-swift//lib/dependabot/swift/file_parser.rb#41
  def dependency_parser; end

  # source://dependabot-swift//lib/dependabot/swift/file_parser.rb#53
  def package_manifest_file; end
end

# source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#13
class Dependabot::Swift::FileParser::DependencyParser
  # @return [DependencyParser] a new instance of DependencyParser
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#14
  def initialize(dependency_files:, repo_contents_path:, credentials:); end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#20
  def parse; end

  private

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#51
  def all_dependencies(data, level: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#78
  def credentials; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#78
  def dependency_files; end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#38
  def formatted_deps; end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#72
  def normalize(source); end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#78
  def repo_contents_path; end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#47
  def subdependencies(data, level: T.unsafe(nil)); end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/dependency_parser.rb#32
  def write_temporary_dependency_files; end
end

# source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#10
class Dependabot::Swift::FileParser::ManifestParser
  # @return [ManifestParser] a new instance of ManifestParser
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#16
  def initialize(manifest, source:); end

  # source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#21
  def requirements; end

  private

  # Returns the value of attribute manifest.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#44
  def manifest; end

  # Returns the value of attribute source.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#44
  def source; end
end

# source://dependabot-swift//lib/dependabot/swift/file_parser/manifest_parser.rb#11
Dependabot::Swift::FileParser::ManifestParser::DEPENDENCY = T.let(T.unsafe(nil), Regexp)

# source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#8
class Dependabot::Swift::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#19
  def updated_dependency_files; end

  private

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#44
  def check_required_files; end

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#38
  def dependency; end

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#70
  def lockfile; end

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#66
  def manifest; end

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#56
  def updated_lockfile_content(updated_manifest); end

  # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#48
  def updated_manifest_content; end

  class << self
    # source://dependabot-swift//lib/dependabot/swift/file_updater.rb#12
    def updated_files_regex; end
  end
end

# source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#11
class Dependabot::Swift::FileUpdater::LockfileUpdater
  # @return [LockfileUpdater] a new instance of LockfileUpdater
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#12
  def initialize(dependency:, manifest:, repo_contents_path:, credentials:, target_version: T.unsafe(nil)); end

  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#20
  def updated_lockfile_content; end

  private

  # Returns the value of attribute credentials.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#54
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#54
  def dependency; end

  # Returns the value of attribute manifest.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#54
  def manifest; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#54
  def repo_contents_path; end

  # Returns the value of attribute target_version.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#54
  def target_version; end

  # source://dependabot-swift//lib/dependabot/swift/file_updater/lockfile_updater.rb#34
  def try_lockfile_update(dependency_name); end
end

# source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#10
class Dependabot::Swift::FileUpdater::ManifestUpdater
  # @return [ManifestUpdater] a new instance of ManifestUpdater
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#11
  def initialize(content, old_requirements:, new_requirements:); end

  # source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#17
  def updated_manifest_content; end

  private

  # Returns the value of attribute content.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#34
  def content; end

  # Returns the value of attribute new_requirements.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#34
  def new_requirements; end

  # Returns the value of attribute old_requirements.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/manifest_updater.rb#34
  def old_requirements; end
end

# source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#9
class Dependabot::Swift::FileUpdater::RequirementReplacer
  # @return [RequirementReplacer] a new instance of RequirementReplacer
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#10
  def initialize(content:, declaration:, old_requirement:, new_requirement:); end

  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#17
  def updated_content; end

  private

  # Returns the value of attribute content.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#25
  def content; end

  # Returns the value of attribute declaration.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#25
  def declaration; end

  # Returns the value of attribute new_requirement.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#25
  def new_requirement; end

  # Returns the value of attribute old_requirement.
  #
  # source://dependabot-swift//lib/dependabot/swift/file_updater/requirement_replacer.rb#25
  def old_requirement; end
end

# source://dependabot-swift//lib/dependabot/swift/metadata_finder.rb#9
class Dependabot::Swift::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-swift//lib/dependabot/swift/metadata_finder.rb#24
  def find_source_from_git_url; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-swift//lib/dependabot/swift/metadata_finder.rb#31
  def find_source_from_registry; end

  # source://dependabot-swift//lib/dependabot/swift/metadata_finder.rb#12
  def look_up_source; end

  # source://dependabot-swift//lib/dependabot/swift/metadata_finder.rb#20
  def new_source_type; end
end

# source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#9
class Dependabot::Swift::NativeRequirement
  # @return [NativeRequirement] a new instance of NativeRequirement
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#29
  def initialize(declaration); end

  # Returns the value of attribute declaration.
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#13
  def declaration; end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#47
  def to_s; end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#57
  def update(version); end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#51
  def update_if_needed(version); end

  private

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#105
  def bump_major(str); end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#111
  def bump_minor(str); end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#145
  def closed_range?; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#137
  def exact_version?; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#141
  def exact_version_deprecated?; end

  # Returns the value of attribute max.
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#153
  def max; end

  # Returns the value of attribute min.
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#153
  def min; end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#69
  def parse_declaration(declaration); end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#96
  def parse_range(separator); end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#149
  def range?; end

  # Returns the value of attribute requirement.
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#153
  def requirement; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#100
  def single_version_declaration?; end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#121
  def transform_version(str, &block); end

  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#155
  def unquote(declaration); end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#125
  def up_to_next_major?; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#129
  def up_to_next_major_deprecated?; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#133
  def up_to_next_minor_deprecated?; end

  class << self
    # source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#15
    def map_requirements(requirements); end
  end
end

# TODO: Support pinning to specific revisions
#
# source://dependabot-swift//lib/dependabot/swift/native_requirement.rb#11
Dependabot::Swift::NativeRequirement::REGEXP = T.let(T.unsafe(nil), Regexp)

# source://dependabot-swift//lib/dependabot/swift/requirement.rb#11
class Dependabot::Swift::Requirement < ::Gem::Requirement
  # Patches Gem::Requirement to make it accept requirement strings like
  # "~> 4.2.5, >= 4.2.5.1" without first needing to split them.
  #
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-swift//lib/dependabot/swift/requirement.rb#18
  def initialize(*requirements); end

  class << self
    # For consistency with other languages, we define a requirements array.
    # Swift doesn't have an `OR` separator for requirements, so it
    # always contains a single element.
    #
    # source://dependabot-swift//lib/dependabot/swift/requirement.rb#12
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-swift//lib/dependabot/swift/update_checker.rb#13
class Dependabot::Swift::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#21
  def latest_resolvable_version; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#25
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#17
  def latest_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#33
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#29
  def lowest_security_fix_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#41
  def updated_requirements; end

  private

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#66
  def fetch_latest_resolvable_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#54
  def fetch_latest_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#73
  def fetch_lowest_resolvable_security_fix_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#60
  def fetch_lowest_security_fix_version; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#159
  def filter_lower_tags(tags_array); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#152
  def find_lowest_secure_version(tags); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#98
  def force_lowest_security_fix_requirements; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#133
  def git_commit_checker; end

  # @return [Boolean]
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#124
  def latest_version_resolvable_with_full_unlock?; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#143
  def latest_version_tag; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#120
  def lockfile; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#147
  def lowest_security_fix_version_tag; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#116
  def manifest; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#50
  def old_requirements; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#104
  def prepare_manifest_for(new_requirements); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#92
  def unlocked_requirements; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#129
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker.rb#82
  def version_resolver_for(requirements); end
end

# source://dependabot-swift//lib/dependabot/swift/update_checker/requirements_updater.rb#11
class Dependabot::Swift::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/requirements_updater.rb#12
  def initialize(requirements:, target_version:); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker/requirements_updater.rb#20
  def updated_requirements; end

  private

  # Returns the value of attribute requirements.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/requirements_updater.rb#28
  def requirements; end

  # Returns the value of attribute target_version.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/requirements_updater.rb#28
  def target_version; end
end

# source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#11
class Dependabot::Swift::UpdateChecker::VersionResolver
  # @return [VersionResolver] a new instance of VersionResolver
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#12
  def initialize(dependency:, manifest:, lockfile:, repo_contents_path:, credentials:); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#20
  def latest_resolvable_version; end

  private

  # Returns the value of attribute credentials.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#55
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#55
  def dependency; end

  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#47
  def dependency_parser(manifest, lockfile); end

  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#26
  def fetch_latest_resolvable_version; end

  # Returns the value of attribute lockfile.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#55
  def lockfile; end

  # Returns the value of attribute manifest.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#55
  def manifest; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-swift//lib/dependabot/swift/update_checker/version_resolver.rb#55
  def repo_contents_path; end
end

# source://dependabot-swift//lib/dependabot/swift/version.rb#6
class Dependabot::Swift::Version < ::Dependabot::Version; end
