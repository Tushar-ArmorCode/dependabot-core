# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-terraform` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-terraform`.

# Terraform pre-release versions use 1.0.1-rc1 syntax, which Gem::Version
# converts into 1.0.1.pre.rc1. We override the `to_s` method to stop that
# alteration.
#
# See, for example, https://releases.hashicorp.com/terraform/
#
# source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#8
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#9
module Dependabot::Terraform; end

# source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#10
class Dependabot::Terraform::FileFetcher < ::Dependabot::FileFetchers::Base
  include ::FileSelector

  private

  # @raise [Dependabot::DependencyFileNotFound]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#26
  def fetch_files; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#55
  def local_path_module_files(files, dir: T.unsafe(nil)); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#84
  def lock_file; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#75
  def terraform_file_local_module_details(file); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#41
  def terraform_files; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#48
  def terragrunt_files; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#16
    def required_files_in?(filenames); end

    # source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#20
    def required_files_message; end
  end
end

# https://www.terraform.io/docs/language/modules/sources.html#local-paths
#
# source://dependabot-terraform//lib/dependabot/terraform/file_fetcher.rb#14
Dependabot::Terraform::FileFetcher::LOCAL_PATH_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#20
class Dependabot::Terraform::FileParser < ::Dependabot::FileParsers::Base
  include ::FileSelector

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#30
  def parse; end

  private

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#109
  def build_provider_dependency(file, name, details = T.unsafe(nil)); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#81
  def build_terraform_dependency(file, name, source, details); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#149
  def build_terragrunt_dependency(file, source); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#350
  def check_required_files; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#143
  def deprecated_provider?(details); end

  # @raise [Dependabot::DependencyFileNotParseable]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#134
  def deprecated_provider_error(file); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#356
  def determine_version_for(hostname, namespace, name, constraint); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#219
  def git_dependency_name(name, source); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#233
  def git_source_details_from(source_string); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#363
  def lock_file_content; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#345
  def native_helpers_root; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#42
  def parse_terraform_files(dependency_set); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#66
  def parse_terragrunt_files(dependency_set); end

  # == Returns:
  # A Hash representing each module found in the specified file
  #
  # E.g.
  # {
  #   "module" => {
  #     {
  #       "consul" => [
  #         {
  #           "source"=>"consul/aws",
  #           "version"=>"0.1.0"
  #         }
  #       ]
  #     }
  #   },
  #   "terragrunt"=>[
  #     {
  #       "include"=>[{ "path"=>"${find_in_parent_folders()}" }],
  #       "terraform"=>[{ "source" => "git::git@github.com:gruntwork-io/modules-example.git//consul?ref=v0.0.2" }]
  #     }
  #   ],
  # }
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#307
  def parsed_file(file); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#187
  def provider_source_from(source_address, name); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#198
  def registry_source_details_from(source_string); end

  # Full docs at https://www.terraform.io/docs/modules/sources.html
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#167
  def source_from(details_hash); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#263
  def source_type(source_string); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#340
  def terraform_hcl2_parser_path; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#335
  def terraform_parser_path; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#255
  def version_from_ref(ref); end
end

# source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#26
Dependabot::Terraform::FileParser::DEFAULT_NAMESPACE = T.let(T.unsafe(nil), String)

# source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#25
Dependabot::Terraform::FileParser::DEFAULT_REGISTRY = T.let(T.unsafe(nil), String)

# https://www.terraform.io/docs/language/providers/requirements.html#source-addresses
#
# source://dependabot-terraform//lib/dependabot/terraform/file_parser.rb#28
Dependabot::Terraform::FileParser::PROVIDER_SOURCE_ADDRESS = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#12
class Dependabot::Terraform::FileUpdater < ::Dependabot::FileUpdaters::Base
  include ::FileSelector

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#23
  def updated_dependency_files; end

  private

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#215
  def architecture_type; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#301
  def check_required_files; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#291
  def dependency; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#128
  def extract_provider_h1_hashes(content, declaration_regex); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#296
  def files_with_requirement; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#347
  def git_declaration_regex(filename); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#307
  def hashes_object_regex; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#311
  def hashes_string_regex; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#366
  def lockfile_declaration_regex(provider_source); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#140
  def lockfile_details(new_req); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#148
  def lookup_hash_architecture; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#315
  def provider_declaration_regex(updated_content); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#334
  def registry_declaration_regex; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#361
  def registry_host_for(dependency); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#135
  def remove_provider_h1_hashes(content, declaration_regex); end

  # Terraform allows to use a module from the same source multiple times
  # To detect any changes in dependencies we need to overwrite an implementation from the base class
  #
  # Example (for simplicity other parameters are skipped):
  # previous_requirements = [{requirement: "0.9.1"}, {requirement: "0.11.0"}]
  # requirements = [{requirement: "0.11.0"}, {requirement: "0.11.0"}]
  #
  # Simple difference between arrays gives:
  # requirements - previous_requirements
  #  => []
  # which loses an information that one of our requirements has changed.
  #
  # By using symmetric difference:
  # (requirements - previous_requirements) | (previous_requirements - requirements)
  #  => [{requirement: "0.9.1"}]
  # we can detect that change.
  #
  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#68
  def requirement_changed?(file, dependency); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#269
  def run_terraform_init; end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#101
  def update_git_declaration(new_req, old_req, updated_content, filename); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#219
  def update_lockfile_declaration(updated_manifest_files); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#115
  def update_registry_declaration(new_req, old_req, updated_content); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#76
  def updated_terraform_file_content(file); end

  class << self
    # source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#19
    def updated_files_regex; end
  end
end

# source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#17
Dependabot::Terraform::FileUpdater::GIT_HTTPS_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#16
Dependabot::Terraform::FileUpdater::MODULE_NOT_INSTALLED_ERROR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/file_updater.rb#15
Dependabot::Terraform::FileUpdater::PRIVATE_MODULE_ERROR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/metadata_finder.rb#13
class Dependabot::Terraform::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-terraform//lib/dependabot/terraform/metadata_finder.rb#28
  def find_source_from_git_url; end

  # source://dependabot-terraform//lib/dependabot/terraform/metadata_finder.rb#35
  def find_source_from_registry_details; end

  # source://dependabot-terraform//lib/dependabot/terraform/metadata_finder.rb#16
  def look_up_source; end

  # source://dependabot-terraform//lib/dependabot/terraform/metadata_finder.rb#24
  def new_source_type; end
end

# Terraform::RegistryClient is a basic API client to interact with a
# terraform registry: https://www.terraform.io/docs/registry/api.html
#
# source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#14
class Dependabot::Terraform::RegistryClient
  # @return [RegistryClient] a new instance of RegistryClient
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#18
  def initialize(hostname: T.unsafe(nil), credentials: T.unsafe(nil)); end

  # Fetch all the versions of a module, and return a Version
  # representation of them.
  #
  # "hashicorp/consul/aws"
  #
  # @param identifier [String] the identifier for the dependency, i.e:
  # @raise [Dependabot::DependabotError] when the versions cannot be retrieved
  # @return [Array<Dependabot::Terraform::Version>]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#79
  def all_module_versions(identifier:); end

  # Fetch all the versions of a provider, and return a Version
  # representation of them.
  #
  # "hashicorp/aws"
  #
  # @param identifier [String] the identifier for the dependency, i.e:
  # @raise [Dependabot::DependabotError] when the versions cannot be retrieved
  # @return [Array<Dependabot::Terraform::Version>]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#61
  def all_provider_versions(identifier:); end

  # Perform service discovery and return the absolute URL for
  # the requested service.
  # https://www.terraform.io/docs/internals/remote-service-discovery.html
  #
  # @param service_key [String] the service type described in https://www.terraform.io/docs/internals/remote-service-discovery.html#supported-services
  # @param return String
  # @raise [Dependabot::PrivateSourceAuthenticationFailure] when the service is not available
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#129
  def service_url_for(service_key); end

  # Fetch the "source" for a module or provider. We use the API to fetch
  # the source for a dependency, this typically points to a source code
  # repository, and then instantiate a Dependabot::Source object that we
  # can use to fetch Metadata about a specific version of the dependency.
  #
  # we're attempting to find
  #
  # @param dependency [Dependabot::Dependency] the dependency who's source
  # @return [nil, Dependabot::Source]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#96
  def source(dependency:); end

  private

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#193
  def error(message); end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#143
  def headers_for(hostname); end

  # Returns the value of attribute hostname.
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#137
  def hostname; end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#167
  def http_get(url); end

  # @raise [Dependabot::PrivateSourceAuthenticationFailure]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#174
  def http_get!(url); end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#156
  def service_key_for(type); end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#148
  def services; end

  # Returns the value of attribute tokens.
  #
  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#137
  def tokens; end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#183
  def url_for(path); end

  # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#139
  def version_class; end

  class << self
    # See https://www.terraform.io/docs/modules/sources.html#http-urls for
    # details of how Terraform handle HTTP(S) sources for modules
    #
    # source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#28
    def get_proxied_source(raw_source); end
  end
end

# source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#15
Dependabot::Terraform::RegistryClient::ARCHIVE_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://dependabot-terraform//lib/dependabot/terraform/registry_client.rb#16
Dependabot::Terraform::RegistryClient::PUBLIC_HOSTNAME = T.let(T.unsafe(nil), String)

# source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#13
class Dependabot::Terraform::Requirement < ::Gem::Requirement
  # Patches Gem::Requirement to make it accept requirement strings like
  # "~> 4.2.5, >= 4.2.5.1" without first needing to split them.
  #
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#40
  def initialize(*requirements); end

  class << self
    # source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#18
    def parse(obj); end

    # For consistency with other languages, we define a requirements array.
    # Terraform doesn't have an `OR` separator for requirements, so it
    # always contains a single element.
    #
    # source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#34
    def requirements_array(requirement_string); end
  end
end

# Override regex PATTERN from Gem::Requirement to add support for the
# optional 'v' prefix to release tag names, which Terraform supports.
# https://www.terraform.io/docs/registry/modules/publish.html#requirements
#
# source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#14
Dependabot::Terraform::Requirement::OPERATORS = T.let(T.unsafe(nil), String)

# source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#16
Dependabot::Terraform::Requirement::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-terraform//lib/dependabot/terraform/requirement.rb#15
Dependabot::Terraform::Requirement::PATTERN_RAW = T.let(T.unsafe(nil), String)

# Takes an array of `requirements` hashes for a dependency at the old
# version and a new version, and generates a set of new `requirements`
# hashes at the new version.
#
# A requirements hash is a basic description of a dependency at a certain
# version constraint, and it includes the data that is needed to update the
# manifest (i.e. the `.tf` file) with the new version.
#
# A requirements hash looks like this for a registry hosted requirement:
# ```ruby
# {
#   requirement: "~> 0.2.1",
#   groups: [],
#   file: "main.tf",
#   source: {
#     type: "registry",
#     registry_hostname: "registry.terraform.io",
#     module_identifier: "hashicorp/consul/aws"
#   }
# }
#
# And like this for a git requirement:
# ```ruby
# {
#   requirement: nil,
#   groups: [],
#   file: "main.tf",
#   source: {
#     type: "git",
#     url: "https://github.com/cloudposse/terraform-null-label.git",
#     branch: nil,
#     ref: nil
#   }
# }
#
# source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#48
class Dependabot::Terraform::RequirementsUpdater
  # @param requirements [Hash{Symbol => String, Array, Hash}]
  # @param latest_version [Dependabot::Terraform::Version]
  # @param tag_for_latest_version [String, NilClass]
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#52
  def initialize(requirements:, latest_version:, tag_for_latest_version:); end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#67
  def updated_requirements; end

  private

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#132
  def at_same_precision(new_version, old_version); end

  # Returns the value of attribute latest_version.
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#84
  def latest_version; end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#178
  def requirement_class; end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#84
  def requirements; end

  # Returns the value of attribute tag_for_latest_version.
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#84
  def tag_for_latest_version; end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#86
  def update_git_requirement(req); end

  # Updates the version in a "<" or "<=" constraint to allow the given
  # version
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#150
  def update_greatest_version(requirement, version_to_be_permitted); end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#119
  def update_range(req_string); end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#93
  def update_registry_requirement(req); end

  # Updates the version in a "~>" constraint to allow the given version
  #
  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#112
  def update_twiddle_version(req_string); end

  # source://dependabot-terraform//lib/dependabot/terraform/requirements_updater.rb#174
  def version_class; end
end

# source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#14
class Dependabot::Terraform::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#25
  def latest_resolvable_version; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#31
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#17
  def latest_version; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#44
  def requirements_unlocked_or_can_be?; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#36
  def updated_requirements; end

  private

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#73
  def all_module_versions; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#78
  def all_provider_versions; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#173
  def dependency_source_details; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#181
  def git_commit_checker; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#177
  def git_dependency?; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#115
  def latest_version_for_git_dependency; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#90
  def latest_version_for_provider_dependency; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#61
  def latest_version_for_registry_dependency; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#52
  def latest_version_resolvable_with_full_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#167
  def provider_dependency?; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#155
  def proxy_requirement?; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#83
  def registry_client; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#161
  def registry_dependency?; end

  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#141
  def tag_for_latest_version; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#57
  def updated_dependencies_after_full_unlock; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#102
  def wants_prerelease?; end
end

# source://dependabot-terraform//lib/dependabot/terraform/update_checker.rb#15
Dependabot::Terraform::UpdateChecker::ELIGIBLE_SOURCE_TYPES = T.let(T.unsafe(nil), Array)

# source://dependabot-terraform//lib/dependabot/terraform/version.rb#14
class Dependabot::Terraform::Version < ::Dependabot::Version
  # source://dependabot-terraform//lib/dependabot/terraform/version.rb#18
  sig { override.params(version: T.any(::Gem::Version, ::String)).void }
  def initialize(version); end

  # source://dependabot-terraform//lib/dependabot/terraform/version.rb#24
  sig { override.returns(::String) }
  def to_s; end
end

# source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#4
module FileSelector
  private

  # source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#23
  def lock_file; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#19
  def lock_file?(filename); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#7
  def terraform_files; end

  # @return [Boolean]
  #
  # source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#15
  def terragrunt_file?(file_name); end

  # source://dependabot-terraform//lib/dependabot/terraform/file_selector.rb#11
  def terragrunt_files; end
end
