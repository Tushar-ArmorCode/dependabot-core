# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-cargo` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-cargo`.

# Rust pre-release versions use 1.0.1-rc1 syntax, which Gem::Version
# converts into 1.0.1.pre.rc1. We override the `to_s` method to stop that
# alteration.
#
# source://dependabot-cargo//lib/dependabot/cargo/version.rb#11
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-cargo//lib/dependabot/cargo/version.rb#12
module Dependabot::Cargo; end

# source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#15
class Dependabot::Cargo::FileFetcher < ::Dependabot::FileFetchers::Base
  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#24
  def ecosystem_versions; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#315
  def cargo_lock; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#311
  def cargo_toml; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#156
  def collect_path_dependencies_paths(dependencies); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#294
  def expand_workspaces(path); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#45
  def fetch_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#54
  def fetch_path_dependency_and_workspace_files(files = T.unsafe(nil)); end

  # @raise [Dependabot::PathDependenciesNotReachable]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#122
  def fetch_path_dependency_files(file:, previously_fetched_files:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#96
  def fetch_workspace_files(file:, previously_fetched_files:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#305
  def parsed_file(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#79
  def path_dependency_files(fetched_files); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#167
  def path_dependency_paths_from_file(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#189
  def replacement_path_dependency_paths_from_file(file); end

  # Check whether a path is required or not. It will not be required if
  # an alternative source (i.e., a git source) is also specified
  #
  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#244
  def required_path?(file, path); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#321
  def rust_toolchain; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#215
  def workspace_dependency_paths_from_file(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#70
  def workspace_files(cargo_toml); end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#16
    def required_files_in?(filenames); end

    # source://dependabot-cargo//lib/dependabot/cargo/file_fetcher.rb#20
    def required_files_message; end
  end
end

# source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#18
class Dependabot::Cargo::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#24
  def parse; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#102
  def build_dependency(name, requirement, type, file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#218
  def check_required_files; end

  # @raise [Dependabot::DependencyFileNotEvaluatable]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#45
  def check_rust_workspace_root; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#199
  def git_req?(declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#203
  def git_source_details(declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#236
  def lockfile; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#116
  def lockfile_dependencies; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#63
  def manifest_dependencies; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#229
  def manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#153
  def name_from_declaration(name, declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#222
  def parsed_file(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#136
  def patched_dependencies; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#143
  def requirement_from_declaration(declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#160
  def source_from_declaration(declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#240
  def version_class; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#169
  def version_from_lockfile(name, declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#212
  def version_from_lockfile_details(package_details); end
end

# source://dependabot-cargo//lib/dependabot/cargo/file_parser.rb#21
Dependabot::Cargo::FileParser::DEPENDENCY_TYPES = T.let(T.unsafe(nil), Array)

# source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#12
class Dependabot::Cargo::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#23
  def updated_dependency_files; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#50
  def check_required_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#77
  def lockfile; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#70
  def manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#61
  def updated_lockfile_content; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#54
  def updated_manifest_content(file); end

  class << self
    # source://dependabot-cargo//lib/dependabot/cargo/file_updater.rb#16
    def updated_files_regex; end
  end
end

# source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#14
class Dependabot::Cargo::FileUpdater::LockfileUpdater
  # @return [LockfileUpdater] a new instance of LockfileUpdater
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#22
  def initialize(dependencies:, dependency_files:, credentials:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#28
  def updated_lockfile_content; end

  private

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#72
  def better_specification_needed?(error); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#53
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#53
  def dependencies; end

  # Currently, there will only be a single updated dependency
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#56
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#53
  def dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#104
  def dependency_spec; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#133
  def desired_lockfile_content; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#361
  def dummy_app_content; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#365
  def git_dependency?; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#119
  def git_previous_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#127
  def git_source_url; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#309
  def git_ssh_requirements_to_swap; end

  # @raise [Dependabot::DependencyFileNotResolvable]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#60
  def handle_cargo_error(error); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#386
  def lockfile; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#372
  def manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#379
  def path_dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#262
  def pin_target_specific_dependencies!(parsed_manifest); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#242
  def pin_version(content); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#300
  def post_process_lockfile(content); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#220
  def prepared_manifest_content(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#229
  def prepared_path_dependency_content(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#288
  def remove_binary_specifications(content); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#294
  def remove_default_run_specification(content); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#331
  def remove_duplicate_lockfile_entries(lockfile_content); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#281
  def replace_ssh_urls(content); end

  # @raise [SharedHelpers::HelperSubprocessFailed]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#139
  def run_shell_command(command, fingerprint:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#390
  def toolchain; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#235
  def updated_manifest_content(file); end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#173
  def using_old_toolchain?(message); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#399
  def version_class; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#395
  def virtual_manifest?(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#182
  def write_temporary_dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#190
  def write_temporary_manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#207
  def write_temporary_path_dependency_files; end
end

# source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#20
Dependabot::Cargo::FileUpdater::LockfileUpdater::LOCKFILE_CHECKSUM_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/file_updater/lockfile_updater.rb#15
Dependabot::Cargo::FileUpdater::LockfileUpdater::LOCKFILE_ENTRY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#9
class Dependabot::Cargo::FileUpdater::ManifestUpdater
  # @return [ManifestUpdater] a new instance of ManifestUpdater
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#10
  def initialize(dependencies:, manifest:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#15
  def updated_manifest_content; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#142
  def declaration_regex(dep); end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#41
  def dependencies; end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#154
  def feature_declaration_pin_regex(dep); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#146
  def feature_declaration_version_regex(dep); end

  # Returns the value of attribute manifest.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#41
  def manifest; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#43
  def requirement_changed?(file, dependency); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#76
  def update_git_pin(content:, filename:, dependency:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#120
  def update_manifest_pin(content:, dep:, old_pin:, new_pin:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#97
  def update_manifest_req(content:, dep:, old_req:, new_req:); end

  # source://dependabot-cargo//lib/dependabot/cargo/file_updater/manifest_updater.rb#50
  def update_requirements(content:, filename:, dependency:); end
end

# source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#11
class Dependabot::Cargo::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#44
  def crates_listing; end

  # source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#28
  def find_source_from_crates_listing; end

  # source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#37
  def find_source_from_git_url; end

  # source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#16
  def look_up_source; end

  # source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#24
  def new_source_type; end
end

# source://dependabot-cargo//lib/dependabot/cargo/metadata_finder.rb#12
Dependabot::Cargo::MetadataFinder::SOURCE_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#15
class Dependabot::Cargo::Requirement < ::Gem::Requirement
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#44
  def initialize(*requirements); end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#88
  def convert_caret_req(req_string); end

  # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#56
  def convert_rust_constraint_to_ruby_constraint(req_string); end

  # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#67
  def convert_tilde_req(req_string); end

  # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#74
  def ruby_range(req_string); end

  class << self
    # Use Cargo::Version rather than Gem::Version to ensure that
    # pre-release versions aren't transformed.
    #
    # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#24
    def parse(obj); end

    # For consistency with other languages, we define a requirements array.
    # Rust doesn't have an `OR` separator for requirements, so it always
    # contains a single element.
    #
    # source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#40
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#20
Dependabot::Cargo::Requirement::PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/requirement.rb#19
Dependabot::Cargo::Requirement::PATTERN_RAW = T.let(T.unsafe(nil), String)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#10
class Dependabot::Cargo::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#31
  def latest_resolvable_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#59
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#16
  def latest_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#50
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#46
  def lowest_security_fix_version; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#79
  def requirements_unlocked_or_can_be?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#83
  def requirements_update_strategy; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#70
  def updated_requirements; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#263
  def dependency_source_details; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#207
  def fetch_latest_resolvable_version(unlock_requirement:); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#223
  def fetch_lowest_resolvable_security_fix_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#281
  def git_commit_checker; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#267
  def git_dependency?; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#271
  def git_subdependency?; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#168
  def latest_git_tag_is_resolvable?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#132
  def latest_git_version_sha; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#197
  def latest_resolvable_commit_with_unchanged_git_source; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#150
  def latest_resolvable_version_for_git_dependency; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#117
  def latest_version_finder; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#128
  def latest_version_for_git_dependency; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#93
  def latest_version_resolvable_with_full_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#111
  def library?; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#277
  def path_dependency?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#102
  def target_version; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#98
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker.rb#248
  def updated_source; end
end

# This class takes a set of dependency files and sanitizes them for use
# in UpdateCheckers::Rust::Cargo.
#
# source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#14
class Dependabot::Cargo::UpdateChecker::FilePreparer
  # @return [FilePreparer] a new instance of FilePreparer
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#15
  def initialize(dependency_files:, dependency:, unlock_requirement: T.unsafe(nil), replacement_git_pin: T.unsafe(nil), latest_allowable_version: T.unsafe(nil)); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#26
  def prepared_dependency_files; end

  private

  # Returns the value of attribute dependency.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#42
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#42
  def dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#232
  def dependency_names_for_type(parsed_manifest, type); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#242
  def dependency_names_for_type_and_target(parsed_manifest, type, target); end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#277
  def git_dependency?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#222
  def git_dependency_version; end

  # Returns the value of attribute latest_allowable_version.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#42
  def latest_allowable_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#268
  def lockfile; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#202
  def lower_bound_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#53
  def manifest_content_for_update_check(file); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#259
  def manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#252
  def name_from_declaration(name, declaration); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#115
  def replace_git_pin(content); end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#49
  def replace_git_pin?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#135
  def replace_git_pin_on_target_specific_deps!(parsed_manifest); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#90
  def replace_req_on_target_specific_deps!(parsed_manifest, filename); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#163
  def replace_ssh_urls(content); end

  # NOTE: We don't need to care about formatting in this method, since
  # we're only using the manifest to find the latest resolvable version
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#68
  def replace_version_constraint(content, filename); end

  # Returns the value of attribute replacement_git_pin.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#42
  def replacement_git_pin; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#179
  def temporary_requirement_for_resolution(filename); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#272
  def toolchain; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/file_preparer.rb#45
  def unlock_requirement?; end
end

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#12
class Dependabot::Cargo::UpdateChecker::LatestVersionFinder
  # @return [LatestVersionFinder] a new instance of LatestVersionFinder
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#13
  def initialize(dependency:, dependency_files:, credentials:, ignored_versions:, security_advisories:, raise_on_ignored: T.unsafe(nil)); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#24
  def latest_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#28
  def lowest_security_fix_version; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#78
  def available_versions; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#85
  def crates_listing; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#34
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#34
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#34
  def dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#37
  def fetch_latest_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#44
  def fetch_lowest_security_fix_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#61
  def filter_ignored_versions(versions_array); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#71
  def filter_lower_versions(versions_array); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#55
  def filter_prerelease_versions(versions_array); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#101
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#34
  def ignored_versions; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#109
  def requirement_class; end

  # Returns the value of attribute security_advisories.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#34
  def security_advisories; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#105
  def version_class; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/latest_version_finder.rb#92
  def wants_prerelease?; end
end

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#17
class Dependabot::Cargo::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#24
  def initialize(requirements:, updated_source:, update_strategy:, target_version:); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#37
  def updated_requirements; end

  private

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#62
  def check_update_strategy; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#117
  def exact_req(string_reqs); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#113
  def non_range_req(string_reqs); end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#59
  def requirements; end

  # Returns the value of attribute target_version.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#59
  def target_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#138
  def update_greatest_version(old_version, version_to_be_permitted); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#121
  def update_range_requirements(string_reqs); end

  # Returns the value of attribute update_strategy.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#59
  def update_strategy; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#68
  def update_version_requirement(req); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#90
  def update_version_requirement_if_needed(req); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#99
  def update_version_string(req_string); end

  # Returns the value of attribute updated_source.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#59
  def updated_source; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#156
  def version_class; end
end

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#21
Dependabot::Cargo::UpdateChecker::RequirementsUpdater::ALLOWED_UPDATE_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#18
class Dependabot::Cargo::UpdateChecker::RequirementsUpdater::UnfixableRequirement < ::StandardError; end

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/requirements_updater.rb#20
Dependabot::Cargo::UpdateChecker::RequirementsUpdater::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#14
class Dependabot::Cargo::UpdateChecker::VersionResolver
  # @return [VersionResolver] a new instance of VersionResolver
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#22
  def initialize(dependency:, credentials:, original_dependency_files:, prepared_dependency_files:); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#30
  def latest_resolvable_version; end

  private

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#87
  def better_specification_needed?(error); end

  # @raise [Dependabot::DependencyFileNotResolvable]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#171
  def check_rust_workspace_root; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#38
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#38
  def dependency; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#119
  def dependency_spec; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#388
  def dummy_app_content; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#41
  def fetch_latest_resolvable_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#62
  def fetch_version_from_new_lockfile; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#430
  def git_dependency?; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#372
  def git_dependency_version; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#382
  def git_source_url; end

  # @raise [Dependabot::DependencyFileNotResolvable]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#189
  def handle_cargo_errors(error); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#420
  def lockfile; end

  # Returns the value of attribute original_dependency_files.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#38
  def original_dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#414
  def original_manifest_files; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#314
  def original_requirements_resolvable?; end

  # Returns the value of attribute prepared_dependency_files.
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#38
  def prepared_dependency_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#408
  def prepared_manifest_files; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#292
  def reachable_git_urls; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#299
  def resolvability_error?(message); end

  # @raise [SharedHelpers::HelperSubprocessFailed]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#143
  def run_cargo_command(command, fingerprint: T.unsafe(nil)); end

  # Shell out to Cargo, which handles everything for us, and does
  # so without doing an install (so it's fast).
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#136
  def run_cargo_update_command; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#392
  def sanitized_manifest_content(content); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#425
  def toolchain; end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#261
  def unreachable_git_urls; end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#252
  def using_old_toolchain?(message); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#444
  def version_class; end

  # When the package table is not present in a workspace manifest, it is
  # called a virtual manifest: https://doc.rust-lang.org/cargo/reference/
  # manifest.html#virtual-manifest
  #
  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#440
  def virtual_manifest?(file); end

  # @return [Boolean]
  #
  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#337
  def workspace_native_library_update_error?(message); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#350
  def write_manifest_files(prepared: T.unsafe(nil)); end

  # source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#164
  def write_temporary_dependency_files(prepared: T.unsafe(nil)); end
end

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#16
Dependabot::Cargo::UpdateChecker::VersionResolver::BRANCH_NOT_FOUND_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#20
Dependabot::Cargo::UpdateChecker::VersionResolver::GIT_REF_NOT_FOUND_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#18
Dependabot::Cargo::UpdateChecker::VersionResolver::OBJECT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#19
Dependabot::Cargo::UpdateChecker::VersionResolver::REF_NOT_FOUND_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#17
Dependabot::Cargo::UpdateChecker::VersionResolver::REVSPEC_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/update_checker/version_resolver.rb#15
Dependabot::Cargo::UpdateChecker::VersionResolver::UNABLE_TO_UPDATE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/version.rb#13
class Dependabot::Cargo::Version < ::Dependabot::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-cargo//lib/dependabot/cargo/version.rb#19
  def initialize(version); end

  # source://dependabot-cargo//lib/dependabot/cargo/version.rb#30
  def inspect; end

  # source://dependabot-cargo//lib/dependabot/cargo/version.rb#26
  def to_s; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-cargo//lib/dependabot/cargo/version.rb#34
    def correct?(version); end
  end
end

# source://dependabot-cargo//lib/dependabot/cargo/version.rb#17
Dependabot::Cargo::Version::ANCHORED_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://dependabot-cargo//lib/dependabot/cargo/version.rb#14
Dependabot::Cargo::Version::VERSION_PATTERN = T.let(T.unsafe(nil), String)
