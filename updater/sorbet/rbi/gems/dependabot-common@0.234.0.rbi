# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-common` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-common`.

# source://dependabot-common//lib/dependabot/config.rb#4
module Dependabot
  class << self
    # source://dependabot-common//lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common//lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# Raised by UpdateChecker if all candidate updates are ignored
#
# source://dependabot-common//lib/dependabot/errors.rb#245
class Dependabot::AllVersionsIgnored < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/errors.rb#66
class Dependabot::BranchNotFound < ::Dependabot::DependabotError
  # @return [BranchNotFound] a new instance of BranchNotFound
  #
  # source://dependabot-common//lib/dependabot/errors.rb#69
  def initialize(branch_name, msg = T.unsafe(nil)); end

  # Returns the value of attribute branch_name.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#67
  def branch_name; end
end

# source://dependabot-common//lib/dependabot/clients/azure.rb#9
module Dependabot::Clients; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#10
class Dependabot::Clients::Azure
  # Client #
  #
  # @return [Azure] a new instance of Azure
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#46
  def initialize(source, credentials, max_retries: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#196
  def autocomplete_pull_request(pull_request_id, auto_complete_set_by, merge_commit_message, delete_source_branch = T.unsafe(nil), squash_merge = T.unsafe(nil), merge_strategy = T.unsafe(nil), trans_work_items = T.unsafe(nil), ignore_config_ids = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#126
  def branch(branch_name); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#113
  def commits(branch_name = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#247
  def compare(previous_tag, new_tag, type); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#146
  def create_commit(branch_name, base_commit, commit_message, files, author_details); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#176
  def create_pull_request(pr_name, source_branch, target_branch, pr_description, labels, reviewers = T.unsafe(nil), assignees = T.unsafe(nil), work_item = T.unsafe(nil)); end

  # @raise [NotFound]
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#53
  def fetch_commit(_repo, branch); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#64
  def fetch_default_branch(_repo); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#102
  def fetch_file_contents(commit, path); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#72
  def fetch_repo_contents(commit = T.unsafe(nil), path = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#83
  def fetch_repo_contents_treeroot(commit = T.unsafe(nil), path = T.unsafe(nil)); end

  # @raise [Unauthorized]
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#260
  sig { params(url: ::String).returns(::Excon::Response) }
  def get(url); end

  # @raise [Unauthorized]
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#324
  sig { params(url: ::String, json: ::String).returns(::Excon::Response) }
  def patch(url, json); end

  # @raise [Unauthorized]
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#287
  sig { params(url: ::String, json: ::String).returns(::Excon::Response) }
  def post(url, json); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#222
  def pull_request(pull_request_id); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#135
  def pull_requests(source_branch, target_branch); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#230
  def update_ref(branch_name, old_commit, new_commit); end

  private

  # Returns the value of attribute auth_header.
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#396
  def auth_header; end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#368
  def auth_header_for(token); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#397
  def credentials; end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#389
  def pr_reviewers(reviewers, assignees); end

  # source://dependabot-common//lib/dependabot/clients/azure.rb#357
  def retry_connection_failures; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#398
  def source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/clients/azure.rb#382
  def tags_creation_forbidden?(response); end

  class << self
    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/azure.rb#33
    def for_source(source:, credentials:); end
  end
end

# source://dependabot-common//lib/dependabot/clients/azure.rb#19
class Dependabot::Clients::Azure::BadGateway < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#23
class Dependabot::Clients::Azure::Forbidden < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#15
class Dependabot::Clients::Azure::InternalServerError < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#13
class Dependabot::Clients::Azure::NotFound < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#27
Dependabot::Clients::Azure::RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/clients/azure.rb#17
class Dependabot::Clients::Azure::ServiceNotAvailable < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#25
class Dependabot::Clients::Azure::TagsCreationForbidden < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/azure.rb#21
class Dependabot::Clients::Azure::Unauthorized < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/bitbucket.rb#9
class Dependabot::Clients::Bitbucket
  # Client #
  #
  # @return [Bitbucket] a new instance of Bitbucket
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#35
  def initialize(credentials:); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#78
  def branch(repo, branch_name); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#72
  def commits(repo, branch_name = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#202
  def compare(repo, previous_tag, new_tag); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#107
  def create_commit(repo, branch_name, base_commit, commit_message, files, author_details); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#128
  def create_pull_request(repo, pr_name, source_branch, target_branch, pr_description, _labels, _work_item = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#171
  def current_user; end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#154
  def decline_pull_request(repo, pr_id, comment = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#179
  def default_reviewers(repo); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#40
  def fetch_commit(repo, branch); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#47
  def fetch_default_branch(repo); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#65
  def fetch_file_contents(repo, commit, path); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#53
  def fetch_repo_contents(repo, commit = T.unsafe(nil), path = T.unsafe(nil)); end

  # @raise [Unauthorized]
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#209
  def get(url); end

  # @raise [Unauthorized]
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#233
  def post(url, body, content_type = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#85
  def pull_requests(repo, source_branch, target_branch, status = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#195
  def tags(repo); end

  private

  # Returns the value of attribute auth_header.
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#299
  def auth_header; end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#262
  def auth_header_for(token); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#302
  def base_url; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#300
  def credentials; end

  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#268
  def encode_form_parameters(parameters); end

  # Takes a hash with optional `values` and `next` fields
  # Returns an enumerator.
  #
  # Can be used a few ways:
  # With GET:
  #     paginate ({"next" => url})
  # or
  #     paginate(JSON.parse(get(url).body))
  #
  # With POST (for endpoints that provide POST methods for long query parameters)
  #     response = post(url, body)
  #     first_page = JSON.parse(repsonse.body)
  #     paginate(first_page)
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#287
  def paginate(page); end

  class << self
    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/bitbucket.rb#22
    def for_source(source:, credentials:); end
  end
end

# source://dependabot-common//lib/dependabot/clients/bitbucket.rb#14
class Dependabot::Clients::Bitbucket::Forbidden < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/bitbucket.rb#10
class Dependabot::Clients::Bitbucket::NotFound < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/bitbucket.rb#16
class Dependabot::Clients::Bitbucket::TimedOut < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/bitbucket.rb#12
class Dependabot::Clients::Bitbucket::Unauthorized < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#8
class Dependabot::Clients::BitbucketWithRetries
  # Proxying #
  #
  # @return [BitbucketWithRetries] a new instance of BitbucketWithRetries
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#31
  def initialize(max_retries: T.unsafe(nil), **args); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#36
  def method_missing(method_name, *args, &block); end

  # source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#51
  def retry_connection_failures; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#47
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#18
    def for_bitbucket_dot_org(credentials:); end
  end
end

# source://dependabot-common//lib/dependabot/clients/bitbucket_with_retries.rb#9
Dependabot::Clients::BitbucketWithRetries::RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/clients/codecommit.rb#8
class Dependabot::Clients::CodeCommit
  # Client #
  #
  # @return [CodeCommit] a new instance of CodeCommit
  #
  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#30
  def initialize(source, credentials); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#78
  def branch(branch_name); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#125
  def commits(repo, branch_name = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#160
  def create_branch(repo, branch_name, commit_id); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#168
  def create_commit(branch_name, author_name, base_commit, commit_message, files); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#186
  def create_pull_request(pr_name, target_branch, source_branch, pr_description); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#44
  def fetch_commit(repo, branch); end

  # work around b/c codecommit doesn't have a 'get all commits' api..
  #
  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#86
  def fetch_commits(repo, branch_name, result_count); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#51
  def fetch_default_branch(repo); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#68
  def fetch_file_contents(repo, commit, path); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#57
  def fetch_repo_contents(repo, commit = T.unsafe(nil), path = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#138
  def pull_requests(repo, state, branch); end

  private

  # Returns the value of attribute cc_client.
  #
  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#203
  def cc_client; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#201
  def credentials; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/clients/codecommit.rb#202
  def source; end

  class << self
    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/codecommit.rb#17
    def for_source(source:, credentials:); end
  end
end

# source://dependabot-common//lib/dependabot/clients/codecommit.rb#11
class Dependabot::Clients::CodeCommit::NotFound < ::StandardError; end

# source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#8
class Dependabot::Clients::GithubWithRetries
  # Proxying #
  #
  # @return [GithubWithRetries] a new instance of GithubWithRetries
  #
  # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#85
  def initialize(max_retries: T.unsafe(nil), **args); end

  # VCS Interface #
  #
  # @raise [Octokit::NotFound]
  #
  # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#69
  def fetch_commit(repo, branch); end

  # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#77
  def fetch_default_branch(repo); end

  # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#114
  def method_missing(method_name, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#132
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#54
    def for_github_dot_com(credentials:); end

    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#40
    def for_source(source:, credentials:); end

    # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#12
    def open_timeout_in_seconds; end

    # source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#16
    def read_timeout_in_seconds; end
  end
end

# source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#20
Dependabot::Clients::GithubWithRetries::DEFAULT_CLIENT_ARGS = T.let(T.unsafe(nil), Hash)

# source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#9
Dependabot::Clients::GithubWithRetries::DEFAULT_OPEN_TIMEOUT_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#10
Dependabot::Clients::GithubWithRetries::DEFAULT_READ_TIMEOUT_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/clients/github_with_retries.rb#29
Dependabot::Clients::GithubWithRetries::RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#8
class Dependabot::Clients::GitlabWithRetries
  # Proxying #
  #
  # @return [GitlabWithRetries] a new instance of GitlabWithRetries
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#64
  def initialize(max_retries: T.unsafe(nil), **args); end

  # Create commit in gitlab repo with correctly mapped file actions
  #
  # @param repo [String]
  # @param branch_name [String]
  # @param commit_message [String]
  # @param files [Array<Dependabot::DependencyFile>]
  # @param options [Hash]
  # @return [Gitlab::ObjectifiedHash]
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#77
  def create_commit(repo, branch_name, commit_message, files, **options); end

  # VCS Interface #
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#52
  def fetch_commit(repo, branch); end

  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#56
  def fetch_default_branch(repo); end

  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#87
  def method_missing(method_name, *args, &block); end

  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#102
  def retry_connection_failures; end

  private

  # Single file action
  #
  # @param file [Dependabot::DependencyFile]
  # @return [String]
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#134
  def file_action(file); end

  # Array of file actions for a commit
  #
  # @param files [Array<Dependabot::DependencyFile>]
  # @return [Array<Hash>]
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#119
  def file_actions(files); end

  # Encoding option for gitlab commit operation
  #
  # @param file [Dependabot::DependencyFile]
  # @return [String]
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#148
  def file_encoding(file); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#98
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end

  class << self
    # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#34
    def for_gitlab_dot_com(credentials:); end

    # Constructor methods #
    #
    # source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#20
    def for_source(source:, credentials:); end
  end
end

# source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#11
class Dependabot::Clients::GitlabWithRetries::ContentEncoding; end

# source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#12
Dependabot::Clients::GitlabWithRetries::ContentEncoding::BASE64 = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#13
Dependabot::Clients::GitlabWithRetries::ContentEncoding::TEXT = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/clients/gitlab_with_retries.rb#9
Dependabot::Clients::GitlabWithRetries::RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/config.rb#5
module Dependabot::Config; end

# Filters versions that should not be considered for dependency updates
#
# source://dependabot-common//lib/dependabot/config/ignore_condition.rb#7
class Dependabot::Config::IgnoreCondition
  # @return [IgnoreCondition] a new instance of IgnoreCondition
  #
  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#16
  def initialize(dependency_name:, versions: T.unsafe(nil), update_types: T.unsafe(nil)); end

  # Returns the value of attribute dependency_name.
  #
  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#14
  def dependency_name; end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#22
  def ignored_versions(dependency, security_updates_only); end

  # Returns the value of attribute update_types.
  #
  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#14
  def update_types; end

  # Returns the value of attribute versions.
  #
  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#14
  def versions; end

  private

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#84
  def correct_version_for(dependency); end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#76
  def ignore_major(version); end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#65
  def ignore_minor(version); end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#55
  def ignore_patch(version); end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#31
  def transformed_update_types; end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#94
  def version_class_for(package_manager); end

  # source://dependabot-common//lib/dependabot/config/ignore_condition.rb#35
  def versions_by_type(dependency); end
end

# source://dependabot-common//lib/dependabot/config/ignore_condition.rb#12
Dependabot::Config::IgnoreCondition::ALL_VERSIONS = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/config/ignore_condition.rb#10
Dependabot::Config::IgnoreCondition::MAJOR_VERSION_TYPE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/config/ignore_condition.rb#9
Dependabot::Config::IgnoreCondition::MINOR_VERSION_TYPE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/config/ignore_condition.rb#8
Dependabot::Config::IgnoreCondition::PATCH_VERSION_TYPE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/config.rb#6
class Dependabot::Config::InvalidConfigError < ::StandardError; end

# source://dependabot-common//lib/dependabot/errors.rb#7
class Dependabot::DependabotError < ::StandardError
  # @return [DependabotError] a new instance of DependabotError
  #
  # source://dependabot-common//lib/dependabot/errors.rb#12
  def initialize(message = T.unsafe(nil)); end

  private

  # source://dependabot-common//lib/dependabot/errors.rb#29
  def filter_sensitive_data(message); end

  # source://dependabot-common//lib/dependabot/errors.rb#38
  def replace_capture_groups(string, regex, replacement); end

  # source://dependabot-common//lib/dependabot/errors.rb#18
  def sanitize_message(message); end

  # source://dependabot-common//lib/dependabot/errors.rb#33
  def sanitize_source(source); end
end

# source://dependabot-common//lib/dependabot/errors.rb#8
Dependabot::DependabotError::BASIC_AUTH_REGEX = T.let(T.unsafe(nil), Regexp)

# Remove any path segment from fury.io sources
#
# source://dependabot-common//lib/dependabot/errors.rb#10
Dependabot::DependabotError::FURY_IO_PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/dependency.rb#7
class Dependabot::Dependency
  # @return [Dependency] a new instance of Dependency
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#43
  def initialize(name:, requirements:, package_manager:, version: T.unsafe(nil), previous_version: T.unsafe(nil), previous_requirements: T.unsafe(nil), subdependency_metadata: T.unsafe(nil), removed: T.unsafe(nil), metadata: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/dependency.rb#191
  def ==(other); end

  # source://dependabot-common//lib/dependabot/dependency.rb#235
  def all_sources; end

  # Returns all detected versions of the dependency. Only ecosystems that
  # support this feature will return more than the current version.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#177
  def all_versions; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#88
  def appears_in_lockfile?; end

  # source://dependabot-common//lib/dependabot/dependency.rb#106
  def display_name; end

  # source://dependabot-common//lib/dependabot/dependency.rb#151
  def docker_digest_from_reqs(requirements); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#199
  def eql?(other); end

  # source://dependabot-common//lib/dependabot/dependency.rb#195
  def hash; end

  # source://dependabot-common//lib/dependabot/dependency.rb#114
  def humanized_previous_version; end

  # source://dependabot-common//lib/dependabot/dependency.rb#135
  def humanized_version; end

  # This dependency is being indirectly updated by an update to another
  # dependency. We don't need to try and update it ourselves but want to
  # surface it to the user in the PR.
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#187
  def informational_only?; end

  # Returns the value of attribute metadata.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def metadata; end

  # Returns the value of attribute name.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def name; end

  # source://dependabot-common//lib/dependabot/dependency.rb#164
  def new_ref; end

  # source://dependabot-common//lib/dependabot/dependency.rb#71
  def numeric_version; end

  # Returns the value of attribute package_manager.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def package_manager; end

  # source://dependabot-common//lib/dependabot/dependency.rb#157
  def previous_ref; end

  # Returns the value of attribute previous_requirements.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def previous_requirements; end

  # Returns the value of attribute previous_version.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def previous_version; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#92
  def production?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#171
  def ref_changed?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#67
  def removed?; end

  # source://dependabot-common//lib/dependabot/dependency.rb#207
  def requirement_class; end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def requirements; end

  # source://dependabot-common//lib/dependabot/dependency.rb#215
  def source_details(allowed_types: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/dependency.rb#228
  def source_type; end

  # source://dependabot-common//lib/dependabot/dependency.rb#203
  def specific_requirements; end

  # Returns the value of attribute subdependency_metadata.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def subdependency_metadata; end

  # source://dependabot-common//lib/dependabot/dependency.rb#102
  def subdependency_production_check; end

  # source://dependabot-common//lib/dependabot/dependency.rb#75
  def to_h; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#63
  def top_level?; end

  # Returns the value of attribute version.
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#39
  def version; end

  # source://dependabot-common//lib/dependabot/dependency.rb#211
  def version_class; end

  private

  # @raise [ArgumentError]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#254
  def check_requirement_fields; end

  # source://dependabot-common//lib/dependabot/dependency.rb#276
  def check_subdependency_metadata; end

  # @raise [ArgumentError]
  #
  # source://dependabot-common//lib/dependabot/dependency.rb#247
  def check_values; end

  # source://dependabot-common//lib/dependabot/dependency.rb#285
  def symbolize_keys(hash); end

  class << self
    # source://dependabot-common//lib/dependabot/dependency.rb#23
    def display_name_builder_for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/dependency.rb#31
    def name_normaliser_for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/dependency.rb#12
    def production_check_for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/dependency.rb#27
    def register_display_name_builder(package_manager, name_builder); end

    # source://dependabot-common//lib/dependabot/dependency.rb#35
    def register_name_normaliser(package_manager, name_builder); end

    # source://dependabot-common//lib/dependabot/dependency.rb#19
    def register_production_check(package_manager, production_check); end
  end
end

# source://dependabot-common//lib/dependabot/dependency_file.rb#7
class Dependabot::DependencyFile
  # @return [DependencyFile] a new instance of DependencyFile
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#23
  def initialize(name:, content:, directory: T.unsafe(nil), type: T.unsafe(nil), support_file: T.unsafe(nil), vendored_file: T.unsafe(nil), symlink_target: T.unsafe(nil), content_encoding: T.unsafe(nil), deleted: T.unsafe(nil), operation: T.unsafe(nil), mode: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#84
  def ==(other); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#120
  def binary?; end

  # Returns the value of attribute content.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def content=(_arg0); end

  # Returns the value of attribute content_encoding.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def content_encoding; end

  # Sets the attribute content_encoding
  #
  # @param value the value to set the attribute content_encoding to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def content_encoding=(_arg0); end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#124
  def decoded_content; end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#108
  def deleted; end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#112
  def deleted=(deleted); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#116
  def deleted?; end

  # Returns the value of attribute directory.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def directory; end

  # Sets the attribute directory
  #
  # @param value the value to set the attribute directory to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def directory=(_arg0); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#96
  def eql?(other); end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#92
  def hash; end

  # Returns the value of attribute mode.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def mode=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def name=(_arg0); end

  # Returns the value of attribute operation.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def operation; end

  # Sets the attribute operation
  #
  # @param value the value to set the attribute operation to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def operation=(_arg0); end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#76
  def path; end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#80
  def realpath; end

  # Returns the value of attribute support_file.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def support_file; end

  # Sets the attribute support_file
  #
  # @param value the value to set the attribute support_file to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def support_file=(_arg0); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#100
  def support_file?; end

  # Returns the value of attribute symlink_target.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def symlink_target; end

  # Sets the attribute symlink_target
  #
  # @param value the value to set the attribute symlink_target to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def symlink_target=(_arg0); end

  # source://dependabot-common//lib/dependabot/dependency_file.rb#59
  def to_h; end

  # Returns the value of attribute type.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def type=(_arg0); end

  # Returns the value of attribute vendored_file.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def vendored_file; end

  # Sets the attribute vendored_file
  #
  # @param value the value to set the attribute vendored_file to.
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#8
  def vendored_file=(_arg0); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_file.rb#104
  def vendored_file?; end

  private

  # source://dependabot-common//lib/dependabot/dependency_file.rb#132
  def clean_directory(directory); end
end

# source://dependabot-common//lib/dependabot/dependency_file.rb#12
class Dependabot::DependencyFile::ContentEncoding; end

# source://dependabot-common//lib/dependabot/dependency_file.rb#14
Dependabot::DependencyFile::ContentEncoding::BASE64 = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/dependency_file.rb#13
Dependabot::DependencyFile::ContentEncoding::UTF_8 = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/dependency_file.rb#17
class Dependabot::DependencyFile::Operation; end

# source://dependabot-common//lib/dependabot/dependency_file.rb#19
Dependabot::DependencyFile::Operation::CREATE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/dependency_file.rb#20
Dependabot::DependencyFile::Operation::DELETE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/dependency_file.rb#18
Dependabot::DependencyFile::Operation::UPDATE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/errors.rb#138
class Dependabot::DependencyFileNotEvaluatable < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/errors.rb#102
class Dependabot::DependencyFileNotFound < ::Dependabot::DependabotError
  # @return [DependencyFileNotFound] a new instance of DependencyFileNotFound
  #
  # source://dependabot-common//lib/dependabot/errors.rb#105
  def initialize(file_path, msg = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/errors.rb#114
  def directory; end

  # source://dependabot-common//lib/dependabot/errors.rb#110
  def file_name; end

  # Returns the value of attribute file_path.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#103
  def file_path; end
end

# source://dependabot-common//lib/dependabot/errors.rb#120
class Dependabot::DependencyFileNotParseable < ::Dependabot::DependabotError
  # @return [DependencyFileNotParseable] a new instance of DependencyFileNotParseable
  #
  # source://dependabot-common//lib/dependabot/errors.rb#123
  def initialize(file_path, msg = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/errors.rb#132
  def directory; end

  # source://dependabot-common//lib/dependabot/errors.rb#128
  def file_name; end

  # Returns the value of attribute file_path.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#121
  def file_path; end
end

# source://dependabot-common//lib/dependabot/errors.rb#140
class Dependabot::DependencyFileNotResolvable < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/dependency_group.rb#12
class Dependabot::DependencyGroup
  # @return [DependencyGroup] a new instance of DependencyGroup
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#15
  def initialize(name:, rules:); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#21
  def contains?(dependency); end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#13
  def dependencies; end

  # Returns the value of attribute name.
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#13
  def name; end

  # Returns the value of attribute rules.
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#13
  def rules; end

  # Provides a debug utility to view the group as it appears in the config file.
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#33
  def to_config_yaml; end

  # source://dependabot-common//lib/dependabot/dependency_group.rb#28
  def to_h; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#63
  def experimental_rules_enabled?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#53
  def matches_dependency_type?(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#47
  def matches_excluded_pattern?(dependency_name); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/dependency_group.rb#41
  def matches_pattern?(dependency_name); end
end

# Repo level errors #
#
# source://dependabot-common//lib/dependabot/errors.rb#57
class Dependabot::DirectoryNotFound < ::Dependabot::DependabotError
  # @return [DirectoryNotFound] a new instance of DirectoryNotFound
  #
  # source://dependabot-common//lib/dependabot/errors.rb#60
  def initialize(directory_name, msg = T.unsafe(nil)); end

  # Returns the value of attribute directory_name.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#58
  def directory_name; end
end

# source://dependabot-common//lib/dependabot/experiments.rb#5
module Dependabot::Experiments
  class << self
    # @return [Boolean]
    #
    # source://dependabot-common//lib/dependabot/experiments.rb#16
    def enabled?(name); end

    # source://dependabot-common//lib/dependabot/experiments.rb#12
    def register(name, value); end

    # source://dependabot-common//lib/dependabot/experiments.rb#8
    def reset!; end
  end
end

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#18
module Dependabot::FileFetchers
  class << self
    # source://dependabot-common//lib/dependabot/file_fetchers.rb#14
    sig { params(package_manager: ::String).returns(T.class_of(Dependabot::FileFetchers::Base)) }
    def for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/file_fetchers.rb#22
    sig { params(package_manager: ::String, file_fetcher: T.class_of(Dependabot::FileFetchers::Base)).void }
    def register(package_manager, file_fetcher); end
  end
end

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#19
class Dependabot::FileFetchers::Base
  # Creates a new FileFetcher for retrieving `DependencyFile`s.
  #
  # Files are typically grabbed individually via the source's API.
  # repo_contents_path is an optional empty directory that will be used
  # to clone the entire source repository on first read.
  #
  # If provided, file _data_ will be loaded from the clone.
  # Submodules and directory listings are _not_ currently supported
  # by repo_contents_path and still use an API trip.
  #
  # options supports custom feature enablement
  #
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#55
  def initialize(source:, credentials:, repo_contents_path: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the path to the cloned repo
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#93
  def clone_repo_contents; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#79
  def commit; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#20
  def credentials; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#67
  def directory; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#106
  def ecosystem_versions; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#75
  def files; end

  # Returns the value of attribute options.
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#20
  def options; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#63
  def repo; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#20
  def repo_contents_path; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#20
  def source; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#71
  def target_branch; end

  private

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#418
  def _azure_repo_contents(path, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#437
  def _bitbucket_repo_contents(repo, path, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#387
  def _build_github_file_struct(file); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#611
  def _clone_repo_contents(target_directory:); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#362
  def _cloned_repo_contents(relative_path); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#460
  def _codecommit_repo_contents(repo, path, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#502
  def _fetch_file_content(path, fetch_submodules: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#540
  def _fetch_file_content_from_github(path, repo, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#522
  def _fetch_file_content_fully_specified(provider, repo, path, commit); end

  # INTERNAL METHODS (not for use by sub-classes) #
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#303
  def _fetch_repo_contents(path, fetch_submodules: T.unsafe(nil), raise_errors: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#334
  def _fetch_repo_contents_fully_specified(provider, repo, path, commit); end

  # Update the @linked_paths hash by exploiting a side-effect of
  # recursively calling `repo_contents` for each directory up the tree
  # until a submodule or symlink is found
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#586
  def _find_linked_dirs(path); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#477
  def _full_specification_for(path, fetch_submodules:); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#350
  def _github_repo_contents(repo, path, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#397
  def _gitlab_repo_contents(repo, path, commit); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#600
  def _linked_dir_for(path); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#279
  def azure_client; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#285
  def bitbucket_client; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#252
  def client_for_provider; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#208
  def cloned_commit; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#293
  def codecommit_client; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#683
  def decode_binary_string(str); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#218
  def default_branch_for_repo; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#161
  def fetch_file_from_host(filename, type: T.unsafe(nil), fetch_submodules: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#116
  def fetch_file_if_present(filename, fetch_submodules: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#112
  def fetch_support_file(name); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#263
  def github_client; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#271
  def gitlab_client; end

  # @raise [Dependabot::DependencyFileNotFound]
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#139
  def load_cloned_file_if_present(filename); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#248
  def recurse_submodules_when_cloning?; end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#194
  def repo_contents(dir: T.unsafe(nil), ignore_base_directory: T.unsafe(nil), raise_errors: T.unsafe(nil), fetch_submodules: T.unsafe(nil)); end

  # Given a "foo/bar/baz" path, returns ["foo", "foo/bar", "foo/bar/baz"]
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#189
  def subpaths(path); end

  # Finds the first subpath in path that is a symlink
  #
  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#184
  def symlinked_subpath(path); end

  # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#225
  def update_linked_paths(repo, path, commit, github_response); end

  class << self
    # @raise [NotImplementedError]
    # @return [Boolean]
    #
    # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#36
    def required_files_in?(_filename_array); end

    # @raise [NotImplementedError]
    #
    # source://dependabot-common//lib/dependabot/file_fetchers/base.rb#40
    def required_files_message; end
  end
end

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#22
Dependabot::FileFetchers::Base::CLIENT_NOT_FOUND_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#32
Dependabot::FileFetchers::Base::GIT_SUBMODULE_CLONE_ERROR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#34
Dependabot::FileFetchers::Base::GIT_SUBMODULE_ERROR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/file_fetchers/base.rb#30
Dependabot::FileFetchers::Base::GIT_SUBMODULE_INACCESSIBLE_ERROR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/file_parsers/base.rb#5
module Dependabot::FileParsers
  class << self
    # source://dependabot-common//lib/dependabot/file_parsers.rb#14
    sig { params(package_manager: ::String).returns(T.class_of(Dependabot::FileParsers::Base)) }
    def for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/file_parsers.rb#22
    sig { params(package_manager: ::String, file_parser: T.class_of(Dependabot::FileParsers::Base)).void }
    def register(package_manager, file_parser); end
  end
end

# source://dependabot-common//lib/dependabot/file_parsers/base.rb#6
class Dependabot::FileParsers::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#9
  def initialize(dependency_files:, source:, repo_contents_path: T.unsafe(nil), credentials: T.unsafe(nil), reject_external_code: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#7
  def credentials; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#7
  def dependency_files; end

  # Returns the value of attribute options.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#7
  def options; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#21
  def parse; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#7
  def repo_contents_path; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#7
  def source; end

  private

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#27
  def check_required_files; end

  # source://dependabot-common//lib/dependabot/file_parsers/base.rb#31
  def get_original_file(filename); end
end

# source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#11
class Dependabot::FileParsers::Base::DependencySet
  # @return [DependencySet] a new instance of DependencySet
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#12
  def initialize(dependencies = T.unsafe(nil), case_sensitive: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#34
  def +(other); end

  # @raise [ArgumentError]
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#27
  def <<(dep); end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#46
  def all_versions_for_name(name); end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#23
  def dependencies; end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#51
  def dependency_for_name(name); end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#58
  def case_sensitive?; end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#66
  def key_for_dependency(dep); end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#62
  def key_for_name(name); end
end

# There can only be one entry per dependency name in a `DependencySet`. Each entry
# is assigned a `DependencySlot`.
#
# In some ecosystems (like `npm_and_yarn`), however, multiple versions of a
# dependency may be encountered and added to the set. The `DependencySlot` retains
# all added versions and presents a single unified dependency for the entry
# that combines the attributes of these versions.
#
# The combined dependency is accessible via `DependencySet#dependencies` or
# `DependencySet#dependency_for_name`. The list of individual versions of the
# dependency is accessible via `DependencySet#all_versions_for_name`.
#
# source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#81
class Dependabot::FileParsers::Base::DependencySet::DependencySlot
  # @return [DependencySlot] a new instance of DependencySlot
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#84
  def initialize; end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#89
  def <<(dep); end

  # Returns the value of attribute all_versions.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#82
  def all_versions; end

  # Returns the value of attribute combined.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#82
  def combined; end

  private

  # Produces a new dependency by merging the attributes of `old_dep` with those of
  # `new_dep`. Requirements and subdependency metadata will be combined and deduped.
  # The version of the combined dependency is determined by the
  # `#combined_version` method below.
  #
  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#117
  def combined_dependency(old_dep, new_dep); end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#135
  def combined_version(old_dep, new_dep); end

  # source://dependabot-common//lib/dependabot/file_parsers/base/dependency_set.rb#151
  def version_class; end
end

# source://dependabot-common//lib/dependabot/file_updaters/base.rb#5
module Dependabot::FileUpdaters
  class << self
    # source://dependabot-common//lib/dependabot/file_updaters.rb#14
    sig { params(package_manager: ::String).returns(T.class_of(Dependabot::FileUpdaters::Base)) }
    def for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/file_updaters.rb#22
    sig { params(package_manager: ::String, file_updater: T.class_of(Dependabot::FileUpdaters::Base)).void }
    def register(package_manager, file_updater); end
  end
end

# source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#11
class Dependabot::FileUpdaters::ArtifactUpdater
  # @param repo_contents_path [String, nil] the path we cloned the repository into
  # @param target_directory [String, nil] the path within a project directory we should inspect for changes
  # @return [ArtifactUpdater] a new instance of ArtifactUpdater
  #
  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#14
  def initialize(repo_contents_path:, target_directory:); end

  # Returns any files that have changed within the path composed from:
  #   :repo_contents_path/:base_directory/:target_directory
  #
  # @param base_directory [String] Update config base directory
  # @param only_paths [Array<String>, nil] An optional list of specific paths to check, if this is nil we will
  #   return every change we find within the `base_directory`
  # @return [Array<Dependabot::DependencyFile>]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#26
  def updated_files(base_directory:, only_paths: T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#89
  def binary_file?(path); end

  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#98
  def create_dependency_file(parameters); end

  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#73
  def get_encoded_file_contents(path, operation); end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#71
  def repo_contents_path; end

  # Returns the value of attribute target_directory.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#71
  def target_directory; end
end

# source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#69
Dependabot::FileUpdaters::ArtifactUpdater::TEXT_ENCODINGS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/file_updaters/base.rb#6
class Dependabot::FileUpdaters::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#14
  def initialize(dependencies:, dependency_files:, credentials:, repo_contents_path: T.unsafe(nil), options: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#7
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#7
  def dependencies; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#7
  def dependency_files; end

  # Returns the value of attribute options.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#7
  def options; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#7
  def repo_contents_path; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#25
  def updated_dependency_files; end

  private

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#31
  def check_required_files; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#39
  def file_changed?(file); end

  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#35
  def get_original_file(filename); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#43
  def requirement_changed?(file, dependency); end

  # source://dependabot-common//lib/dependabot/file_updaters/base.rb#50
  def updated_file(file:, content:); end

  class << self
    # @raise [NotImplementedError]
    #
    # source://dependabot-common//lib/dependabot/file_updaters/base.rb#10
    def updated_files_regex; end
  end
end

# source://dependabot-common//lib/dependabot/file_updaters/vendor_updater.rb#18
class Dependabot::FileUpdaters::VendorUpdater < ::Dependabot::FileUpdaters::ArtifactUpdater
  # This provides backwards compatability for anyone who used this class
  # before the base ArtifactUpdater class was introduced and aligns the
  # method's public signatures with it's special-case domain.
  #
  # @return [VendorUpdater] a new instance of VendorUpdater
  #
  # source://dependabot-common//lib/dependabot/file_updaters/vendor_updater.rb#19
  def initialize(repo_contents_path:, vendor_dir:); end

  # source://dependabot-common//lib/dependabot/file_updaters/artifact_updater.rb#26
  def updated_vendor_cache_files(base_directory:, only_paths: T.unsafe(nil)); end

  private

  # source://dependabot-common//lib/dependabot/file_updaters/vendor_updater.rb#29
  def create_dependency_file(parameters); end
end

# source://dependabot-common//lib/dependabot/git_commit_checker.rb#16
class Dependabot::GitCommitChecker
  # @return [GitCommitChecker] a new instance of GitCommitChecker
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#25
  def initialize(dependency:, credentials:, ignored_versions: T.unsafe(nil), raise_on_ignored: T.unsafe(nil), consider_version_branches_pinned: T.unsafe(nil), dependency_source_details: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#123
  def allowed_version_refs; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#119
  def allowed_version_tags; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#84
  def branch_or_ref_in_release?(version); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#127
  def current_version; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#163
  def dependency_source_details; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#133
  def filter_lower_versions(tags); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#36
  def git_dependency?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#156
  def git_repo_reachable?; end

  # @raise [Dependabot::GitDependencyReferenceNotFound]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#88
  def head_commit_for_current_branch; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#97
  def head_commit_for_local_branch(name); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#76
  def head_commit_for_pinned_ref; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#101
  def local_ref_for_latest_version_matching_existing_precision; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#107
  def local_tag_for_latest_version; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#150
  def local_tag_for_pinned_sha; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#115
  def local_tags_for_allowed_versions; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#111
  def local_tags_for_allowed_versions_matching_existing_precision; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#145
  def most_specific_tag_equivalent_to_pinned_ref; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#167
  def most_specific_version_tag_for_sha(commit_sha); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#42
  def pinned?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#68
  def pinned_ref_looks_like_commit_sha?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#62
  def pinned_ref_looks_like_version?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#80
  def ref_looks_like_commit_sha?(ref); end

  private

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#200
  def allowed_versions(local_tags); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#309
  def bitbucket_commit_comparison_status(ref1, ref2); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#230
  def branch_behind_release?(version); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#270
  def commit_included_in_tag?(tag:, commit:, allow_identical: T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#177
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#177
  def dependency; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#289
  def github_commit_comparison_status(ref1, ref2); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#296
  def gitlab_commit_comparison_status(ref1, ref2); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#260
  def handle_tag_prefix(tags); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#421
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#177
  def ignored_versions; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#470
  def listing_repo_git_metadata_fetcher; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#385
  def listing_source_repo; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#366
  def listing_source_url; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#391
  def listing_tag_for_version(version); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#397
  def listing_tags; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#415
  def listing_upload_pack; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#252
  def local_refs; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#462
  def local_repo_git_metadata_fetcher; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#256
  def local_tags; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#248
  def local_upload_pack; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#339
  def matches_existing_prefix?(tag); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#183
  def max_local_tag(tags); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#179
  def max_local_tag_for_current_precision(tags); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#214
  def pinned_ref_in_release?(version); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#196
  def precision(version); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#331
  def ref; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#327
  def ref_or_branch; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#458
  def requirement_class; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#349
  def same_prefix?(tag, other_tag); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#450
  def scan_version(name); end

  # Find the latest version with the same precision as the pinned version.
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#190
  def select_matching_existing_precision(tags); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#433
  def tag_included_in_ignore_requirements?(tag); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#438
  def tag_is_prerelease?(tag); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#354
  def to_local_tag(tag); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#454
  def version_class; end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#446
  def version_from_ref(name); end

  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#442
  def version_from_tag(tag); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#335
  def version_tag?(tag); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/git_commit_checker.rb#425
  def wants_prerelease?; end
end

# source://dependabot-common//lib/dependabot/git_commit_checker.rb#17
Dependabot::GitCommitChecker::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# Dependency level errors #
#
# source://dependabot-common//lib/dependabot/errors.rb#193
class Dependabot::GitDependenciesNotReachable < ::Dependabot::DependabotError
  # @return [GitDependenciesNotReachable] a new instance of GitDependenciesNotReachable
  #
  # source://dependabot-common//lib/dependabot/errors.rb#196
  def initialize(*dependency_urls); end

  # Returns the value of attribute dependency_urls.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#194
  def dependency_urls; end
end

# source://dependabot-common//lib/dependabot/errors.rb#206
class Dependabot::GitDependencyReferenceNotFound < ::Dependabot::DependabotError
  # @return [GitDependencyReferenceNotFound] a new instance of GitDependencyReferenceNotFound
  #
  # source://dependabot-common//lib/dependabot/errors.rb#209
  def initialize(dependency); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#207
  def dependency; end
end

# source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#9
class Dependabot::GitMetadataFetcher
  # @return [GitMetadataFetcher] a new instance of GitMetadataFetcher
  #
  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#12
  def initialize(url:, credentials:); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#47
  def head_commit_for_ref(ref); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#64
  def head_commit_for_ref_sha(ref); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#43
  def ref_names; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#39
  def refs_for_upload_pack; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#23
  def tags; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#35
  def tags_for_upload_pack; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#17
  def upload_pack; end

  private

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#72
  def credentials; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#212
  def excon_defaults; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#100
  def fetch_raw_upload_pack_for(uri); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#110
  def fetch_raw_upload_pack_with_git_for(uri); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#74
  def fetch_upload_pack_for(uri); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#132
  def parse_refs_for_upload_pack; end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#165
  def service_pack_uri(uri); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#208
  def sha_for_update_pack_line(line); end

  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#172
  def skip_git_suffix(uri); end

  # Add in username and password if present in credentials.
  # Credentials are never present for production Dependabot.
  #
  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#191
  def uri_with_auth(uri); end

  # Returns the value of attribute url.
  #
  # source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#72
  def url; end
end

# source://dependabot-common//lib/dependabot/git_metadata_fetcher.rb#10
Dependabot::GitMetadataFetcher::KNOWN_HOSTS = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/errors.rb#229
class Dependabot::GoModulePathMismatch < ::Dependabot::DependabotError
  # @return [GoModulePathMismatch] a new instance of GoModulePathMismatch
  #
  # source://dependabot-common//lib/dependabot/errors.rb#232
  def initialize(go_mod, declared_path, discovered_path); end

  # Returns the value of attribute declared_path.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#230
  def declared_path; end

  # Returns the value of attribute discovered_path.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#230
  def discovered_path; end

  # Returns the value of attribute go_mod.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#230
  def go_mod; end
end

# Useful for JS file updaters, where the registry API sometimes returns
# different results to the actual update process
#
# source://dependabot-common//lib/dependabot/errors.rb#187
class Dependabot::InconsistentRegistryResponse < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/metadata_finders.rb#5
module Dependabot::MetadataFinders
  class << self
    # source://dependabot-common//lib/dependabot/metadata_finders.rb#8
    def for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/metadata_finders.rb#15
    def register(package_manager, metadata_finder); end
  end
end

# source://dependabot-common//lib/dependabot/metadata_finders/base.rb#8
class Dependabot::MetadataFinders::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#17
  def initialize(dependency:, credentials:); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#44
  def changelog_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#34
  def changelog_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#101
  def commits; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#92
  def commits_url; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#15
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#15
  def dependency; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#30
  def homepage_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#110
  def maintainer_changes; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#83
  def releases_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#74
  def releases_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#22
  def source_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#64
  def upgrade_guide_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#54
  def upgrade_guide_url; end

  private

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#126
  def look_up_source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#130
  def reliable_source_directory?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#120
  def source; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base.rb#116
  def suggested_changelog_url; end
end

# source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#14
class Dependabot::MetadataFinders::Base::ChangelogFinder
  # @return [ChangelogFinder] a new instance of ChangelogFinder
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#25
  def initialize(source:, dependency:, credentials:, suggested_changelog_url: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#37
  def changelog_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#33
  def changelog_url; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#23
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#23
  def dependency; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#23
  def source; end

  # Returns the value of attribute suggested_changelog_url.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#23
  def suggested_changelog_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#50
  def upgrade_guide_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#46
  def upgrade_guide_url; end

  private

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#383
  def azure_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#395
  def bitbucket_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#59
  def changelog; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#113
  def changelog_from_ref(ref); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#81
  def changelog_from_suggested_url; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#400
  def default_bitbucket_branch; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#100
  def default_branch_changelog; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#405
  def default_gitlab_branch; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#221
  def dependency_file_list(ref = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#202
  def fetch_azure_file(file); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#303
  def fetch_azure_file_list; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#197
  def fetch_bitbucket_file(file); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#261
  def fetch_bitbucket_file_list; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#226
  def fetch_dependency_file_list(ref); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#162
  def fetch_file_text(file); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#183
  def fetch_github_file(file_source, file); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#237
  def fetch_github_file_list(ref); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#189
  def fetch_gitlab_file(file); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#283
  def fetch_gitlab_file_list; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#156
  def full_changelog_text; end

  # TODO: Refactor me so that Composer doesn't need to be special cased
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#353
  def git_source?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#378
  def github_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#388
  def github_client_for_source(client_source); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#373
  def gitlab_client; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#365
  def major_version_upgrade?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#340
  def new_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#326
  def new_version; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#333
  def previous_ref; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#347
  def ref_changed?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#106
  def relevant_tag_changelog; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#125
  def select_best_changelog(files); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#147
  def tag_for_new_version; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#207
  def upgrade_guide; end
end

# Earlier entries are preferred
#
# source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_finder.rb#19
Dependabot::MetadataFinders::Base::ChangelogFinder::CHANGELOG_NAMES = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#9
class Dependabot::MetadataFinders::Base::ChangelogPruner
  # @return [ChangelogPruner] a new instance of ChangelogPruner
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#12
  def initialize(dependency:, changelog_text:); end

  # Returns the value of attribute changelog_text.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#10
  def changelog_text; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#10
  def dependency; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#17
  def includes_new_version?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#21
  def includes_previous_version?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#25
  def pruned_text; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#95
  def changelog_contains_relevant_versions?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#71
  def changelog_line_for_version(version); end

  # TODO: Refactor me so that Composer doesn't need to be special cased
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#155
  def git_source?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#147
  def new_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#135
  def new_version; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#64
  def new_version_changelog_line; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#57
  def old_version_changelog_line; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#140
  def previous_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#167
  def version_class; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/changelog_pruner.rb#113
  def versions_in_changelog_headers; end
end

# source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#15
class Dependabot::MetadataFinders::Base::CommitsFinder
  # @return [CommitsFinder] a new instance of CommitsFinder
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#18
  def initialize(source:, dependency:, credentials:); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#40
  def commits; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#24
  def commits_url; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#16
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#16
  def dependency; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#54
  def new_tag; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#16
  def source; end

  private

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#328
  def azure_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#220
  def azure_compare_path(new_tag, previous_tag); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#333
  def bitbucket_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#200
  def bitbucket_compare_path(new_tag, previous_tag); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#363
  def default_gitlab_branch; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#169
  def dependency_tags; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#298
  def fetch_azure_commits; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#264
  def fetch_bitbucket_commits; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#173
  def fetch_dependency_tags; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#232
  def fetch_github_commits; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#283
  def fetch_gitlab_commits; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#352
  def git_sha?(version); end

  # TODO: Refactor me so that Composer doesn't need to be special cased
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#121
  def git_source?(requirements); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#323
  def github_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#186
  def github_compare_path(new_tag, previous_tag); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#318
  def gitlab_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#210
  def gitlab_compare_path(new_tag, previous_tag); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#92
  def lowest_tag_satisfying_previous_requirements; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#146
  def new_ref; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#338
  def part_of_monorepo?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#137
  def previous_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#71
  def previous_tag; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#132
  def ref_changed?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#358
  def reliable_source_directory?; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#348
  def requirement_class; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#110
  def satisfies_previous_reqs?(version); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#155
  def tag_matches_version?(tag, version); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#344
  def version_class; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/commits_finder.rb#101
  def version_from_tag(tag); end
end

# source://dependabot-common//lib/dependabot/metadata_finders/base.rb#13
Dependabot::MetadataFinders::Base::PACKAGE_MANAGERS_WITH_RELIABLE_DIRECTORIES = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#12
class Dependabot::MetadataFinders::Base::ReleaseFinder
  # @return [ReleaseFinder] a new instance of ReleaseFinder
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#15
  def initialize(source:, dependency:, credentials:); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#13
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#13
  def dependency; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#39
  def releases_text; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#21
  def releases_url; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#13
  def source; end

  private

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#48
  def all_dep_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#62
  def all_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#200
  def fetch_dependency_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#213
  def fetch_github_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#234
  def fetch_gitlab_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#104
  def filter_releases_using_previous_release(releases); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#116
  def filter_releases_using_previous_version(releases, conservative:); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#110
  def filter_releases_using_updated_release(releases); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#136
  def filter_releases_using_updated_version(releases, conservative:); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#309
  def github_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#304
  def gitlab_client; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#292
  def new_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#273
  def new_version; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#285
  def previous_ref; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#162
  def previous_release; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#254
  def previous_version; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#299
  def ref_changed?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#187
  def release_body_includes_title?(release); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#166
  def release_for_version(version); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#86
  def releases_since_previous_version; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#66
  def relevant_releases; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#175
  def serialize_release(release); end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#158
  def updated_release; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#196
  def version_class; end

  # source://dependabot-common//lib/dependabot/metadata_finders/base/release_finder.rb#192
  def version_regex(version); end
end

# source://dependabot-common//lib/dependabot/errors.rb#176
class Dependabot::MissingEnvironmentVariable < ::Dependabot::DependabotError
  # @return [MissingEnvironmentVariable] a new instance of MissingEnvironmentVariable
  #
  # source://dependabot-common//lib/dependabot/errors.rb#179
  def initialize(environment_variable); end

  # Returns the value of attribute environment_variable.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#177
  def environment_variable; end
end

# source://dependabot-common//lib/dependabot/errors.rb#51
class Dependabot::NotImplemented < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/errors.rb#47
class Dependabot::OutOfDisk < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/errors.rb#49
class Dependabot::OutOfMemory < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/errors.rb#218
class Dependabot::PathDependenciesNotReachable < ::Dependabot::DependabotError
  # @return [PathDependenciesNotReachable] a new instance of PathDependenciesNotReachable
  #
  # source://dependabot-common//lib/dependabot/errors.rb#221
  def initialize(*dependencies); end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#219
  def dependencies; end
end

# Source level errors #
#
# source://dependabot-common//lib/dependabot/errors.rb#146
class Dependabot::PrivateSourceAuthenticationFailure < ::Dependabot::DependabotError
  # @return [PrivateSourceAuthenticationFailure] a new instance of PrivateSourceAuthenticationFailure
  #
  # source://dependabot-common//lib/dependabot/errors.rb#149
  def initialize(source); end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#147
  def source; end
end

# source://dependabot-common//lib/dependabot/errors.rb#167
class Dependabot::PrivateSourceCertificateFailure < ::Dependabot::DependabotError
  # @return [PrivateSourceCertificateFailure] a new instance of PrivateSourceCertificateFailure
  #
  # source://dependabot-common//lib/dependabot/errors.rb#170
  def initialize(source); end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#168
  def source; end
end

# source://dependabot-common//lib/dependabot/errors.rb#158
class Dependabot::PrivateSourceTimedOut < ::Dependabot::DependabotError
  # @return [PrivateSourceTimedOut] a new instance of PrivateSourceTimedOut
  #
  # source://dependabot-common//lib/dependabot/errors.rb#161
  def initialize(source); end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#159
  def source; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#7
class Dependabot::PullRequestCreator
  # @return [PullRequestCreator] a new instance of PullRequestCreator
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#62
  def initialize(source:, base_commit:, dependencies:, files:, credentials:, pr_message_header: T.unsafe(nil), pr_message_footer: T.unsafe(nil), custom_labels: T.unsafe(nil), author_details: T.unsafe(nil), signature_key: T.unsafe(nil), commit_message_options: T.unsafe(nil), vulnerabilities_fixed: T.unsafe(nil), reviewers: T.unsafe(nil), assignees: T.unsafe(nil), milestone: T.unsafe(nil), branch_name_separator: T.unsafe(nil), branch_name_prefix: T.unsafe(nil), branch_name_max_length: T.unsafe(nil), label_language: T.unsafe(nil), automerge_candidate: T.unsafe(nil), github_redirection_service: T.unsafe(nil), custom_headers: T.unsafe(nil), require_up_to_date_base: T.unsafe(nil), provider_metadata: T.unsafe(nil), message: T.unsafe(nil), dependency_group: T.unsafe(nil), pr_message_max_length: T.unsafe(nil), pr_message_encoding: T.unsafe(nil)); end

  # Returns the value of attribute assignees.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def assignees; end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def author_details; end

  # Returns the value of attribute base_commit.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def base_commit; end

  # Returns the value of attribute branch_name_max_length.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def branch_name_max_length; end

  # Returns the value of attribute branch_name_prefix.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def branch_name_prefix; end

  # Returns the value of attribute branch_name_separator.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def branch_name_separator; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#106
  def check_dependencies_have_previous_version; end

  # Returns the value of attribute commit_message_options.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def commit_message_options; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#114
  def create; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def credentials; end

  # Returns the value of attribute custom_headers.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def custom_headers; end

  # Returns the value of attribute custom_labels.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def custom_labels; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def dependencies; end

  # Returns the value of attribute dependency_group.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def dependency_group; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def files; end

  # Returns the value of attribute github_redirection_service.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def github_redirection_service; end

  # Returns the value of attribute milestone.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def milestone; end

  # Returns the value of attribute pr_message_encoding.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def pr_message_encoding; end

  # Returns the value of attribute pr_message_footer.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def pr_message_footer; end

  # Returns the value of attribute pr_message_header.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def pr_message_header; end

  # Returns the value of attribute pr_message_max_length.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def pr_message_max_length; end

  # Returns the value of attribute provider_metadata.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def provider_metadata; end

  # Returns the value of attribute reviewers.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def reviewers; end

  # Returns the value of attribute signature_key.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def signature_key; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def source; end

  # Returns the value of attribute vulnerabilities_fixed.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#53
  def vulnerabilities_fixed; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#131
  def automerge_candidate?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#179
  def azure_creator; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#197
  def bitbucket_creator; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#260
  def branch_namer; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#213
  def codecommit_creator; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#139
  def github_creator; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#160
  def gitlab_creator; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#286
  def includes_security_fixes?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#127
  def label_language?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#273
  def labeler; end

  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#229
  def message; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#135
  def require_up_to_date_base?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#290
  def requirements_changed?(dependency); end
end

# AnnotationError is raised if a PR was created, but failed annotation
#
# source://dependabot-common//lib/dependabot/pull_request_creator.rb#44
class Dependabot::PullRequestCreator::AnnotationError < ::StandardError
  # @return [AnnotationError] a new instance of AnnotationError
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#46
  def initialize(cause, pull_request); end

  # Returns the value of attribute cause.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#45
  def cause; end

  # Returns the value of attribute pull_request.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator.rb#45
  def pull_request; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#9
class Dependabot::PullRequestCreator::Azure
  # @return [Azure] a new instance of Azure
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#19
  def initialize(source:, branch_name:, base_commit:, credentials:, files:, commit_message:, pr_description:, pr_name:, author_details:, labeler:, reviewers: T.unsafe(nil), assignees: T.unsafe(nil), work_item: T.unsafe(nil)); end

  # Returns the value of attribute assignees.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def assignees; end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def author_details; end

  # Returns the value of attribute base_commit.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def base_commit; end

  # Returns the value of attribute branch_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def branch_name; end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#37
  def create; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def credentials; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def files; end

  # Returns the value of attribute labeler.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def labeler; end

  # Returns the value of attribute pr_description.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def pr_description; end

  # Returns the value of attribute pr_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def pr_name; end

  # Returns the value of attribute reviewers.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def reviewers; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def source; end

  # Returns the value of attribute work_item.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#10
  def work_item; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#49
  def azure_client_for_source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#57
  def branch_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#70
  def create_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#83
  def create_pull_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#96
  def default_branch; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#63
  def pull_request_exists?; end
end

# 0 based count
#
# source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#17
Dependabot::PullRequestCreator::Azure::PR_DESCRIPTION_ENCODING = T.let(T.unsafe(nil), Encoding)

# https://developercommunity.visualstudio.com/content/problem/608770/remove-4000-character-limit-on-pull-request-descri.html
#
# source://dependabot-common//lib/dependabot/pull_request_creator/azure.rb#16
Dependabot::PullRequestCreator::Azure::PR_DESCRIPTION_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#39
class Dependabot::PullRequestCreator::BaseCommitNotUpToDate < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#9
class Dependabot::PullRequestCreator::Bitbucket
  # 0 based count
  #
  # @return [Bitbucket] a new instance of Bitbucket
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#17
  def initialize(source:, branch_name:, base_commit:, credentials:, files:, commit_message:, pr_description:, pr_name:, author_details:, labeler: T.unsafe(nil), work_item: T.unsafe(nil)); end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def author_details; end

  # Returns the value of attribute base_commit.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def base_commit; end

  # Returns the value of attribute branch_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def branch_name; end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#33
  def create; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def credentials; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def files; end

  # Returns the value of attribute labeler.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def labeler; end

  # Returns the value of attribute pr_description.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def pr_description; end

  # Returns the value of attribute pr_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def pr_name; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def source; end

  # Returns the value of attribute work_item.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#10
  def work_item; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#46
  def bitbucket_client_for_source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#54
  def branch_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#68
  def create_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#82
  def create_pull_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#94
  def default_branch; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#60
  def pull_request_exists?; end
end

# BitBucket Cloud accepts > 1MB characters, but they display poorly in the UI, so limiting to 4x 65,536
#
# source://dependabot-common//lib/dependabot/pull_request_creator/bitbucket.rb#15
Dependabot::PullRequestCreator::Bitbucket::PR_DESCRIPTION_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#6
class Dependabot::PullRequestCreator::BranchNamer
  # @return [BranchNamer] a new instance of BranchNamer
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#16
  def initialize(dependencies:, files:, target_branch:, dependency_group: T.unsafe(nil), separator: T.unsafe(nil), prefix: T.unsafe(nil), max_length: T.unsafe(nil)); end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def dependencies; end

  # Returns the value of attribute dependency_group.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def dependency_group; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def files; end

  # Returns the value of attribute max_length.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def max_length; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#27
  def new_branch_name; end

  # Returns the value of attribute prefix.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def prefix; end

  # Returns the value of attribute separator.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def separator; end

  # Returns the value of attribute target_branch.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#14
  def target_branch; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer.rb#33
  def strategy; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#7
class Dependabot::PullRequestCreator::BranchNamer::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#10
  def initialize(dependencies:, files:, target_branch:, separator: T.unsafe(nil), prefix: T.unsafe(nil), max_length: T.unsafe(nil)); end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def dependencies; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def files; end

  # Returns the value of attribute max_length.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def max_length; end

  # Returns the value of attribute prefix.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def prefix; end

  # Returns the value of attribute separator.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def separator; end

  # Returns the value of attribute target_branch.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#8
  def target_branch; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#22
  def sanitize_branch_name(ref_name); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/base.rb#38
  def sanitize_ref(ref); end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#9
class Dependabot::PullRequestCreator::BranchNamer::DependencyGroupStrategy < ::Dependabot::PullRequestCreator::BranchNamer::Base
  # @return [DependencyGroupStrategy] a new instance of DependencyGroupStrategy
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#10
  def initialize(dependencies:, files:, target_branch:, dependency_group:, separator: T.unsafe(nil), prefix: T.unsafe(nil), max_length: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#24
  def new_branch_name; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#51
  def dependency_digest; end

  # Returns the value of attribute dependency_group.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#30
  def dependency_group; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#61
  def directory; end

  # Group pull requests will generally include too many dependencies to include
  # in the branch name, but we rely on branch names being deterministic for a
  # given set of dependency changes.
  #
  # Let's append a short hash digest of the dependency changes so that we can
  # meet this guarantee.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#47
  def group_name_with_dependency_digest; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#57
  def package_manager; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/dependency_group_strategy.rb#32
  def prefixes; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#12
class Dependabot::PullRequestCreator::BranchNamer::SoloStrategy < ::Dependabot::PullRequestCreator::BranchNamer::Base
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#13
  def new_branch_name; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#82
  def branch_version_suffix; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#72
  def dependency_set; end

  # TODO: Bring this in line with existing library checks that we do in the
  # update checkers, which are also overriden by passing an explicit
  # `requirements_update_strategy`.
  #
  # TODO re-use in MessageBuilder
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#166
  def library?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#150
  def new_library_requirement(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#138
  def new_ref(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#114
  def new_version(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#46
  def package_manager; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#37
  def prefixes; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#131
  def previous_ref(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#62
  def property_name; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#145
  def ref_changed?(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#170
  def requirements_changed?(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#96
  def sanitized_requirement(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#56
  def updating_a_dependency_set?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/branch_namer/solo_strategy.rb#50
  def updating_a_property?; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#9
class Dependabot::PullRequestCreator::Codecommit
  # 0 based count
  #
  # @return [Codecommit] a new instance of Codecommit
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#18
  def initialize(source:, branch_name:, base_commit:, credentials:, files:, commit_message:, pr_description:, pr_name:, author_details:, labeler:, require_up_to_date_base:); end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def author_details; end

  # Returns the value of attribute base_commit.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def base_commit; end

  # Returns the value of attribute branch_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def branch_name; end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#34
  def create; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def credentials; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def files; end

  # Returns the value of attribute labeler.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def labeler; end

  # Returns the value of attribute pr_description.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def pr_description; end

  # Returns the value of attribute pr_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def pr_name; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#10
  def source; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#47
  def base_commit_is_up_to_date?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#97
  def branch_exists?(branch_name); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#89
  def codecommit_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#81
  def create_branch(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#132
  def create_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#72
  def create_or_get_branch(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#54
  def create_pull_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#145
  def default_branch; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#114
  def pull_requests_for_branch; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#43
  def require_up_to_date_base?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#103
  def unmerged_pull_request_exists?; end
end

# CodeCommit limits PR descriptions to a max length of 10,240 characters:
# https://docs.aws.amazon.com/codecommit/latest/APIReference/API_PullRequest.html
#
# source://dependabot-common//lib/dependabot/pull_request_creator/codecommit.rb#16
Dependabot::PullRequestCreator::Codecommit::PR_DESCRIPTION_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#10
class Dependabot::PullRequestCreator::CommitSigner
  # @return [CommitSigner] a new instance of CommitSigner
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#14
  def initialize(author_details:, commit_message:, tree_sha:, parent_sha:, signature_key:); end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#11
  def author_details; end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#11
  def commit_message; end

  # Returns the value of attribute parent_sha.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#11
  def parent_sha; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#23
  def signature; end

  # Returns the value of attribute signature_key.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#11
  def signature_key; end

  # Returns the value of attribute tree_sha.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#11
  def tree_sha; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/commit_signer.rb#54
  def commit_object; end
end

# Dependabot programmatically creates PRs which often include a large
# number of links to objects on `github.com`. GitHub hydrates these into
# rich links that leave a 'mention' on target Issues/Pull Requests.
#
# Due to the volume and nature of Dependabot PRs, these mentions are not
# useful and can overwhelm maintainers, so we use a redirection service
# to avoid enrichment.
#
# If you wish to disable this behaviour when using Dependabot Core directly,
# pass a nil value when initialising this class.
#
# source://dependabot-common//lib/dependabot/pull_request_creator.rb#27
Dependabot::PullRequestCreator::DEFAULT_GITHUB_REDIRECTION_SERVICE = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#12
class Dependabot::PullRequestCreator::Github
  # @return [Github] a new instance of Github
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#22
  def initialize(source:, branch_name:, base_commit:, credentials:, files:, commit_message:, pr_description:, pr_name:, author_details:, signature_key:, custom_headers:, labeler:, reviewers:, assignees:, milestone:, require_up_to_date_base:); end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def assignees; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def author_details; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def base_commit; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def branch_name; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#45
  def create; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def credentials; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def custom_headers; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def files; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def labeler; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def milestone; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def pr_description; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def pr_name; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def reviewers; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def signature_key; end

  # 0 based count
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#17
  def source; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#340
  def add_assignees_to_pull_request(pull_request); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#351
  def add_milestone_to_pull_request(pull_request); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#280
  def add_reviewers_to_pull_request(pull_request); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#273
  def annotate_pull_request(pull_request); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#116
  def base_commit_is_up_to_date?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#65
  def branch_exists?(name); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#310
  def comment_with_invalid_reviewer(pull_request, message); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#176
  def commit_options(tree); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#398
  def commit_signature(tree, author_details_with_date); end

  # @raise [UnexpectedError]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#124
  def create_annotated_pull_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#241
  def create_branch(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#148
  def create_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#223
  def create_or_update_branch(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#361
  def create_pull_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#187
  def create_tree; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#385
  def default_branch; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#390
  def git_metadata_fetcher; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#414
  def github_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#422
  def handle_error(err); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#120
  def head_commit; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#302
  def invalid_reviewer?(message); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#90
  def pull_requests_for_branch; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#452
  def raise_custom_error(base_err, type, message); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#408
  def raise_or_increment_retry_counter(counter:, limit:); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#141
  def repo_exists?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#60
  def require_up_to_date_base?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#381
  def target_branch; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#82
  def unmerged_pull_request_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#86
  def unmerged_pull_requests; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#264
  def update_branch(commit); end
end

# GitHub limits PR descriptions to a max of 65,536 characters:
# https://github.com/orgs/community/discussions/27190#discussioncomment-3726017
#
# source://dependabot-common//lib/dependabot/pull_request_creator/github.rb#15
Dependabot::PullRequestCreator::Github::PR_DESCRIPTION_MAX_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#10
class Dependabot::PullRequestCreator::Gitlab
  # @return [Gitlab] a new instance of Gitlab
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#16
  def initialize(source:, branch_name:, base_commit:, credentials:, files:, commit_message:, pr_description:, pr_name:, author_details:, labeler:, approvers:, assignees:, milestone:, target_project_id:); end

  # Returns the value of attribute approvers.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def approvers; end

  # Returns the value of attribute assignees.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def assignees; end

  # Returns the value of attribute author_details.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def author_details; end

  # Returns the value of attribute base_commit.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def base_commit; end

  # Returns the value of attribute branch_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def branch_name; end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#36
  def create; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def credentials; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def files; end

  # Returns the value of attribute labeler.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def labeler; end

  # Returns the value of attribute milestone.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def milestone; end

  # Returns the value of attribute pr_description.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def pr_description; end

  # Returns the value of attribute pr_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def pr_name; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def source; end

  # Returns the value of attribute target_project_id.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#11
  def target_project_id; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#139
  def add_approvers_to_merge_request(merge_request); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#135
  def annotate_merge_request(merge_request); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#152
  def approvers_hash; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#65
  def branch_exists?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#73
  def commit_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#88
  def create_branch; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#96
  def create_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#119
  def create_merge_request; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#107
  def create_submodule_update_commit; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#156
  def default_branch; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#57
  def gitlab_client_for_source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/gitlab.rb#79
  def merge_request_exists?; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#8
class Dependabot::PullRequestCreator::Labeler
  # @return [Labeler] a new instance of Labeler
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#30
  def initialize(source:, custom_labels:, credentials:, dependencies:, includes_security_fixes:, label_language:, automerge_candidate:); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#42
  def create_default_labels_if_required; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#57
  def label_pull_request(pull_request_number); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#48
  def labels_for_pr; end

  private

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#89
  def automerge_candidate?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#227
  def automerge_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#155
  def create_default_dependencies_label_if_required; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#169
  def create_default_language_label_if_required; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#162
  def create_default_security_label_if_required; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#291
  def create_dependencies_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#318
  def create_github_dependencies_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#360
  def create_github_language_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#339
  def create_github_security_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#331
  def create_gitlab_dependencies_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#381
  def create_gitlab_language_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#352
  def create_gitlab_security_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#309
  def create_language_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#300
  def create_security_label; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#79
  def credentials; end

  # Returns the value of attribute custom_labels.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#79
  def custom_labels; end

  # Find the exact match first and then fallback to *dependenc* label
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#192
  def default_dependencies_label; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#377
  def default_description_for(language); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#177
  def default_labels_for_pr; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#79
  def dependencies; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#197
  def dependencies_label_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#278
  def fetch_azure_labels; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#252
  def fetch_github_labels; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#271
  def fetch_gitlab_labels; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#394
  def github_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#402
  def gitlab_client_for_source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#85
  def includes_security_fixes?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#81
  def label_language?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#211
  def label_update_type?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#242
  def labels; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#235
  def language_label; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#231
  def language_label_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#410
  def package_manager; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#104
  def precision; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#137
  def previous_version(dep); end

  # Find the exact match first and then fallback to * security* label
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#206
  def security_label; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#201
  def security_label_exists?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#221
  def semver_label; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#79
  def source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#93
  def update_type; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#120
  def version(dep); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#414
  def version_class; end

  class << self
    # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#18
    def label_details_for_package_manager(package_manager); end

    # Returns the value of attribute package_manager_labels.
    #
    # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#16
    def package_manager_labels; end

    # source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#25
    def register_label_details(package_manager, label_details); end
  end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#10
Dependabot::PullRequestCreator::Labeler::DEFAULT_DEPENDENCIES_LABEL = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#11
Dependabot::PullRequestCreator::Labeler::DEFAULT_SECURITY_LABEL = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/pull_request_creator/labeler.rb#9
Dependabot::PullRequestCreator::Labeler::DEPENDENCIES_LABEL_REGEX = T.let(T.unsafe(nil), Regexp)

# Message is a static alternative to MessageBuilder
#
# source://dependabot-common//lib/dependabot/pull_request_creator/message.rb#7
class Dependabot::PullRequestCreator::Message
  # @return [Message] a new instance of Message
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message.rb#10
  def initialize(commit_message: T.unsafe(nil), pr_name: T.unsafe(nil), pr_message: T.unsafe(nil)); end

  # Returns the value of attribute commit_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message.rb#8
  def commit_message; end

  # Returns the value of attribute pr_message.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message.rb#8
  def pr_message; end

  # Returns the value of attribute pr_name.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message.rb#8
  def pr_name; end
end

# MessageBuilder builds PR message for a dependency update
#
# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#17
class Dependabot::PullRequestCreator::MessageBuilder
  # @return [MessageBuilder] a new instance of MessageBuilder
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#31
  def initialize(source:, dependencies:, files:, credentials:, pr_message_header: T.unsafe(nil), pr_message_footer: T.unsafe(nil), commit_message_options: T.unsafe(nil), vulnerabilities_fixed: T.unsafe(nil), github_redirection_service: T.unsafe(nil), dependency_group: T.unsafe(nil), pr_message_max_length: T.unsafe(nil), pr_message_encoding: T.unsafe(nil), ignore_conditions: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#105
  def commit_message; end

  # Returns the value of attribute commit_message_options.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def commit_message_options; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def dependencies; end

  # Returns the value of attribute dependency_group.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def dependency_group; end

  # Returns the value of attribute files.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def files; end

  # Returns the value of attribute github_redirection_service.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def github_redirection_service; end

  # Returns the value of attribute ignore_conditions.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def ignore_conditions; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#118
  def message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#61
  def pr_message; end

  # Returns the value of attribute pr_message_encoding.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def pr_message_encoding; end

  # Sets the attribute pr_message_encoding
  #
  # @param value the value to set the attribute pr_message_encoding to.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#53
  def pr_message_encoding=(_arg0); end

  # Returns the value of attribute pr_message_footer.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def pr_message_footer; end

  # Returns the value of attribute pr_message_header.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def pr_message_header; end

  # Returns the value of attribute pr_message_max_length.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def pr_message_max_length; end

  # Sets the attribute pr_message_max_length
  #
  # @param value the value to set the attribute pr_message_max_length to.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#51
  def pr_message_max_length=(_arg0); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#55
  def pr_name; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def source; end

  # Truncate PR message as determined by the pr_message_max_length and pr_message_encoding instance variables
  # The encoding is used when calculating length, all messages are returned as ruby UTF_8 encoded string
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#89
  def truncate_pr_message(msg); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#83
  def unignore_commands?; end

  # Returns the value of attribute vulnerabilities_fixed.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#23
  def vulnerabilities_fixed; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#149
  def application_pr_name; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#557
  def build_table(summary, rows); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#573
  def changelog_url(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#204
  def commit_message_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#194
  def commit_subject; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#577
  def commits_url(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#228
  def custom_trailers; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#443
  def dependency_link(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#436
  def dependency_links; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#426
  def dependency_set; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#316
  def dependency_set_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#453
  def dependency_version_update(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#389
  def from_version_msg(previous_version); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#362
  def group_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#176
  def group_pr_name; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#581
  def homepage_url(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#533
  def ignore_conditions_table; end

  # TODO: Bring this in line with existing library checks that we do in the
  # update checkers, which are also overriden by passing an explicit
  # `requirements_update_strategy`.
  #
  # TODO re-use in BranchNamer
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#650
  def library?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#133
  def library_pr_name; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#222
  def message_trailers; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#499
  def metadata_cascades; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#521
  def metadata_cascades_for_dep(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#597
  def metadata_finder(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#457
  def metadata_links; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#472
  def metadata_links_for_dep(dep); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#324
  def multidependency_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#308
  def multidependency_property_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#630
  def new_library_requirement(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#616
  def old_library_requirement(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#250
  def on_behalf_of_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#668
  def package_manager; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#188
  def pr_name_directory; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#181
  def pr_name_prefix; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#605
  def pr_name_prefixer; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#210
  def prefixed_pr_message_footer; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#416
  def property_name; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#585
  def releases_url(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#407
  def removing_a_transitive_dependency?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#259
  def requirement_commit_message_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#242
  def signoff_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#236
  def signoff_trailers; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#128
  def solo_pr_name; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#589
  def source_url(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#216
  def suffixed_pr_message_header; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#659
  def switching_from_ref_to_release?(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#481
  def table(rows); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#488
  def table_header(row); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#495
  def table_row(row); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#330
  def transitive_multidependency_intro; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#347
  def transitive_removed_dependency_intro; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#401
  def updating_a_dependency_set?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#395
  def updating_a_property?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#411
  def updating_top_level_and_transitive_dependencies?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#593
  def upgrade_url(dependency); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#275
  def version_commit_message_intro; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#9
class Dependabot::PullRequestCreator::MessageBuilder::IssueLinker
  # @return [IssueLinker] a new instance of IssueLinker
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#23
  def initialize(source_url:); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#27
  def link_issues(text:); end

  # Returns the value of attribute source_url.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#21
  def source_url; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#12
Dependabot::PullRequestCreator::MessageBuilder::IssueLinker::ISSUE_LINK_REGEXS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#10
Dependabot::PullRequestCreator::MessageBuilder::IssueLinker::REPO_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/issue_linker.rb#11
Dependabot::PullRequestCreator::MessageBuilder::IssueLinker::TAG_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#11
class Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer
  # @return [LinkAndMentionSanitizer] a new instance of LinkAndMentionSanitizer
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#34
  def initialize(github_redirection_service:); end

  # Returns the value of attribute github_redirection_service.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#32
  def github_redirection_service; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#38
  def sanitize_links_and_mentions(text:, unsafe: T.unsafe(nil), format_html: T.unsafe(nil)); end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#195
  def build_mention_link_text_nodes(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#145
  def build_mention_nodes(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#201
  def build_nwo_text_node(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#171
  def build_team_mention_nodes(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#207
  def create_link_node(url, text); end

  # NOTE: Add a zero-width space between the @ and the username to prevent
  # email replies on dependabot pull requests triggering notifications to
  # users who've been mentioned in changelogs etc. PR email replies parse
  # the content of the pull request body in plain text.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#220
  def insert_zero_width_space_in_mention(mention); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#224
  def parent_node_link?(node); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#137
  def replace_github_host(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#128
  def replace_nwo_node(node); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#95
  def sanitize_links(doc); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#56
  def sanitize_mentions(doc); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#118
  def sanitize_nwo_text(doc); end

  # When we come across something that looks like a team mention (e.g. @dependabot/reviewers),
  # we replace it with a text node.
  # This is because there are ecosystems that have packages that follow the same pattern
  # (e.g. @angular/angular-cli), and we don't want to create an invalid link, since
  # team mentions link to `https://github.com/org/:organization_name/teams/:team_name`.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#80
  def sanitize_team_mentions(doc); end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#28
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::COMMONMARKER_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#25
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::COMMONMARKER_OPTIONS = T.let(T.unsafe(nil), Array)

# End of string
#
# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#24
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::EOS_REGEX = T.let(T.unsafe(nil), Regexp)

# [^/\s#]+ means one or more characters not matching (^) the class /, whitespace (\s), or #
#
# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#19
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::GITHUB_NWO_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#13
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::GITHUB_REF_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#12
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::GITHUB_USERNAME = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#20
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::MENTION_REGEX = T.let(T.unsafe(nil), Regexp)

# regex to match a team mention on github
#
# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/link_and_mention_sanitizer.rb#22
Dependabot::PullRequestCreator::MessageBuilder::LinkAndMentionSanitizer::TEAM_MENTION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#9
class Dependabot::PullRequestCreator::MessageBuilder::MetadataPresenter
  extend ::Forwardable

  # @return [MetadataPresenter] a new instance of MetadataPresenter
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#27
  def initialize(dependency:, source:, metadata_finder:, vulnerabilities_fixed:, github_redirection_service:); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def changelog_text(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def changelog_url(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def commits(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def commits_url(*args, **_arg1, &block); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#12
  def dependency; end

  # Returns the value of attribute github_redirection_service.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#12
  def github_redirection_service; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def maintainer_changes(*args, **_arg1, &block); end

  # Returns the value of attribute metadata_finder.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#12
  def metadata_finder; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def releases_text(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def releases_url(*args, **_arg1, &block); end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#12
  def source; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def source_url(*args, **_arg1, &block); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#36
  def to_s; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def upgrade_guide_text(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def upgrade_guide_url(*args, **_arg1, &block); end

  # Returns the value of attribute vulnerabilities_fixed.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#12
  def vulnerabilities_fixed; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#240
  def break_tag; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#148
  def build_details_tag(summary:, body:); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#81
  def changelog_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#111
  def commits_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#211
  def fix_relative_links(text:, base_url:); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#205
  def link_issues(text:); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#139
  def maintainer_changes_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#227
  def quote_and_truncate(text, limit: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#64
  def release_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#248
  def sanitize_links_and_mentions(text, unsafe: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#254
  def sanitize_template_tags(text); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#161
  def serialized_vulnerability_details(details); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#244
  def source_provider_supports_html?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#235
  def truncated_line; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#96
  def upgrade_guide_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#50
  def vulnerabilities_cascade; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#177
  def vulnerability_source_line(details); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/message_builder/metadata_presenter.rb#188
  def vulnerability_version_range_lines(details); end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/message_builder.rb#29
Dependabot::PullRequestCreator::MessageBuilder::TRUNCATED_MSG = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#35
class Dependabot::PullRequestCreator::NoHistoryInCommon < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#12
class Dependabot::PullRequestCreator::PrNamePrefixer
  # @return [PrNamePrefixer] a new instance of PrNamePrefixer
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#31
  def initialize(source:, dependencies:, credentials:, security_fix: T.unsafe(nil), commit_message_options: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#46
  def capitalize_first_word?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#40
  def pr_name_prefix; end

  private

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#220
  def angular_commit_prefix; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#425
  def azure_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#400
  def azure_commit_author_email(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#433
  def bitbucket_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#404
  def bitbucket_commit_author_email(commit); end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#114
  def build_commit_prefix_from_previous_commits; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#131
  def capitalise_first_word_from_last_dependabot_commit_style; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#140
  def capitalise_first_word_from_previous_commits; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#243
  def capitalize_angular_commit_prefix?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#441
  def codecommit_client_for_source; end

  # Returns the value of attribute commit_message_options.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#57
  def commit_message_options; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#63
  def commit_prefix; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#57
  def credentials; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#276
  def dependabot_email; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#57
  def dependencies; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#86
  def explicitly_provided_prefix_string; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#409
  def github_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#417
  def gitlab_client_for_source; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#370
  def last_azure_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#380
  def last_bitbucket_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#390
  def last_codecommit_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#332
  def last_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#164
  def last_dependabot_commit_prefix; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#154
  def last_dependabot_commit_style; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#344
  def last_github_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#360
  def last_gitlab_dependabot_commit_message; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#449
  def package_manager; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#98
  def prefix_for_last_dependabot_commit_style; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#76
  def prefix_from_explicitly_provided_details; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#300
  def recent_azure_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#311
  def recent_bitbucket_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#322
  def recent_codecommit_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#265
  def recent_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#280
  def recent_github_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#353
  def recent_github_commits; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#289
  def recent_gitlab_commit_messages; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#127
  def scope; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#59
  def security_fix?; end

  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#108
  def security_prefix; end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#57
  def source; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#169
  def using_angular_commit_messages?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#199
  def using_eslint_commit_messages?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#255
  def using_gitmoji_commit_messages?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#209
  def using_prefixed_commit_messages?; end
end

# source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#13
Dependabot::PullRequestCreator::PrNamePrefixer::ANGULAR_PREFIXES = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#15
Dependabot::PullRequestCreator::PrNamePrefixer::ESLINT_PREFIXES = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/pull_request_creator/pr_name_prefixer.rb#17
Dependabot::PullRequestCreator::PrNamePrefixer::GITMOJI_PREFIXES = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#31
class Dependabot::PullRequestCreator::RepoArchived < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#33
class Dependabot::PullRequestCreator::RepoDisabled < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#29
class Dependabot::PullRequestCreator::RepoNotFound < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#41
class Dependabot::PullRequestCreator::UnexpectedError < ::StandardError; end

# source://dependabot-common//lib/dependabot/pull_request_creator.rb#37
class Dependabot::PullRequestCreator::UnmergedPRExists < ::StandardError; end

# source://dependabot-common//lib/dependabot/registry_client.rb#13
class Dependabot::RegistryClient
  class << self
    # source://dependabot-common//lib/dependabot/registry_client.rb#42
    def clear_cache!; end

    # source://dependabot-common//lib/dependabot/registry_client.rb#16
    def get(url:, headers: T.unsafe(nil), options: T.unsafe(nil)); end

    # source://dependabot-common//lib/dependabot/registry_client.rb#29
    def head(url:, headers: T.unsafe(nil), options: T.unsafe(nil)); end

    private

    # source://dependabot-common//lib/dependabot/registry_client.rb#46
    def cache_error(url, error); end

    # source://dependabot-common//lib/dependabot/registry_client.rb#51
    def cached_error_for(url); end
  end
end

# source://dependabot-common//lib/dependabot/errors.rb#75
class Dependabot::RepoNotFound < ::Dependabot::DependabotError
  # @return [RepoNotFound] a new instance of RepoNotFound
  #
  # source://dependabot-common//lib/dependabot/errors.rb#78
  def initialize(source, msg = T.unsafe(nil)); end

  # Returns the value of attribute source.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#76
  def source; end
end

# source://dependabot-common//lib/dependabot/security_advisory.rb#7
class Dependabot::SecurityAdvisory
  # @return [SecurityAdvisory] a new instance of SecurityAdvisory
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#12
  def initialize(dependency_name:, package_manager:, vulnerable_versions: T.unsafe(nil), safe_versions: T.unsafe(nil)); end

  # Check if the version is affected by the advisory
  #
  # @param version [Dependabot::<Package Manager>::Version] version class
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#77
  def affects_version?(version); end

  # Returns the value of attribute dependency_name.
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#8
  def dependency_name; end

  # Check if the advisory is fixed by the updated dependency
  #
  # @param dependency [Dependabot::Dependency] Updated dependency
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#53
  def fixed_by?(dependency); end

  # Returns the value of attribute package_manager.
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#8
  def package_manager; end

  # Returns the value of attribute safe_versions.
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#8
  def safe_versions; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#24
  def vulnerable?(version); end

  # Returns the value of attribute vulnerable_version_strings.
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#8
  def vulnerable_version_strings; end

  # Returns the value of attribute vulnerable_versions.
  #
  # source://dependabot-common//lib/dependabot/security_advisory.rb#8
  def vulnerable_versions; end

  private

  # source://dependabot-common//lib/dependabot/security_advisory.rb#113
  def check_version_requirements; end

  # source://dependabot-common//lib/dependabot/security_advisory.rb#99
  def convert_string_version_requirements; end

  # source://dependabot-common//lib/dependabot/security_advisory.rb#131
  def requirement_class; end

  # source://dependabot-common//lib/dependabot/security_advisory.rb#127
  def version_class; end
end

# source://dependabot-common//lib/dependabot/shared_helpers.rb#20
module Dependabot::SharedHelpers
  class << self
    # @raise [HelperSubprocessFailed]
    #
    # source://dependabot-common//lib/dependabot/shared_helpers.rb#147
    def check_out_of_memory_error(stderr, error_context); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#277
    def configure_git_to_use_https(host); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#218
    def configure_git_to_use_https_with_credentials(credentials, safe_directories); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#212
    def credential_helper_path; end

    # Escapes all special characters, e.g. = & | <>
    #
    # source://dependabot-common//lib/dependabot/shared_helpers.rb#79
    def escape_command(command); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#170
    def excon_defaults(options = T.unsafe(nil)); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#163
    def excon_headers(headers = T.unsafe(nil)); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#157
    def excon_middleware; end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#309
    def find_safe_directories; end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#49
    def in_a_temporary_directory(directory = T.unsafe(nil)); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#28
    def in_a_temporary_repo_directory(directory = T.unsafe(nil), repo_contents_path = T.unsafe(nil), &block); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#302
    def reset_git_repo(path); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#85
    def run_helper_subprocess(command:, function:, args:, env: T.unsafe(nil), stderr_to_stdout: T.unsafe(nil), allow_unsafe_shell_command: T.unsafe(nil)); end

    # @raise [SharedHelpers::HelperSubprocessFailed]
    #
    # source://dependabot-common//lib/dependabot/shared_helpers.rb#317
    def run_shell_command(command, allow_unsafe_shell_command: T.unsafe(nil), env: T.unsafe(nil), fingerprint: T.unsafe(nil), stderr_to_stdout: T.unsafe(nil)); end

    # Handle SCP-style git URIs
    #
    # source://dependabot-common//lib/dependabot/shared_helpers.rb#206
    def scp_to_standard(uri); end

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#185
    def with_git_configured(credentials:); end

    private

    # source://dependabot-common//lib/dependabot/shared_helpers.rb#350
    def helper_subprocess_bash_command(command:, stdin_data:, env:); end
  end
end

# source://dependabot-common//lib/dependabot/shared_helpers.rb#21
Dependabot::SharedHelpers::GIT_CONFIG_GLOBAL_PATH = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/shared_helpers.rb#62
class Dependabot::SharedHelpers::HelperSubprocessFailed < ::Dependabot::DependabotError
  # @return [HelperSubprocessFailed] a new instance of HelperSubprocessFailed
  #
  # source://dependabot-common//lib/dependabot/shared_helpers.rb#65
  def initialize(message:, error_context:, error_class: T.unsafe(nil), trace: T.unsafe(nil)); end

  # Returns the value of attribute error_class.
  #
  # source://dependabot-common//lib/dependabot/shared_helpers.rb#63
  def error_class; end

  # Returns the value of attribute error_context.
  #
  # source://dependabot-common//lib/dependabot/shared_helpers.rb#63
  def error_context; end

  # source://dependabot-common//lib/dependabot/shared_helpers.rb#73
  def raven_context; end

  # Returns the value of attribute trace.
  #
  # source://dependabot-common//lib/dependabot/shared_helpers.rb#63
  def trace; end
end

# source://dependabot-common//lib/dependabot/shared_helpers.rb#26
Dependabot::SharedHelpers::SIGKILL = T.let(T.unsafe(nil), Integer)

# source://dependabot-common//lib/dependabot/shared_helpers.rb#22
Dependabot::SharedHelpers::USER_AGENT = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/simple_instrumentor.rb#5
module Dependabot::SimpleInstrumentor
  class << self
    # Returns the value of attribute events.
    #
    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#7
    def events; end

    # Sets the attribute events
    #
    # @param value the value to set the attribute events to.
    #
    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#7
    def events=(_arg0); end

    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#14
    def instrument(name, params = T.unsafe(nil), &block); end

    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#9
    def subscribe(&block); end

    # Returns the value of attribute subscribers.
    #
    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#7
    def subscribers; end

    # Sets the attribute subscribers
    #
    # @param value the value to set the attribute subscribers to.
    #
    # source://dependabot-common//lib/dependabot/simple_instrumentor.rb#7
    def subscribers=(_arg0); end
  end
end

# source://dependabot-common//lib/dependabot/source.rb#5
class Dependabot::Source
  # @return [Source] a new instance of Source
  #
  # source://dependabot-common//lib/dependabot/source.rb#110
  def initialize(provider:, repo:, directory: T.unsafe(nil), branch: T.unsafe(nil), commit: T.unsafe(nil), hostname: T.unsafe(nil), api_endpoint: T.unsafe(nil)); end

  # Returns the value of attribute api_endpoint.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def api_endpoint; end

  # Sets the attribute api_endpoint
  #
  # @param value the value to set the attribute api_endpoint to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def api_endpoint=(_arg0); end

  # Returns the value of attribute branch.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def branch; end

  # Sets the attribute branch
  #
  # @param value the value to set the attribute branch to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def branch=(_arg0); end

  # Returns the value of attribute commit.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def commit; end

  # Sets the attribute commit
  #
  # @param value the value to set the attribute commit to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def commit=(_arg0); end

  # Returns the value of attribute directory.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def directory; end

  # Sets the attribute directory
  #
  # @param value the value to set the attribute directory to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def directory=(_arg0); end

  # Returns the value of attribute hostname.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def hostname; end

  # Sets the attribute hostname
  #
  # @param value the value to set the attribute hostname to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def hostname=(_arg0); end

  # source://dependabot-common//lib/dependabot/source.rb#152
  def organization; end

  # source://dependabot-common//lib/dependabot/source.rb#156
  def project; end

  # Returns the value of attribute provider.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def provider; end

  # Sets the attribute provider
  #
  # @param value the value to set the attribute provider to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def provider=(_arg0); end

  # Returns the value of attribute repo.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def repo; end

  # Sets the attribute repo
  #
  # @param value the value to set the attribute repo to.
  #
  # source://dependabot-common//lib/dependabot/source.rb#64
  def repo=(_arg0); end

  # source://dependabot-common//lib/dependabot/source.rb#165
  def unscoped_repo; end

  # source://dependabot-common//lib/dependabot/source.rb#128
  def url; end

  # source://dependabot-common//lib/dependabot/source.rb#132
  def url_with_directory; end

  private

  # source://dependabot-common//lib/dependabot/source.rb#182
  def default_api_endpoint(provider); end

  # source://dependabot-common//lib/dependabot/source.rb#171
  def default_hostname(provider); end

  class << self
    # source://dependabot-common//lib/dependabot/source.rb#67
    def from_url(url_string); end

    # @return [Boolean]
    #
    # source://dependabot-common//lib/dependabot/source.rb#99
    def github_enterprise?(base_url); end

    # source://dependabot-common//lib/dependabot/source.rb#80
    def github_enterprise_from_url(url_string); end
  end
end

# source://dependabot-common//lib/dependabot/source.rb#36
Dependabot::Source::AZURE_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#29
Dependabot::Source::BITBUCKET_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#42
Dependabot::Source::CODECOMMIT_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#13
Dependabot::Source::GITHUB_ENTERPRISE_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#6
Dependabot::Source::GITHUB_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#22
Dependabot::Source::GITLAB_SOURCE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-common//lib/dependabot/source.rb#62
Dependabot::Source::IGNORED_PROVIDER_HOSTS = T.let(T.unsafe(nil), Array)

# source://dependabot-common//lib/dependabot/source.rb#54
Dependabot::Source::SOURCE_REGEX = T.let(T.unsafe(nil), Regexp)

# File level errors #
#
# source://dependabot-common//lib/dependabot/errors.rb#88
class Dependabot::ToolVersionNotSupported < ::Dependabot::DependabotError
  # @return [ToolVersionNotSupported] a new instance of ToolVersionNotSupported
  #
  # source://dependabot-common//lib/dependabot/errors.rb#91
  def initialize(tool_name, detected_version, supported_versions); end

  # Returns the value of attribute detected_version.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#89
  def detected_version; end

  # Returns the value of attribute supported_versions.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#89
  def supported_versions; end

  # Returns the value of attribute tool_name.
  #
  # source://dependabot-common//lib/dependabot/errors.rb#89
  def tool_name; end
end

# Raised by FileParser if processing may execute external code in the update context
#
# source://dependabot-common//lib/dependabot/errors.rb#248
class Dependabot::UnexpectedExternalCode < ::Dependabot::DependabotError; end

# source://dependabot-common//lib/dependabot/update_checkers/base.rb#9
module Dependabot::UpdateCheckers
  class << self
    # source://dependabot-common//lib/dependabot/update_checkers.rb#14
    sig { params(package_manager: ::String).returns(T.class_of(Dependabot::UpdateCheckers::Base)) }
    def for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/update_checkers.rb#22
    sig { params(package_manager: ::String, update_checker: T.class_of(Dependabot::UpdateCheckers::Base)).void }
    def register(package_manager, update_checker); end
  end
end

# source://dependabot-common//lib/dependabot/update_checkers/base.rb#10
class Dependabot::UpdateCheckers::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#16
  def initialize(dependency:, dependency_files:, credentials:, repo_contents_path: T.unsafe(nil), ignored_versions: T.unsafe(nil), raise_on_ignored: T.unsafe(nil), security_advisories: T.unsafe(nil), requirements_update_strategy: T.unsafe(nil), dependency_group: T.unsafe(nil), options: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#41
  def can_update?(requirements_to_unlock:); end

  # Finds any dependencies in the lockfile that have a subdependency on the
  # given dependency that do not satisfy the target_version.
  #
  # @return [Array<Hash{String => String}]
  # name [String] the blocking dependencies name
  # version [String] the version of the blocking dependency
  # requirement [String] the requirement on the target_dependency] Array<Hash{String => String}]
  #   name [String] the blocking dependencies name
  #   version [String] the version of the blocking dependency
  #   requirement [String] the requirement on the target_dependency
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#105
  def conflicting_dependencies; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def dependency_files; end

  # Returns the value of attribute dependency_group.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def dependency_group; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#145
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def ignored_versions; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#109
  def latest_resolvable_previous_version(_updated_version); end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#81
  def latest_resolvable_version; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#95
  def latest_resolvable_version_with_no_unlock; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#66
  def latest_version; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#91
  def lowest_resolvable_security_fix_version; end

  # Lowest available security fix version not checking resolvability
  #
  # @raise [NotImplementedError]
  # @return [Dependabot::<package manager>::Version, #to_s] version class
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#87
  def lowest_security_fix_version; end

  # Returns the value of attribute options.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def options; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#70
  def preferred_resolvable_version; end

  # Returns the value of attribute raise_on_ignored.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def raise_on_ignored; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def repo_contents_path; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#121
  def requirement_class; end

  # For some languages, the manifest file may be constructed such that
  # Dependabot has no way to update it (e.g., if it fetches its versions
  # from a web API). This method is overridden in those cases.
  #
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#128
  def requirements_unlocked_or_can_be?; end

  # Returns the value of attribute requirements_update_strategy.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def requirements_update_strategy; end

  # Returns the value of attribute security_advisories.
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#11
  def security_advisories; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#33
  def up_to_date?; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#55
  def updated_dependencies(requirements_to_unlock:); end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#113
  def updated_requirements; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#117
  def version_class; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#132
  def vulnerable?; end

  private

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#151
  def active_advisories; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#291
  def can_compare_requirements?; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#297
  def changed_requirements; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#287
  def current_version; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#213
  def existing_version_is_sha?; end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#155
  def latest_version_resolvable_with_full_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#250
  def numeric_version_can_update?(requirements_to_unlock:); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#239
  def numeric_version_up_to_date?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#265
  def preferred_version_resolvable_with_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#311
  def requirements_can_update?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#278
  def requirements_up_to_date?; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#223
  def sha1_version_can_update?(requirements_to_unlock:); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#219
  def sha1_version_up_to_date?; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#191
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#175
  def updated_dependency_with_own_req_unlock; end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#159
  def updated_dependency_without_unlock; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#201
  def version_can_update?(requirements_to_unlock:); end

  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#301
  def version_from_requirements; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/update_checkers/base.rb#195
  def version_up_to_date?; end
end

# source://dependabot-common//lib/dependabot/update_checkers/version_filters.rb#6
module Dependabot::UpdateCheckers::VersionFilters
  class << self
    # source://dependabot-common//lib/dependabot/update_checkers/version_filters.rb#7
    def filter_vulnerable_versions(versions_array, security_advisories); end
  end
end

# source://dependabot-common//lib/dependabot/utils.rb#12
module Dependabot::Utils
  class << self
    # source://dependabot-common//lib/dependabot/utils.rb#51
    sig { params(package_manager: ::String).returns(T::Boolean) }
    def always_clone_for_package_manager?(package_manager); end

    # source://dependabot-common//lib/dependabot/utils.rb#56
    sig { params(package_manager: ::String).void }
    def register_always_clone(package_manager); end

    # source://dependabot-common//lib/dependabot/utils.rb#44
    sig { params(package_manager: ::String, requirement_class: T.class_of(Gem::Requirement)).void }
    def register_requirement_class(package_manager, requirement_class); end

    # source://dependabot-common//lib/dependabot/utils.rb#29
    sig { params(package_manager: ::String, version_class: T.class_of(Dependabot::Version)).void }
    def register_version_class(package_manager, version_class); end

    # source://dependabot-common//lib/dependabot/utils.rb#36
    sig { params(package_manager: ::String).returns(T.class_of(Gem::Requirement)) }
    def requirement_class_for_package_manager(package_manager); end

    # source://dependabot-common//lib/dependabot/utils.rb#21
    sig { params(package_manager: ::String).returns(T.class_of(Dependabot::Version)) }
    def version_class_for_package_manager(package_manager); end
  end
end

# source://dependabot-common//lib/dependabot/utils.rb#16
Dependabot::Utils::BUMP_TMP_DIR_PATH = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/utils.rb#15
Dependabot::Utils::BUMP_TMP_FILE_PREFIX = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot.rb#5
Dependabot::VERSION = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/version.rb#5
class Dependabot::Version < ::Gem::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-common//lib/dependabot/version.rb#6
  def initialize(version); end

  # source://dependabot-common//lib/dependabot/version.rb#19
  def to_semver; end

  class << self
    # Opt-in to Rubygems 4 behavior
    #
    # @return [Boolean]
    #
    # source://dependabot-common//lib/dependabot/version.rb#13
    def correct?(version); end
  end
end

# source://dependabot-common//lib/dependabot/workspace/base.rb#5
module Dependabot::Workspace
  class << self
    # Returns the value of attribute active_workspace.
    #
    # source://dependabot-common//lib/dependabot/workspace.rb#11
    def active_workspace; end

    # Sets the attribute active_workspace
    #
    # @param value the value to set the attribute active_workspace to.
    #
    # source://dependabot-common//lib/dependabot/workspace.rb#11
    def active_workspace=(_arg0); end

    # source://dependabot-common//lib/dependabot/workspace.rb#33
    def cleanup!; end

    # source://dependabot-common//lib/dependabot/workspace.rb#14
    def setup(repo_contents_path:, directory:); end

    # source://dependabot-common//lib/dependabot/workspace.rb#25
    def store_change(memo:); end
  end
end

# source://dependabot-common//lib/dependabot/workspace/base.rb#6
class Dependabot::Workspace::Base
  # @return [Base] a new instance of Base
  #
  # source://dependabot-common//lib/dependabot/workspace/base.rb#9
  def initialize(path); end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#26
  def change(memo = T.unsafe(nil)); end

  # Returns the value of attribute change_attempts.
  #
  # source://dependabot-common//lib/dependabot/workspace/base.rb#7
  def change_attempts; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/workspace/base.rb#14
  def changed?; end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#18
  def changes; end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#22
  def failed_change_attempts; end

  # Returns the value of attribute path.
  #
  # source://dependabot-common//lib/dependabot/workspace/base.rb#7
  def path; end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#40
  def reset!; end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#34
  def store_change(memo = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/workspace/base.rb#36
  def to_patch; end

  protected

  # source://dependabot-common//lib/dependabot/workspace/base.rb#44
  def capture_failed_change_attempt(memo = T.unsafe(nil), error = T.unsafe(nil)); end
end

# source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#6
class Dependabot::Workspace::ChangeAttempt
  # @return [ChangeAttempt] a new instance of ChangeAttempt
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#9
  def initialize(workspace, id:, memo:, diff: T.unsafe(nil), error: T.unsafe(nil)); end

  # Returns the value of attribute diff.
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#7
  def diff; end

  # Returns the value of attribute error.
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#7
  def error; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#21
  def error?; end

  # Returns the value of attribute id.
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#7
  def id; end

  # Returns the value of attribute memo.
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#7
  def memo; end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#17
  def success?; end

  # Returns the value of attribute workspace.
  #
  # source://dependabot-common//lib/dependabot/workspace/change_attempt.rb#7
  def workspace; end
end

# source://dependabot-common//lib/dependabot/workspace/git.rb#9
class Dependabot::Workspace::Git < ::Dependabot::Workspace::Base
  # @return [Git] a new instance of Git
  #
  # source://dependabot-common//lib/dependabot/workspace/git.rb#15
  def initialize(path); end

  # @return [Boolean]
  #
  # source://dependabot-common//lib/dependabot/workspace/git.rb#21
  def changed?; end

  # Returns the value of attribute initial_head_sha.
  #
  # source://dependabot-common//lib/dependabot/workspace/git.rb#13
  def initial_head_sha; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#29
  def reset!; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#38
  def store_change(memo = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#25
  def to_patch; end

  protected

  # source://dependabot-common//lib/dependabot/workspace/git.rb#51
  def capture_failed_change_attempt(memo = T.unsafe(nil), error = T.unsafe(nil)); end

  private

  # source://dependabot-common//lib/dependabot/workspace/git.rb#81
  def changed_files(ignored_mode: T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#110
  def clean; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#96
  def commit(memo = T.unsafe(nil)); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#60
  def configure_git; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#73
  def current_commit; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#118
  def debug(message); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#65
  def head_sha; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#69
  def last_stash_sha; end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#106
  def reset(sha); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#114
  def run_shell_command(*args, **kwargs); end

  # source://dependabot-common//lib/dependabot/workspace/git.rb#85
  def stash(memo = T.unsafe(nil)); end
end

# source://dependabot-common//lib/dependabot/workspace/git.rb#11
Dependabot::Workspace::Git::EMAIL = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/dependabot/workspace/git.rb#10
Dependabot::Workspace::Git::USER = T.let(T.unsafe(nil), String)

# source://dependabot-common//lib/wildcard_matcher.rb#4
class WildcardMatcher
  class << self
    # source://dependabot-common//lib/wildcard_matcher.rb#8
    sig { params(wildcard_string: T.nilable(::String), candidate_string: T.nilable(::String)).returns(T::Boolean) }
    def match?(wildcard_string, candidate_string); end
  end
end
