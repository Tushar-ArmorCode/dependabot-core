# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-composer` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-composer`.

# PHP pre-release versions use 1.0.1-rc1 syntax, which Gem::Version
# converts into 1.0.1.pre.rc1. We override the `to_s` method to stop that
# alteration.
#
# source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#8
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#9
module Dependabot::Composer; end

# source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#10
class Dependabot::Composer::FileFetcher < ::Dependabot::FileFetchers::Base
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#21
  def ecosystem_versions; end

  private

  # NOTE: This is fetched but currently unused
  #
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#51
  def auth_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#104
  def build_unfetchable_deps(unfetchable_deps); end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#40
  def composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#44
  def composer_lock; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#114
  def expand_path(path); end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#166
  def fetch_file_with_root_fallback(filename); end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#31
  def fetch_files; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#139
  def lockfile_path_dependency_paths; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#152
  def parsed_composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#158
  def parsed_lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#57
  def path_dependencies; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#87
  def path_sources; end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#13
    def required_files_in?(filenames); end

    # source://dependabot-composer//lib/dependabot/composer/file_fetcher.rb#17
    def required_files_message; end
  end
end

# source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#12
class Dependabot::Composer::FileFetcher::PathDependencyBuilder
  # @return [PathDependencyBuilder] a new instance of PathDependencyBuilder
  #
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#13
  def initialize(path:, directory:, lockfile:); end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#19
  def dependency_file; end

  private

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#55
  def build_path_dep_content; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#40
  def details_from_lockfile; end

  # Returns the value of attribute directory.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#38
  def directory; end

  # Returns the value of attribute lockfile.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#38
  def lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#61
  def parsed_lockfile; end

  # Returns the value of attribute path.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_fetcher/path_dependency_builder.rb#38
  def path; end
end

# source://dependabot-composer//lib/dependabot/composer/file_parser.rb#13
class Dependabot::Composer::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#29
  def parse; end

  private

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#110
  def build_lockfile_dependency(name, version, keys); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#64
  def build_manifest_dependency(name, req, keys); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#186
  def check_required_files; end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#204
  def composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#134
  def dependency_source(name:, type:, requirement:); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#122
  def dependency_version(name:, type:); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#148
  def git_dependency_details(package_details, requirement); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#208
  def lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#83
  def lockfile_dependencies; end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#167
  def lockfile_details(name:, type:); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#172
  def lockfile_key(type); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#38
  def manifest_dependencies; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#180
  def package?(name); end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#198
  def parsed_composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_parser.rb#190
  def parsed_lockfile; end
end

# source://dependabot-composer//lib/dependabot/composer/file_parser.rb#16
Dependabot::Composer::FileParser::DEPENDENCY_GROUP_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-composer//lib/dependabot/composer/file_updater.rb#11
class Dependabot::Composer::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#22
  def updated_dependency_files; end

  private

  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#48
  def check_required_files; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#68
  def composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#72
  def lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#52
  def updated_composer_json_content; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#59
  def updated_lockfile_content; end

  class << self
    # source://dependabot-composer//lib/dependabot/composer/file_updater.rb#15
    def updated_files_regex; end
  end
end

# source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#18
class Dependabot::Composer::FileUpdater::LockfileUpdater
  # @return [LockfileUpdater] a new instance of LockfileUpdater
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#42
  def initialize(dependencies:, dependency_files:, credentials:); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#49
  def updated_lockfile_content; end

  private

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#273
  def add_temporary_platform_extensions(content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#517
  def auth_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#507
  def composer_json; end

  # Returns the value of attribute composer_platform_extensions.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#61
  def composer_platform_extensions; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#452
  def composer_version; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#61
  def credentials; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#456
  def credentials_env; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#61
  def dependencies; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#88
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#61
  def dependency_files; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#64
  def generate_updated_lockfile_content; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#462
  def git_credentials; end

  # @raise [GitDependencyReferenceNotFound]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#333
  def git_dependency_reference_error(error); end

  # TODO: Extract error handling and share between the version resolver
  #
  #
  # @raise [Dependabot::OutOfMemory]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#136
  def handle_composer_errors(error); end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#239
  def implicit_platform_reqs_satisfiable?(message); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#474
  def initial_platform; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#235
  def library?; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#286
  def lock_dependencies_being_updated(original_content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#310
  def lock_git_dependencies(content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#265
  def locked_composer_json_content; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#126
  def locked_git_dep_error?(error); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#512
  def lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#499
  def parsed_composer_json; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#503
  def parsed_lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#521
  def path_dependencies; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#448
  def php_helper_path; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#347
  def post_process_lockfile(content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#468
  def registry_credentials; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#380
  def replace_content_hash(content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#353
  def replace_patches(updated_content); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#397
  def replace_platform_overrides(content); end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#492
  def requirement_valid?(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#93
  def run_update_helper; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#118
  def transitory_failure?(error); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#438
  def update_required_extensions(additional_extensions); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#111
  def updated_composer_json_content; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#414
  def version_for_reqs(requirements); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#253
  def write_temporary_dependency_files; end
end

# source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#40
Dependabot::Composer::FileUpdater::LockfileUpdater::MISSING_ENV_VAR_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#30
Dependabot::Composer::FileUpdater::LockfileUpdater::MISSING_EXPLICIT_PLATFORM_REQ_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#35
Dependabot::Composer::FileUpdater::LockfileUpdater::MISSING_IMPLICIT_PLATFORM_REQ_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#21
class Dependabot::Composer::FileUpdater::LockfileUpdater::MissingExtensions < ::StandardError
  # @return [MissingExtensions] a new instance of MissingExtensions
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#24
  def initialize(extensions); end

  # Returns the value of attribute extensions.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/lockfile_updater.rb#22
  def extensions; end
end

# source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#9
class Dependabot::Composer::FileUpdater::ManifestUpdater
  # @return [ManifestUpdater] a new instance of ManifestUpdater
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#10
  def initialize(dependencies:, manifest:); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#15
  def updated_manifest_content; end

  private

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#41
  def dependencies; end

  # Returns the value of attribute manifest.
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#41
  def manifest; end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#43
  def new_requirements(dependency); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#47
  def old_requirement(dependency, new_requirement); end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#58
  def requirement_changed?(file, dependency); end

  # source://dependabot-composer//lib/dependabot/composer/file_updater/manifest_updater.rb#53
  def updated_requirements(dependency); end
end

# source://dependabot-composer//lib/dependabot/composer/helpers.rb#8
module Dependabot::Composer::Helpers
  class << self
    # source://dependabot-composer//lib/dependabot/composer/helpers.rb#17
    def composer_version(composer_json, parsed_lockfile = T.unsafe(nil)); end

    private

    # @return [Boolean]
    #
    # source://dependabot-composer//lib/dependabot/composer/helpers.rb#29
    def invalid_v2_requirement?(composer_json); end
  end
end

# From composers json-schema: https://getcomposer.org/schema.json
#
# source://dependabot-composer//lib/dependabot/composer/helpers.rb#10
Dependabot::Composer::Helpers::COMPOSER_V2_NAME_REGEX = T.let(T.unsafe(nil), Regexp)

# From https://github.com/composer/composer/blob/b7d770659b4e3ef21423bd67ade935572913a4c1/src/Composer/Repository/PlatformRepository.php#L33
#
# source://dependabot-composer//lib/dependabot/composer/helpers.rb#12
Dependabot::Composer::Helpers::PLATFORM_PACKAGE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/metadata_finder.rb#12
class Dependabot::Composer::MetadataFinder < ::Dependabot::MetadataFinders::Base
  private

  # source://dependabot-composer//lib/dependabot/composer/metadata_finder.rb#15
  def look_up_source; end

  # source://dependabot-composer//lib/dependabot/composer/metadata_finder.rb#28
  def look_up_source_from_packagist; end

  # source://dependabot-composer//lib/dependabot/composer/metadata_finder.rb#48
  def packagist_listing; end

  # source://dependabot-composer//lib/dependabot/composer/metadata_finder.rb#19
  def source_from_dependency; end
end

# source://dependabot-composer//lib/dependabot/composer/native_helpers.rb#6
module Dependabot::Composer::NativeHelpers
  class << self
    # source://dependabot-composer//lib/dependabot/composer/native_helpers.rb#7
    def composer_helper_path(composer_version: T.unsafe(nil)); end

    # source://dependabot-composer//lib/dependabot/composer/native_helpers.rb#11
    def composer_helpers_dir; end

    # source://dependabot-composer//lib/dependabot/composer/native_helpers.rb#15
    def native_helpers_root; end
  end
end

# source://dependabot-composer//lib/dependabot/composer/requirement.rb#8
class Dependabot::Composer::Requirement < ::Gem::Requirement
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#27
  def initialize(*requirements); end

  private

  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#71
  def convert_caret_req(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#88
  def convert_hyphen_req(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#38
  def convert_php_constraint_to_ruby_constraint(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#66
  def convert_tilde_req(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/requirement.rb#56
  def convert_wildcard_req(req_string); end

  class << self
    # source://dependabot-composer//lib/dependabot/composer/requirement.rb#12
    def parse(obj); end

    # Returns an array of requirements. At least one requirement from the
    # returned array must be satisfied for a version to be valid.
    #
    # source://dependabot-composer//lib/dependabot/composer/requirement.rb#21
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-composer//lib/dependabot/composer/requirement.rb#9
Dependabot::Composer::Requirement::AND_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/requirement.rb#10
Dependabot::Composer::Requirement::OR_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker.rb#12
class Dependabot::Composer::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#25
  def latest_resolvable_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#51
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#17
  def latest_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#42
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#38
  def lowest_security_fix_version; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#72
  def requirements_unlocked_or_can_be?; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#76
  def requirements_update_strategy; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#64
  def updated_requirements; end

  private

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#138
  def composer_file; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#110
  def fetch_lowest_resolvable_security_fix_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#169
  def git_commit_checker; end

  # To be a true git dependency, it must have a branch.
  #
  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#134
  def git_dependency?; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#99
  def latest_version_finder; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#150
  def latest_version_for_git_dependency; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#95
  def latest_version_from_registry; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#86
  def latest_version_resolvable_with_full_unlock?; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#146
  def library?; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#129
  def path_dependency?; end

  # @raise [NotImplementedError]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker.rb#91
  def updated_dependencies_after_full_unlock; end
end

# source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#15
class Dependabot::Composer::UpdateChecker::LatestVersionFinder
  # @return [LatestVersionFinder] a new instance of LatestVersionFinder
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#16
  def initialize(dependency:, dependency_files:, credentials:, ignored_versions:, security_advisories:, raise_on_ignored: T.unsafe(nil)); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#27
  def latest_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#31
  def lowest_security_fix_version; end

  private

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#197
  def auth_json; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#174
  def auth_json_credentials; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#92
  def available_versions; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#189
  def composer_file; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#37
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#37
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#37
  def dependency_files; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#40
  def fetch_latest_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#47
  def fetch_lowest_security_fix_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#122
  def fetch_registry_versions_from_url(url); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#64
  def filter_ignored_versions(versions_array); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#76
  def filter_lower_versions(versions_array); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#58
  def filter_prerelease_versions(versions_array); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#201
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#37
  def ignored_versions; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#139
  def parse_registry_response(response, url); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#169
  def registry_credentials; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#98
  def registry_version_details; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#209
  def requirement_class; end

  # Returns the value of attribute security_advisories.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#37
  def security_advisories; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#205
  def version_class; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/latest_version_finder.rb#83
  def wants_prerelease?; end
end

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#16
class Dependabot::Composer::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#25
  def initialize(requirements:, update_strategy:, latest_resolvable_version:); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#38
  def updated_requirements; end

  private

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#50
  def check_update_strategy; end

  # Returns the value of attribute latest_resolvable_version.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#47
  def latest_resolvable_version; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#139
  def req_satisfied_by_latest_resolvable?(requirement_string); end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#47
  def requirements; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#158
  def ruby_requirements(requirement_string); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#162
  def update_caret_requirement(req_string, or_separator); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#227
  def update_greatest_version(old_version, version_to_be_permitted); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#208
  def update_range_requirement(req_string, or_separator); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#121
  def update_requirement_version(req, or_separator); end

  # Returns the value of attribute update_strategy.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#47
  def update_strategy; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#180
  def update_tilda_requirement(req_string, or_separator); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#144
  def update_version_string(req_string); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#192
  def update_wildcard_requirement(req_string, or_separator); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#86
  def updated_alias(req); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#57
  def updated_requirement(req); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#245
  def version_class; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#100
  def widen_requirement(req, or_separator); end
end

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#17
Dependabot::Composer::UpdateChecker::RequirementsUpdater::ALIAS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#22
Dependabot::Composer::UpdateChecker::RequirementsUpdater::ALLOWED_UPDATE_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#19
Dependabot::Composer::UpdateChecker::RequirementsUpdater::AND_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#20
Dependabot::Composer::UpdateChecker::RequirementsUpdater::OR_SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#21
Dependabot::Composer::UpdateChecker::RequirementsUpdater::SEPARATOR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/requirements_updater.rb#18
Dependabot::Composer::UpdateChecker::RequirementsUpdater::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#19
class Dependabot::Composer::UpdateChecker::VersionResolver
  # @return [VersionResolver] a new instance of VersionResolver
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#46
  def initialize(credentials:, dependency:, dependency_files:, requirements_to_unlock:, latest_allowable_version:); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#56
  def latest_resolvable_version; end

  private

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#163
  def add_temporary_platform_extensions(content); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#493
  def auth_json; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#368
  def check_original_requirements_resolvable; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#461
  def clean_dependency_url(dependency_url); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#478
  def composer_file; end

  # Returns the value of attribute composer_platform_extensions.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def composer_platform_extensions; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#438
  def composer_version; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def dependency_files; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#66
  def fetch_latest_resolvable_version; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#80
  def fetch_latest_resolvable_version_string; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#504
  def git_credentials; end

  # TODO: Extract error handling and share between the lockfile updater
  #
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#243
  def handle_composer_errors(error); end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#354
  def implicit_platform_reqs_satisfiable?(message); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#443
  def initial_platform; end

  # Returns the value of attribute latest_allowable_version.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def latest_allowable_version; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#350
  def library?; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#178
  def lock_git_dependencies(content); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#488
  def lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#470
  def parsed_composer_file; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#474
  def parsed_lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#483
  def path_dependency_files; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#434
  def php_helper_path; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#148
  def prepared_composer_json_content(unlock_requirement: T.unsafe(nil)); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#510
  def registry_credentials; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#497
  def requirement_valid?(req_string); end

  # Returns the value of attribute requirements_to_unlock.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#62
  def requirements_to_unlock; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#132
  def run_update_checker; end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#124
  def transitory_failure?(error); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#156
  def unlock_dep_being_updated(content); end

  # @return [Boolean]
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#343
  def unresolvable_error?(error); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#424
  def update_required_extensions(additional_extensions); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#202
  def updated_version_requirement_string; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#400
  def version_for_reqs(requirements); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#120
  def write_auth_file; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#100
  def write_dependency_file(unlock_requirement:); end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#116
  def write_lockfile; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#109
  def write_path_dependency_files; end

  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#93
  def write_temporary_dependency_files(unlock_requirement: T.unsafe(nil)); end
end

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#44
Dependabot::Composer::UpdateChecker::VersionResolver::FAILED_GIT_CLONE = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#43
Dependabot::Composer::UpdateChecker::VersionResolver::FAILED_GIT_CLONE_WITH_MIRROR = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#29
Dependabot::Composer::UpdateChecker::VersionResolver::MISSING_EXPLICIT_PLATFORM_REQ_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#34
Dependabot::Composer::UpdateChecker::VersionResolver::MISSING_IMPLICIT_PLATFORM_REQ_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#20
class Dependabot::Composer::UpdateChecker::VersionResolver::MissingExtensions < ::StandardError
  # @return [MissingExtensions] a new instance of MissingExtensions
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#23
  def initialize(extensions); end

  # Returns the value of attribute extensions.
  #
  # source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#21
  def extensions; end
end

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#41
Dependabot::Composer::UpdateChecker::VersionResolver::SOURCE_TIMED_OUT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/update_checker/version_resolver.rb#40
Dependabot::Composer::UpdateChecker::VersionResolver::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-composer//lib/dependabot/composer/version.rb#13
class Dependabot::Composer::Version < ::Dependabot::Version
  # @return [Version] a new instance of Version
  #
  # source://dependabot-composer//lib/dependabot/composer/version.rb#14
  def initialize(version); end

  # source://dependabot-composer//lib/dependabot/composer/version.rb#19
  def to_s; end
end
