# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dependabot-bundler` gem.
# Please instead update this file by running `bin/tapioca gem dependabot-bundler`.

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#7
module Dependabot
  class << self
    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#7
    def logger; end

    # source://dependabot-common/0.234.0/lib/dependabot/logger.rb#11
    def logger=(logger); end
  end
end

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#8
module Dependabot::Bundler; end

# source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#11
class Dependabot::Bundler::FileFetcher < ::Dependabot::FileFetchers::Base
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#27
  def ecosystem_versions; end

  private

  # @raise [Dependabot::DependencyFileNotFound]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#64
  def check_required_files_present; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#195
  def child_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#208
  def fetch_child_gemfiles(file:, previously_fetched_files:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#37
  def fetch_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#167
  def fetch_gemspecs_from_directory(dir_path); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#174
  def fetch_path_gemspec_paths; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#72
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#100
  def gemspec_directories; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#84
  def gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#78
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#150
  def path_gemspec_paths; end

  # @raise [Dependabot::PathDependenciesNotReachable]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#119
  def path_gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#154
  def require_relative_files(files); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#110
  def ruby_version_file; end

  # TODO: Stop sanitizing the lockfile once we have bundler 2 installed
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#203
  def sanitized_lockfile_content; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#58
  def uniq_files(fetched_files); end

  class << self
    # @return [Boolean]
    #
    # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#17
    def required_files_in?(filenames); end

    # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher.rb#23
    def required_files_message; end
  end
end

# Finds the paths of any Gemfiles declared using `eval_gemfile` in the
# passed Gemfile.
#
# source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#14
class Dependabot::Bundler::FileFetcher::ChildGemfileFinder
  # @return [ChildGemfileFinder] a new instance of ChildGemfileFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#15
  def initialize(gemfile:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#19
  def child_gemfile_paths; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#53
  def current_dir; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#59
  def declares_eval_gemfile?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#30
  def find_child_gemfile_paths(node); end

  # Returns the value of attribute gemfile.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/child_gemfile_finder.rb#28
  def gemfile; end
end

# Finds the directories of any gemspecs declared using `gemspec` in the
# passed Gemfile.
#
# source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#14
class Dependabot::Bundler::FileFetcher::GemspecFinder
  # @return [GemspecFinder] a new instance of GemspecFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#15
  def initialize(gemfile:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#19
  def gemspec_directories; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#66
  def clean_path(path); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#54
  def current_dir; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#60
  def declares_gemspec_dependency?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#30
  def find_gemspec_paths(node); end

  # Returns the value of attribute gemfile.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#28
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#90
  def key_from_hash_pair(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/gemspec_finder.rb#75
  def path_node_for_gem_declaration(node); end
end

# Finds the paths of any gemspecs declared using `path: ` in the
# passed Gemfile.
#
# source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#14
class Dependabot::Bundler::FileFetcher::PathGemspecFinder
  # @return [PathGemspecFinder] a new instance of PathGemspecFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#15
  def initialize(gemfile:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#19
  def path_gemspec_paths; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#66
  def clean_path(path); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#53
  def current_dir; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#59
  def declares_path_dependency?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#30
  def find_path_gemspec_paths(node); end

  # Returns the value of attribute gemfile.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#28
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#89
  def key_from_hash_pair(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/path_gemspec_finder.rb#75
  def path_node_for_gem_declaration(node); end
end

# Finds the paths of any files included using `require_relative` in the
# passed file.
#
# source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#14
class Dependabot::Bundler::FileFetcher::RequireRelativeFinder
  # @return [RequireRelativeFinder] a new instance of RequireRelativeFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#15
  def initialize(file:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#19
  def require_relative_paths; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#47
  def current_dir; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#53
  def declares_require_relative?(node); end

  # Returns the value of attribute file.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#28
  def file; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_fetcher/require_relative_finder.rb#30
  def find_require_relative_paths(node); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#16
class Dependabot::Bundler::FileParser < ::Dependabot::FileParsers::Base
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#22
  def parse; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#186
  def base_directory; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#310
  def bundler_version; end

  # @raise [::Dependabot::UnexpectedExternalCode]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#33
  def check_external_code(dependencies); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#206
  def check_required_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#218
  def dependency_version(dependency_name); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#241
  def evaled_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#270
  def expanded_dependency_names(dep); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#236
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#47
  def gemfile_dependencies; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#76
  def gemspec_dependencies; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#298
  def gemspecs; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#41
  def git_source?(dependencies); end

  # @raise [Dependabot::DependencyFileNotEvaluatable]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#158
  def handle_eval_error(err); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#304
  def imported_ruby_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#252
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#107
  def lockfile_dependencies; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#133
  def parsed_gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#163
  def parsed_gemspec(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#257
  def parsed_lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#190
  def prepared_dependency_files; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#280
  def production?(dependency); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#262
  def production_dep_names; end

  # TODO: Stop sanitizing the lockfile once we have bundler 2 installed
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#293
  def sanitized_lockfile_content; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser.rb#196
  def write_temporary_dependency_files; end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#11
class Dependabot::Bundler::FileParser::FilePreparer
  # @return [FilePreparer] a new instance of FilePreparer
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#12
  def initialize(dependency_files:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#16
  def prepared_dependency_files; end

  private

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#40
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#47
  def evaled_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#42
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#67
  def gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#75
  def imported_ruby_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#62
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#71
  def ruby_version_file; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#81
  def sanitize_gemspec_content(gemspec_content); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/file_preparer.rb#58
  def specification_files; end
end

# Checks whether a dependency is declared in a Gemfile
#
# source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#11
class Dependabot::Bundler::FileParser::GemfileDeclarationFinder
  # @return [GemfileDeclarationFinder] a new instance of GemfileDeclarationFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#12
  def initialize(gemfile:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#21
  def enhanced_req_string(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#17
  def gemfile_includes_dependency?(dependency); end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#49
  def declaration_node(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#71
  def declares_targeted_gem?(node, dependency); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#60
  def deep_search_for_gem(node, dependency); end

  # Returns the value of attribute gemfile.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#43
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemfile_declaration_finder.rb#45
  def parsed_gemfile; end
end

# Checks whether a dependency is declared in a gemspec file
#
# source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#11
class Dependabot::Bundler::FileParser::GemspecDeclarationFinder
  # @return [GemspecDeclarationFinder] a new instance of GemspecDeclarationFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#12
  def initialize(gemspec:); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#17
  def gemspec_includes_dependency?(dependency); end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#29
  def declaration_node(dependency); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#51
  def declares_targeted_gem?(node, dependency); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#40
  def deep_search_for_gem(node, dependency); end

  # Returns the value of attribute gemspec.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#23
  def gemspec; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_parser/gemspec_declaration_finder.rb#25
  def parsed_gemspec; end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#12
class Dependabot::Bundler::FileUpdater < ::Dependabot::FileUpdaters::Base
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#29
  def updated_dependency_files; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#166
  def bundler_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#97
  def check_required_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#108
  def check_updated_files(updated_files); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#124
  def evaled_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#114
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#119
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#161
  def top_level_gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#136
  def updated_gemfile_content(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#143
  def updated_gemspec_content(gemspec); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#150
  def updated_lockfile_content; end

  # Dynamically fetch the vendor cache folder from bundler
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#76
  def vendor_cache_dir; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#90
  def vendor_updater; end

  class << self
    # source://dependabot-bundler//lib/dependabot/bundler/file_updater.rb#17
    def updated_files_regex; end
  end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#9
class Dependabot::Bundler::FileUpdater::GemfileUpdater
  # @return [GemfileUpdater] a new instance of GemfileUpdater
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#16
  def initialize(dependencies:, gemfile:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#21
  def updated_gemfile_content; end

  private

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#41
  def dependencies; end

  # Returns the value of attribute gemfile.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#41
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#96
  def remove_gemfile_git_source(dependency, content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#71
  def remove_git_source?(dependency); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#43
  def replace_gemfile_version_requirement(dependency, file, content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#64
  def requirement_changed?(file, dependency); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#100
  def update_gemfile_git_pin(dependency, file, content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#85
  def update_git_pin?(dependency, file); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemfile_updater.rb#10
Dependabot::Bundler::FileUpdater::GemfileUpdater::GEMFILE_FILENAMES = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#10
class Dependabot::Bundler::FileUpdater::GemspecDependencyNameFinder
  # @return [GemspecDependencyNameFinder] a new instance of GemspecDependencyNameFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#13
  def initialize(gemspec_content:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#18
  def dependency_name; end

  # Returns the value of attribute gemspec_content.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#11
  def gemspec_content; end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#43
  def declares_dependency_name?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_dependency_name_finder.rb#33
  def find_dependency_name_node(node); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#10
class Dependabot::Bundler::FileUpdater::GemspecSanitizer
  # @return [GemspecSanitizer] a new instance of GemspecSanitizer
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#28
  def initialize(replacement_version:); end

  # Returns the value of attribute replacement_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#26
  def replacement_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#32
  def rewrite(content); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#49
class Dependabot::Bundler::FileUpdater::GemspecSanitizer::Rewriter < ::Parser::TreeRewriter
  # @return [Rewriter] a new instance of Rewriter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#50
  def initialize(replacement_version:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#54
  def on_send(node); end

  private

  # Performs a depth-first search for the first heredoc in the given
  # Parser::AST::Node.
  #
  # Returns a Parser::Source::Range identifying the location of the end
  #   of the heredoc, or nil if no heredoc was found.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#259
  def find_heredoc_end_range(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#149
  def node_assigns_files_to_var?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#166
  def node_assigns_require_paths?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#137
  def node_assigns_to_version_constant?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#226
  def node_calls_find_dot_find?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#291
  def node_calls_version_constant?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#158
  def node_dynamically_lists_files?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#250
  def node_includes_heredoc?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#298
  def node_interpolates_version_constant?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#284
  def node_is_version_constant?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#209
  def node_parses_json?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#183
  def node_reads_a_file?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#192
  def node_uses_readlines?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#344
  def remove_find_args(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#218
  def remove_find_dot_find_args(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#235
  def remove_unnecessary_assignments(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#308
  def replace_constant(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#321
  def replace_file_assignment(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#119
  def replace_file_assignments(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#329
  def replace_file_read(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#340
  def replace_file_readlines(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#174
  def replace_file_reads(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#333
  def replace_json_parse(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#201
  def replace_json_parses(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#325
  def replace_require_paths_assignment(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#127
  def replace_require_paths_assignments(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#101
  def replace_version_assignments(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#109
  def replace_version_constant_references(node); end

  # Returns the value of attribute replacement_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#85
  def replacement_version; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#87
  def requires_file?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#274
  def unnecessary_assignment?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#91
  def wrap_require(node); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_sanitizer.rb#11
Dependabot::Bundler::FileUpdater::GemspecSanitizer::UNNECESSARY_ASSIGNMENTS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#9
class Dependabot::Bundler::FileUpdater::GemspecUpdater
  # @return [GemspecUpdater] a new instance of GemspecUpdater
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#12
  def initialize(dependencies:, gemspec:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#17
  def updated_gemspec_content; end

  private

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#31
  def dependencies; end

  # Returns the value of attribute gemspec.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#31
  def gemspec; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#33
  def replace_gemspec_version_requirement(gemspec, dependency, content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/gemspec_updater.rb#54
  def requirement_changed?(file, dependency); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#10
class Dependabot::Bundler::FileUpdater::GitPinReplacer
  # @return [GitPinReplacer] a new instance of GitPinReplacer
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#13
  def initialize(dependency:, new_pin:); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#11
  def dependency; end

  # Returns the value of attribute new_pin.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#11
  def new_pin; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#18
  def rewrite(content); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#28
class Dependabot::Bundler::FileUpdater::GitPinReplacer::Rewriter < ::Parser::TreeRewriter
  # @return [Rewriter] a new instance of Rewriter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#32
  def initialize(dependency:, new_pin:); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#30
  def dependency; end

  # Returns the value of attribute new_pin.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#30
  def new_pin; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#37
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#51
  def declares_targeted_gem?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#72
  def extract_quote_characters_from(value_node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#57
  def key_from_hash_pair(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#61
  def update_value(hash_pair); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_pin_replacer.rb#29
Dependabot::Bundler::FileUpdater::GitPinReplacer::Rewriter::PIN_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#10
class Dependabot::Bundler::FileUpdater::GitSourceRemover
  # @return [GitSourceRemover] a new instance of GitSourceRemover
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#13
  def initialize(dependency:); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#11
  def dependency; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#17
  def rewrite(content); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#26
class Dependabot::Bundler::FileUpdater::GitSourceRemover::Rewriter < ::Parser::TreeRewriter
  # @return [Rewriter] a new instance of Rewriter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#34
  def initialize(dependency:); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#32
  def dependency; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#38
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#56
  def declares_targeted_gem?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#62
  def key_from_hash_pair(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#66
  def remove_all_kwargs(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#75
  def remove_git_related_kwargs(kwargs_node); end
end

# TODO: Hack until Bundler 1.16.0 is available on Heroku
#
# source://dependabot-bundler//lib/dependabot/bundler/file_updater/git_source_remover.rb#27
Dependabot::Bundler::FileUpdater::GitSourceRemover::Rewriter::GOOD_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#15
class Dependabot::Bundler::FileUpdater::LockfileUpdater
  # @return [LockfileUpdater] a new instance of LockfileUpdater
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#35
  def initialize(dependencies:, dependency_files:, credentials:, options:, repo_contents_path: T.unsafe(nil)); end

  # Can't be a constant because some of these don't exist in bundler
  # 1.15, which Heroku uses, which causes an exception on boot.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#28
  def gemspec_sources; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#44
  def updated_lockfile_content; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#60
  def build_updated_lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#279
  def bundler_version; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#57
  def credentials; end

  # Returns the value of attribute dependencies.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#57
  def dependencies; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#57
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#262
  def evaled_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#246
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#144
  def imported_ruby_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#251
  def lockfile; end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#57
  def options; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#139
  def path_gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#159
  def post_process_lockfile(lockfile_body); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#222
  def prepared_gemfile_content(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#164
  def reorder_git_dependencies(lockfile_body); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#191
  def replace_lockfile_ending(lockfile_body); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#208
  def replacement_version_for_gemspec(path, gemspec_content); end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#57
  def repo_contents_path; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#155
  def ruby_version_file; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#200
  def sanitized_gemspec_content(path, gemspec_content); end

  # TODO: Stop sanitizing the lockfile once we have bundler 2 installed
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#258
  def sanitized_lockfile_body; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#275
  def specification_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#150
  def top_level_gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#232
  def updated_gemfile_content(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#239
  def updated_gemspec_content(gemspec); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#114
  def write_gemspecs(files); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#131
  def write_imported_ruby_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#106
  def write_ruby_version_file; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#123
  def write_specification_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#89
  def write_temporary_dependency_files; end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#23
Dependabot::Bundler::FileUpdater::LockfileUpdater::GIT_DEPENDENCIES_SECTION = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#24
Dependabot::Bundler::FileUpdater::LockfileUpdater::GIT_DEPENDENCY_DETAILS = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/lockfile_updater.rb#22
Dependabot::Bundler::FileUpdater::LockfileUpdater::LOCKFILE_ENDING = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#10
class Dependabot::Bundler::FileUpdater::RequirementReplacer
  # @return [RequirementReplacer] a new instance of RequirementReplacer
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#14
  def initialize(dependency:, file_type:, updated_requirement:, previous_requirement: T.unsafe(nil), insert_if_bare: T.unsafe(nil)); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#11
  def dependency; end

  # Returns the value of attribute file_type.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#11
  def file_type; end

  # Returns the value of attribute previous_requirement.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#11
  def previous_requirement; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#23
  def rewrite(content); end

  # Returns the value of attribute updated_requirement.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#11
  def updated_requirement; end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#40
  def insert_if_bare?; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#67
  def length_change; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#44
  def update_comment_spacing_if_required(content, updated_content); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#76
class Dependabot::Bundler::FileUpdater::RequirementReplacer::Rewriter < ::Parser::TreeRewriter
  # @return [Rewriter] a new instance of Rewriter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#79
  def initialize(dependency:, file_type:, updated_requirement:, insert_if_bare:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#91
  def on_send(node); end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#124
  def declaration_methods; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#131
  def declares_targeted_gem?(node); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#118
  def dependency; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#137
  def extract_quote_characters_from(requirement_nodes); end

  # Returns the value of attribute file_type.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#118
  def file_type; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#120
  def insert_if_bare?; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#187
  def new_requirement_string(quote_characters:, space_after_specifier:, use_equality_operator:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#214
  def range_for(nodes); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#203
  def serialized_req(req, use_equality_operator); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#154
  def space_after_specifier?(requirement_nodes); end

  # Returns the value of attribute updated_requirement.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#118
  def updated_requirement; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#173
  def use_equality_operator?(requirement_nodes); end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#171
Dependabot::Bundler::FileUpdater::RequirementReplacer::Rewriter::EQUALITY_OPERATOR = T.let(T.unsafe(nil), Regexp)

# TODO: Ideally we wouldn't have to ignore all of these, but
# implementing each one will be tricky.
#
# source://dependabot-bundler//lib/dependabot/bundler/file_updater/requirement_replacer.rb#77
Dependabot::Bundler::FileUpdater::RequirementReplacer::Rewriter::SKIPPED_TYPES = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#11
class Dependabot::Bundler::FileUpdater::RubyRequirementSetter
  # @return [RubyRequirementSetter] a new instance of RubyRequirementSetter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#20
  def initialize(gemspec:); end

  # Returns the value of attribute gemspec.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#18
  def gemspec; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#24
  def rewrite(content); end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#94
  def declares_ruby_requirement?(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#46
  def declares_ruby_version?(node); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#84
  def find_ruby_requirement_node(node); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#42
  def gemspec_declares_ruby_requirement?; end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#71
  def ruby_requirement; end

  # @raise [RubyVersionNotFound]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#53
  def ruby_version; end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#100
class Dependabot::Bundler::FileUpdater::RubyRequirementSetter::GemfileRewriter < ::Parser::TreeRewriter
  # @return [GemfileRewriter] a new instance of GemfileRewriter
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#101
  def initialize(ruby_version:); end

  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#105
  def on_send(node); end

  private

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#116
  def declares_ruby_version?(node); end

  # Returns the value of attribute ruby_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#114
  def ruby_version; end
end

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#14
Dependabot::Bundler::FileUpdater::RubyRequirementSetter::RUBY_VERSIONS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/file_updater/ruby_requirement_setter.rb#12
class Dependabot::Bundler::FileUpdater::RubyRequirementSetter::RubyVersionNotFound < ::StandardError; end

# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#6
module Dependabot::Bundler::Helpers
  class << self
    # source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#19
    def bundler_version(lockfile); end

    # source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#29
    def detected_bundler_version(lockfile); end
  end
end

# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#17
Dependabot::Bundler::Helpers::BUNDLER_MAJOR_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# If we are updating a project with no Gemfile.lock, we default to the
# newest version we support
#
# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#11
Dependabot::Bundler::Helpers::DEFAULT = T.let(T.unsafe(nil), String)

# If we are updating a project with a Gemfile.lock that does not specify
# the version it was bundled with, we failover to V1 on the assumption
# it was created with an old version that didn't add this information
#
# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#15
Dependabot::Bundler::Helpers::FAILOVER = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#7
Dependabot::Bundler::Helpers::V1 = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/helpers.rb#8
Dependabot::Bundler::Helpers::V2 = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#11
class Dependabot::Bundler::MetadataFinder < ::Dependabot::MetadataFinders::Base
  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#23
  def homepage_url; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#158
  def append_slash_to_source_code_uri(listing); end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#168
  def augment_private_response_if_appropriate(response_body); end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#200
  def base_url; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#98
  def changelog_url_from_gemspec_download; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#80
  def find_source_from_gemspec_download; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#73
  def find_source_from_git_url; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#57
  def find_source_from_rubygems; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#64
  def find_source_from_rubygems_api_response; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#32
  def look_up_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#53
  def new_source_type; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#210
  def registry_auth_headers; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#193
  def registry_url; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#139
  def rubygems_api_response; end

  # NOTE: This response MUST NOT be unmarshalled
  # (as calling Marshal.load is unsafe)
  #
  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#118
  def rubygems_marshalled_gemspec_response; end

  # source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#40
  def suggested_changelog_url; end
end

# source://dependabot-bundler//lib/dependabot/bundler/metadata_finder.rb#12
Dependabot::Bundler::MetadataFinder::SOURCE_KEYS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#9
module Dependabot::Bundler::NativeHelpers
  class << self
    # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#67
    def native_helpers_root; end

    # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#37
    def run_bundler_subprocess(function:, args:, bundler_version:, options: T.unsafe(nil)); end

    # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#63
    def versioned_helper_path(bundler_major_version); end
  end
end

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#10
class Dependabot::Bundler::NativeHelpers::BundleCommand
  # @return [BundleCommand] a new instance of BundleCommand
  #
  # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#14
  def initialize(timeout_seconds); end

  # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#18
  def build(script); end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#30
  def clamp(seconds); end

  # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#26
  def timeout_command; end

  # Returns the value of attribute timeout_seconds.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#24
  def timeout_seconds; end
end

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#11
Dependabot::Bundler::NativeHelpers::BundleCommand::MAX_SECONDS = T.let(T.unsafe(nil), Integer)

# source://dependabot-bundler//lib/dependabot/bundler/native_helpers.rb#12
Dependabot::Bundler::NativeHelpers::BundleCommand::MIN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://dependabot-bundler//lib/dependabot/bundler/requirement.rb#11
class Dependabot::Bundler::Requirement < ::Gem::Requirement
  # Patches Gem::Requirement to make it accept requirement strings like
  # "~> 4.2.5, >= 4.2.5.1" without first needing to split them.
  #
  # @return [Requirement] a new instance of Requirement
  #
  # source://dependabot-bundler//lib/dependabot/bundler/requirement.rb#18
  def initialize(*requirements); end

  class << self
    # For consistency with other languages, we define a requirements array.
    # Ruby doesn't have an `OR` separator for requirements, so it always
    # contains a single element.
    #
    # source://dependabot-bundler//lib/dependabot/bundler/requirement.rb#12
    def requirements_array(requirement_string); end
  end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#11
class Dependabot::Bundler::UpdateChecker < ::Dependabot::UpdateCheckers::Base
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#101
  def conflicting_dependencies; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#25
  def latest_resolvable_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#48
  def latest_resolvable_version_with_no_unlock; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#19
  def latest_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#36
  def lowest_resolvable_security_fix_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#31
  def lowest_security_fix_version; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#76
  def requirements_unlocked_or_can_be?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#93
  def requirements_update_strategy; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#63
  def updated_requirements; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#309
  def dependency_source_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#313
  def force_updater; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#288
  def git_branch_or_ref_in_release?(release); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#326
  def git_commit_checker; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#146
  def git_dependency?; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#172
  def git_tag_resolvable?(tag); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#281
  def latest_git_tag_is_resolvable?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#268
  def latest_resolvable_commit_with_unchanged_git_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#201
  def latest_resolvable_version_details(remove_git_source: T.unsafe(nil)); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#234
  def latest_resolvable_version_for_git_dependency; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#259
  def latest_resolvable_version_without_git_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#194
  def latest_version_details(remove_git_source: T.unsafe(nil)); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#352
  def latest_version_finder(remove_git_source:); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#208
  def latest_version_for_git_dependency; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#119
  def latest_version_resolvable_with_full_unlock?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#140
  def preferred_resolvable_version_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#374
  def prepared_dependency_files(remove_git_source:, unlock_requirement:, latest_allowable_version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#115
  def requirements_unlocked?; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#150
  def resolvable?(version); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#136
  def updated_dependencies_after_full_unlock; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#294
  def updated_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker.rb#334
  def version_resolver(remove_git_source:, unlock_requirement: T.unsafe(nil)); end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/conflicting_dependency_resolver.rb#12
class Dependabot::Bundler::UpdateChecker::ConflictingDependencyResolver
  include ::Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers

  # @return [ConflictingDependencyResolver] a new instance of ConflictingDependencyResolver
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/conflicting_dependency_resolver.rb#18
  def initialize(dependency_files:, repo_contents_path:, credentials:, options:); end

  # Finds any dependencies in the lockfile that have a subdependency on
  # the given dependency that does not satisfly the target_version.
  #
  # @param dependency [Dependabot::Dependency] the dependency to check
  # @param target_version [String] the version to check
  # @return [Array<Hash{String => String}]
  # * name [String] the blocking dependencies name
  # * version [String] the version of the blocking dependency
  # * requirement [String] the requirement on the target_dependency] Array<Hash{String => String}]
  #   * name [String] the blocking dependencies name
  #   * version [String] the version of the blocking dependency
  #   * requirement [String] the requirement on the target_dependency
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/conflicting_dependency_resolver.rb#34
  def conflicting_dependencies(dependency:, target_version:); end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/conflicting_dependency_resolver.rb#16
  def options; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/conflicting_dependency_resolver.rb#55
  def bundler_version; end
end

# This class takes a set of dependency files and sanitizes them for use
# in UpdateCheckers::Ruby::Bundler. In particular, it:
# - Removes any version requirement on the dependency being updated
#   (in the Gemfile)
# - Sanitizes any provided gemspecs to remove file imports etc. (since
#   Dependabot doesn't pull down the entire repo). This process is
#   imperfect - an alternative would be to clone the repo
# - Sets the ruby version in the Gemfile to be the lowest possible
#   version allowed by the gemspec, if the gemspec has a required ruby
#   version range
#
# source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#27
class Dependabot::Bundler::UpdateChecker::FilePreparer
  # @return [FilePreparer] a new instance of FilePreparer
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#39
  def initialize(dependency_files:, dependency:, remove_git_source: T.unsafe(nil), unlock_requirement: T.unsafe(nil), replacement_git_pin: T.unsafe(nil), latest_allowable_version: T.unsafe(nil), lock_ruby_version: T.unsafe(nil)); end

  # Can't be a constant because some of these don't exist in bundler
  # 1.15, which Heroku uses, which causes an exception on boot.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#32
  def gemspec_sources; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#56
  def prepared_dependency_files; end

  private

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#105
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#105
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#125
  def evaled_gemfiles; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#120
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#165
  def gemfile_content_for_update_check(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#174
  def gemspec_content_for_update_check(gemspec); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#159
  def imported_ruby_files; end

  # Returns the value of attribute latest_allowable_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#105
  def latest_allowable_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#251
  def lock_ruby_version(gemfile_content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#260
  def lock_ruby_version?(file); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#136
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#154
  def path_gemspecs; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#238
  def remove_git_source(content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#108
  def remove_git_source?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#180
  def replace_gemfile_constraint(content, filename); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#189
  def replace_gemspec_constraint(content, filename); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#244
  def replace_git_pin(content); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#116
  def replace_git_pin?; end

  # Returns the value of attribute replacement_git_pin.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#105
  def replacement_git_pin; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#265
  def replacement_version_for_gemspec(gemspec_content); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#150
  def ruby_version_file; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#198
  def sanitize_gemspec_content(gemspec_content); end

  # TODO: Stop sanitizing the lockfile once we have bundler 2 installed
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#285
  def sanitized_lockfile_content; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#141
  def specification_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#145
  def top_level_gemspecs; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#112
  def unlock_requirement?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#216
  def updated_version_req_lower_bound(filename); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#206
  def updated_version_requirement_string(filename); end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/file_preparer.rb#28
Dependabot::Bundler::UpdateChecker::FilePreparer::VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#16
class Dependabot::Bundler::UpdateChecker::ForceUpdater
  include ::Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers

  # @return [ForceUpdater] a new instance of ForceUpdater
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#20
  def initialize(dependency:, dependency_files:, credentials:, target_version:, requirements_update_strategy:, options:, repo_contents_path: T.unsafe(nil), update_multiple_dependencies: T.unsafe(nil)); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#35
  def updated_dependencies; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#112
  def build_dependency(original_dep, updated_spec); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#161
  def bundler_version; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def credentials; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#90
  def dependencies_from(updated_deps, specs); end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#49
  def force_update; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#136
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#141
  def lockfile; end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def options; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#72
  def original_dependencies; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def repo_contents_path; end

  # Returns the value of attribute requirements_update_strategy.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def requirements_update_strategy; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#146
  def sanitized_lockfile_body; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#130
  def source_for(dependency); end

  # Returns the value of attribute target_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#41
  def target_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#81
  def top_level_dependencies; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#45
  def update_multiple_dependencies?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/force_updater.rb#151
  def write_temporary_dependency_files; end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#11
class Dependabot::Bundler::UpdateChecker::LatestVersionFinder
  # @return [LatestVersionFinder] a new instance of LatestVersionFinder
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#18
  def initialize(dependency:, dependency_files:, credentials:, ignored_versions:, security_advisories:, options:, repo_contents_path: T.unsafe(nil), raise_on_ignored: T.unsafe(nil)); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#31
  def latest_version_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#35
  def lowest_security_fix_version; end

  private

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#105
  def dependency_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#45
  def fetch_latest_version_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#55
  def fetch_lowest_security_fix_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#74
  def filter_ignored_versions(versions_array); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#84
  def filter_lower_versions(versions_array); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#68
  def filter_prerelease_versions(versions_array); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#122
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#114
  def ignore_requirements; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def ignored_versions; end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def options; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def repo_contents_path; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#118
  def requirement_class; end

  # Returns the value of attribute security_advisories.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#41
  def security_advisories; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder.rb#91
  def wants_prerelease?; end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#12
class Dependabot::Bundler::UpdateChecker::LatestVersionFinder::DependencySource
  include ::Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers

  # @return [DependencySource] a new instance of DependencySource
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#24
  def initialize(dependency:, dependency_files:, credentials:, options:); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#21
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#21
  def dependency; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#21
  def dependency_files; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#80
  def git?; end

  # The latest version details for the dependency from a git repo
  #
  # @return [Hash{Symbol => String}, nil]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#54
  def latest_git_version_details; end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#21
  def options; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#21
  def repo_contents_path; end

  # The latest version details for the dependency from a registry
  #
  # @return [Array<Gem::Version>]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#37
  def versions; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#152
  def bundler_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#100
  def dependency_rubygems_uri; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#142
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#147
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#104
  def private_registry_versions; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#86
  def rubygems_versions; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#123
  def source_type; end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#18
Dependabot::Bundler::UpdateChecker::LatestVersionFinder::DependencySource::GIT = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#19
Dependabot::Bundler::UpdateChecker::LatestVersionFinder::DependencySource::OTHER = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#17
Dependabot::Bundler::UpdateChecker::LatestVersionFinder::DependencySource::PRIVATE_REGISTRY = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/latest_version_finder/dependency_source.rb#16
Dependabot::Bundler::UpdateChecker::LatestVersionFinder::DependencySource::RUBYGEMS = T.let(T.unsafe(nil), String)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#9
class Dependabot::Bundler::UpdateChecker::RequirementsUpdater
  # @return [RequirementsUpdater] a new instance of RequirementsUpdater
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#15
  def initialize(requirements:, update_strategy:, updated_source:, latest_version:, latest_resolvable_version:); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#30
  def updated_requirements; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#115
  def at_same_precision(new_version, old_version); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#168
  def binding_requirements(requirements); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#202
  def bumped_requirements(req); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#50
  def check_update_strategy; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#221
  def convert_twiddle_to_range(requirement, version_to_be_permitted); end

  # Returns the value of attribute latest_resolvable_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#46
  def latest_resolvable_version; end

  # Returns the value of attribute latest_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#46
  def latest_version; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#91
  def new_version_satisfies?(req); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#160
  def requirement_satisfied?(req, groups); end

  # Returns the value of attribute requirements.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#46
  def requirements; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#96
  def update_gemfile_range(requirements); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#56
  def update_gemfile_requirement(req); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#132
  def update_gemspec_requirement(req); end

  # Updates the version in a "<" or "<=" constraint to allow the given
  # version
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#257
  def update_greatest_version(requirement, version_to_be_permitted); end

  # Returns the value of attribute update_strategy.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#46
  def update_strategy; end

  # Updates the version in a "~>" constraint to allow the given version
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#249
  def update_twiddle_version(requirement, version_to_be_permitted); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#75
  def update_version_requirement(req); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#69
  def update_version_requirement_if_needed(req); end

  # Returns the value of attribute updated_source.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#46
  def updated_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#184
  def widened_requirements(req); end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#12
Dependabot::Bundler::UpdateChecker::RequirementsUpdater::ALLOWED_UPDATE_STRATEGIES = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/requirements_updater.rb#10
class Dependabot::Bundler::UpdateChecker::RequirementsUpdater::UnfixableRequirement < ::StandardError; end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#17
module Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#65
  def base_directory; end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#43
  def credentials; end

  # Returns the value of attribute dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#43
  def dependency_files; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#227
  def gemfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#82
  def handle_bundler_errors(error); end

  # Bundler context setup #
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#49
  def in_a_native_bundler_context(error_handling: T.unsafe(nil)); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#170
  def inaccessible_git_dependencies; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#195
  def jfrog_source; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#232
  def lockfile; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#222
  def private_registry_credentials; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#43
  def repo_contents_path; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#69
  def retryable_error?(error); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#212
  def write_temporary_dependency_files; end
end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#22
module Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::BundlerErrorPatterns; end

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#26
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::BundlerErrorPatterns::BAD_AUTH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#27
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::BundlerErrorPatterns::BAD_CERT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#28
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::BundlerErrorPatterns::HTTP_ERR_REGEX = T.let(T.unsafe(nil), Regexp)

# The `set --global` optional part can be made required when Bundler 1 support is dropped
#
# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#24
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::BundlerErrorPatterns::MISSING_AUTH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#19
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::GIT_REF_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#18
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::GIT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#20
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#31
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::RETRYABLE_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/shared_bundler_helpers.rb#35
Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers::RETRYABLE_PRIVATE_REGISTRY_ERRORS = T.let(T.unsafe(nil), Array)

# source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#17
class Dependabot::Bundler::UpdateChecker::VersionResolver
  include ::Dependabot::Bundler::UpdateChecker::SharedBundlerHelpers

  # @return [VersionResolver] a new instance of VersionResolver
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#23
  def initialize(dependency:, unprepared_dependency_files:, credentials:, ignored_versions:, options:, repo_contents_path: T.unsafe(nil), raise_on_ignored: T.unsafe(nil), replacement_git_pin: T.unsafe(nil), remove_git_source: T.unsafe(nil), unlock_requirement: T.unsafe(nil), latest_allowable_version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#50
  def latest_allowable_version_incompatible_with_ruby?; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#45
  def latest_resolvable_version_details; end

  private

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#237
  def bundler_version; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#133
  def circular_dependency_at_new_version?(error); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#156
  def conflict_on_ruby?(error); end

  # Returns the value of attribute credentials.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def credentials; end

  # Returns the value of attribute dependency.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def dependency; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#69
  def dependency_files; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#139
  def error_due_to_restrictive_upper_bound?(error); end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#82
  def fetch_latest_resolvable_version_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#227
  def gemfile; end

  # Returns the value of attribute ignored_versions.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def ignored_versions; end

  # Returns the value of attribute latest_allowable_version.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def latest_allowable_version; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#177
  def latest_version_details; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#232
  def lockfile; end

  # Returns the value of attribute options.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def options; end

  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#164
  def regenerate_dependency_files_without_ruby_lock; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#61
  def remove_git_source?; end

  # Returns the value of attribute replacement_git_pin.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def replacement_git_pin; end

  # Returns the value of attribute repo_contents_path.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def repo_contents_path; end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#149
  def ruby_lock_error?(error); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#191
  def ruby_version_incompatible?(details); end

  # @return [Boolean]
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#65
  def unlock_requirement?; end

  # Returns the value of attribute unprepared_dependency_files.
  #
  # source://dependabot-bundler//lib/dependabot/bundler/update_checker/version_resolver.rb#56
  def unprepared_dependency_files; end
end

# source://dependabot-bundler//lib/dependabot/bundler/version.rb#9
class Dependabot::Bundler::Version < ::Dependabot::Version; end
